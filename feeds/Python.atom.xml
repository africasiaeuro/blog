<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alex Clark - Python Web Developer</title><link href="http://aclark.net/blog/" rel="alternate"></link><link href="http://aclark.net/blog/feeds/Python.atom.xml" rel="self"></link><id>http://aclark.net/blog/</id><updated>2013-02-08T12:00:00-05:00</updated><entry><title>I love checkoutmanager and dotfiles</title><link href="http://aclark.net/blog/i-love-checkoutmanager-and-dotfiles.html" rel="alternate"></link><updated>2013-02-08T12:00:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-02-08:i-love-checkoutmanager-and-dotfiles.html</id><summary type="html">&lt;p&gt;&lt;em&gt;An ode to my OS X development workstation setup&lt;/em&gt; &lt;a class="footnote-reference" href="#id11" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am big on setting up my development environment, and enjoying the environment I work in. And I'm very thankful to the folks who make my life easier, including the authors of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ohloh.net/p/python/contributors/summary"&gt;Python&lt;/a&gt;: Python Core Developers&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/dotfiles"&gt;dotfiles&lt;/a&gt;: Jon Bernard&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/checkoutmanager"&gt;checkoutmanager&lt;/a&gt;: Reinout Van Rees&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also love &lt;strong&gt;repetition&lt;/strong&gt;. So picture if you will, a new &lt;strong&gt;Macbook Air or Pro&lt;/strong&gt; ready to serve as my development workstation. I like to perform, and study, the steps required to turn a new laptop in to my development workstation. So here we go. In this article, I will walk through the steps required to turn a new machine in to my developer workstation. Do follow along!&lt;/p&gt;
&lt;div class="section" id="shell"&gt;
&lt;h2&gt;Shell&lt;/h2&gt;
&lt;p&gt;One of the first things I do on a new system is change my shell to &lt;strong&gt;Zsh&lt;/strong&gt; in &lt;tt class="docutils literal"&gt;System Preferences &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Users &amp;amp; Groups &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Current User &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Right Click &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Advanced &lt;span class="pre"&gt;Options...&lt;/span&gt;&lt;/tt&gt;. Don't forget to &lt;tt class="docutils literal"&gt;Click the lock to make changes&lt;/tt&gt; first.&lt;/p&gt;
&lt;img alt="/blog/images/zsh.png" src="/blog/images/zsh.png" /&gt;
&lt;div class="section" id="zsh"&gt;
&lt;h3&gt;Zsh&lt;/h3&gt;
&lt;p&gt;Why &lt;strong&gt;Zsh&lt;/strong&gt;? One of my favorite features is &lt;strong&gt;shared history between open sessions&lt;/strong&gt;. So I can run a command in one window, and then run the same command from another window by fetching it from the history (with CTRL-R).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xcode"&gt;
&lt;h2&gt;XCode&lt;/h2&gt;
&lt;p&gt;After I take possession of my new laptop (running &lt;strong&gt;Mountain Lion&lt;/strong&gt;, the newest OS X at the time of this writing), I head to the App Store to download XCode. &lt;a class="footnote-reference" href="#id12" id="id2"&gt;[2]&lt;/a&gt; Among many other things, XCode gives me the GNU C Compiler and allows me to type &amp;quot;gcc&amp;quot; in my &lt;tt class="docutils literal"&gt;Applications &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Utilities &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Terminal&lt;/tt&gt;.&lt;/p&gt;
&lt;img alt="/blog/images/gcc.png" src="/blog/images/gcc.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;img alt="/blog/images/homebrew.png" src="/blog/images/homebrew.png" /&gt;
&lt;p&gt;Now I need a Python interpreter &lt;a class="footnote-reference" href="#id13" id="id4"&gt;[3]&lt;/a&gt;. For development I use the &lt;a class="reference external" href="https://github.com/collective/buildout.python"&gt;Collective Python Buildout&lt;/a&gt; but I also enjoy using &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;Homebrew's&lt;/a&gt; Python 2.7. I use Homebrew for a variety of other things too (e.g. mobile-shell AKA mosh) so here we go:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&amp;quot;
&lt;/pre&gt;
&lt;p&gt;… follow instructions …&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ brew install python
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="git"&gt;
&lt;h2&gt;Git&lt;/h2&gt;
&lt;p&gt;I think OS X (or XCode) includes git, but just in case:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ brew install git
&lt;/pre&gt;
&lt;p&gt;Which reminds me, don't forget that installing the command line utilities in Mountain Lion's XCode requires an additional step in &lt;tt class="docutils literal"&gt;Preferences &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Downloads &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Command Line Tools &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Install&lt;/tt&gt;:&lt;/p&gt;
&lt;img alt="/blog/images/command-line-utils.png" src="/blog/images/command-line-utils.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;Dotfiles&lt;/h2&gt;
&lt;p&gt;At this point, I can begin to get serious about turning this new machine in to my developer workstation. And that means: &lt;strong&gt;installing my private ssh key&lt;/strong&gt; so I can check out code without typing a password, of course. Normally this would be tedious, but with git and dotfiles it's not so bad. This is what I do from my home directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone https://super_secret_url/dotfiles.git Dotfiles
&lt;/pre&gt;
&lt;p&gt;I use https which requires a password for the first time only. Then I edit &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Dotfiles/.git/config&lt;/span&gt;&lt;/tt&gt; and change the repository URL to &lt;tt class="docutils literal"&gt;git&amp;#64;super_secret_url/dotfiles.git&lt;/tt&gt;. So every subsequent pull and push will require no password. And to &amp;quot;install&amp;quot; these dotfiles, I do &lt;a class="footnote-reference" href="#id16" id="id6"&gt;[6]&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install dotfiles
$ dotfiles -s --force
&lt;/pre&gt;
&lt;p&gt;Note: the dotfiles command finds my dotfiles in the default directory &amp;quot;Dotfiles&amp;quot; and create symbolic links to them.&lt;/p&gt;
&lt;div class="section" id="distribute-pip"&gt;
&lt;h3&gt;Distribute &amp;amp; Pip&lt;/h3&gt;
&lt;p&gt;Homebrew's Python includes pip, but even if it didn't:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl -O http://python-distribute.org/distribute_setup.py
$ /usr/local/bin/python distribute_setup.py
$ {easy_install, pip install} dotfiles
&lt;/pre&gt;
&lt;p&gt;In other words, you can always install Distribute &lt;a class="footnote-reference" href="#id14" id="id7"&gt;[4]&lt;/a&gt;. After which you can use &lt;tt class="docutils literal"&gt;easy_install&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; to install dotfiles. (You can read up on the differences. TL;DR: neither is &amp;quot;better&amp;quot; or &amp;quot;worse&amp;quot;, it's just a question of which tradeoffs you are willing to make. I tend to use pip just because it's newer and I like its requirements.txt feature, but easy_install is still very well supported as part of the Distribute project.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;Checkoutmanager&lt;/h2&gt;
&lt;p&gt;Now I need some things to develop. Since I work on a bunch of different projects, I need a way to keep track of what should be checked out at any given time. So I do this &lt;a class="footnote-reference" href="#id15" id="id9"&gt;[5]&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install checkoutmanager
$ checkoutmanager co
&lt;/pre&gt;
&lt;p&gt;This creates and populates my &lt;tt class="docutils literal"&gt;~/Developer&lt;/tt&gt; directory with code. And it &amp;quot;just works&amp;quot; because I keep a &lt;tt class="docutils literal"&gt;.checkoutmanager.cfg&lt;/tt&gt; in my Dotfiles repository. It currently looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[aclark]
basedir = /Users/aclark/Developer/aclark
checkouts =
    git&amp;#64;github.com:aclark4life/aclark4life.github.com.git resume
    git&amp;#64;github.com:aclark4life/desktops.git
    git&amp;#64;github.com:aclark4life/hireme.git
    git&amp;#64;github.com:aclark4life/projects.git
    git&amp;#64;github.com:aclark4life/reinstall.git
    git&amp;#64;github.com:ACLARKNET/tweets.git
    git&amp;#64;github.com:aclark4life/usesthis.git
vcs = git

[alt]
basedir = /Users/aclark/Developer/alt
checkouts =
    git&amp;#64;github.com:alt-aclark-net/alt-aclark-net.github.com.git
    git&amp;#64;github.com:alt-aclark-net/dexter.git
    git&amp;#64;github.com:alt-aclark-net/headstraight.git
vcs = git

[buildout]
basedir = /Users/aclark/Developer/buildout
checkouts =
    git&amp;#64;github.com:collective/buildout.bootstrap.git
    git&amp;#64;github.com:buildout/buildout.git
    git&amp;#64;github.com:buildout/buildout.github.com.git
vcs = git

[distribute]
basedir = /Users/aclark/Developer
checkouts = ssh://hg&amp;#64;bitbucket.org/tarek/distribute
vcs = hg

[clients]
basedir = /Users/aclark/Developer
checkouts =
; Bunch o client repos
vcs = git

[clients-hg]
basedir = /Users/aclark/Developer
checkouts =
; Bunch o client repos
vcs = hg

[dcpython]
basedir = /Users/aclark/Developer/dcpython
checkouts =
    git&amp;#64;github.com:DCPython/dcpython.github.com.git
    git&amp;#64;github.com:DCPython/pyramid-tutorials.git
vcs = git

[misc]
basedir = /Users/aclark/Developer
checkouts =
    git&amp;#64;github.com:ACLARKNET/aclarknet.github.com.git blog
    git&amp;#64;github.com:ACLARKNET/new_style.git
    git&amp;#64;github.com:aclark4life/binfiles.git
;    git&amp;#64;github.com:aclark4life/pyramid_python_3.git
    git&amp;#64;github.com:aclark4life/vanity.git
    git&amp;#64;github.com:aclark4life/zope2-heroku.git
    git&amp;#64;github.com:aclark4life/zope2_bootstrap.git
    git&amp;#64;github.com:codekoala/django-axes.git
    git&amp;#64;github.com:collective/buildout.python
vcs = git

[pillow]
basedir = /Users/aclark/Developer/pillow
checkouts =
    git&amp;#64;github.com:python-imaging/Pillow.git
    git&amp;#64;github.com:python-imaging/python-imaging.github.com.git
vcs = git

[plethorasociety]
basedir = /Users/aclark/Developer/plethorasociety
checkouts =
    git&amp;#64;github.com:plethorasociety/plethorasociety.github.com.git
vcs = git

[plone]
basedir = /Users/aclark/Developer/plone
checkouts =
    git&amp;#64;github.com:aclark4life/Plone-Debug-Assistant.git
    git&amp;#64;github.com:aclark4life/collective.recipe.bluebream.git
    git&amp;#64;github.com:aclark4life/event_days_indexer.git
    git&amp;#64;github.com:aclark4life/hello_plone.git
    git&amp;#64;github.com:aclark4life/mr_migrator_demo.git
    git&amp;#64;github.com:aclark4life/parse2plone.git
    git&amp;#64;github.com:aclark4life/plone_1_fun.git
    git&amp;#64;github.com:aclark4life/plone_addon_upgrade.git
    git&amp;#64;github.com:aclark4life/plone_guide.git
    git&amp;#64;github.com:aclark4life/plone_workflow_events.git
    git&amp;#64;github.com:aclark4life/schemaextender-facetednav-demo.git
    git&amp;#64;github.com:aclark4life/silly_content_import.git
    git&amp;#64;github.com:aclark4life/transmogrify.extract.git
    git&amp;#64;github.com:aclark4life/transmogrify.regexp.git
    git&amp;#64;github.com:aclark4life/viewlets_dont_suck.git
    git&amp;#64;github.com:aclark4life/wordpress2plone.git
    git&amp;#64;github.com:collective/Products.AttachmentField.git
    git&amp;#64;github.com:collective/Products.CalendarX.git
    git&amp;#64;github.com:collective/Products.EventRegistration.git
    git&amp;#64;github.com:collective/Products.PloneSoftwareCenter.git
    git&amp;#64;github.com:collective/Products.ifQuotes.git
    git&amp;#64;github.com:collective/Products.naked_plone.git
    git&amp;#64;github.com:collective/buildout.plonetest.git
    git&amp;#64;github.com:collective/collective.contacts.git
    git&amp;#64;github.com:collective/collective.controlpanel.edit_css.git
    git&amp;#64;github.com:collective/collective.developermanual.git
    git&amp;#64;github.com:collective/collective.formtoy.git
    git&amp;#64;github.com:collective/collective.github.com.git
    git&amp;#64;github.com:collective/collective.googleanalytics.git
    git&amp;#64;github.com:collective/collective.package.git
    git&amp;#64;github.com:collective/collective.project.git
    git&amp;#64;github.com:collective/collective.recaptcha.git
    git&amp;#64;github.com:collective/collective.recipe.grp.git
    git&amp;#64;github.com:collective/collective.recipe.rsync.git
    git&amp;#64;github.com:collective/collective.rip.git
    git&amp;#64;github.com:collective/collective.stats.git
    git&amp;#64;github.com:collective/funnelweb.git
    git&amp;#64;github.com:collective/github-collective.git
    git&amp;#64;github.com:collective/mr.migrator.git
    git&amp;#64;github.com:collective/plonecom-buildout.git
    git&amp;#64;github.com:collective/plonecom.theme.git
    git&amp;#64;github.com:collective/plonetheme.coolblue.git
    git&amp;#64;github.com:collective/plonetheme.freshpick.git
    git&amp;#64;github.com:collective/plonetheme.grungeera.git
    git&amp;#64;github.com:collective/plonetheme.keepitsimple.git
    git&amp;#64;github.com:collective/plonetheme.unilluminated.git
    git&amp;#64;github.com:collective/transmogrify.filesystem.git
    git&amp;#64;github.com:plone/Installers-OS-X.git
    git&amp;#64;github.com:plone/Products.PloneOrg.git
    git&amp;#64;github.com:plone/admin-docs.git
    git&amp;#64;github.com:plone/buildout.coredev.git
    git&amp;#64;github.com:plone/planet.plone.org.git
    git&amp;#64;github.com:plone/plone.api.git
    git&amp;#64;github.com:plone/plone.github.com.git
    git&amp;#64;github.com:plone/ploneorg.admin.git
    git&amp;#64;github.com:plone/plonetheme.ploneorg.git
vcs = git

[pythonpackages]
basedir = /Users/aclark/Developer/pythonpackages
checkouts =
    git&amp;#64;github.com:aclark4life/buildout-apache-mysql.git
    git&amp;#64;github.com:aclark4life/buildout-munin.git
    git&amp;#64;github.com:aclark4life/buildout-mysql.git
    git&amp;#64;github.com:aclark4life/buildout-nginx.git
    git&amp;#64;github.com:aclark4life/buildout-plone-haproxy.git
    git&amp;#64;github.com:aclark4life/buildout-plone-varnish.git
    git&amp;#64;github.com:aclark4life/buildout-zenoss.git
    git&amp;#64;bitbucket.org:pythonpackages/pythonpackages.com.git vanity_app
    git&amp;#64;github.com:pythonpackages/buildout-apache-modwsgi.git
    git&amp;#64;github.com:pythonpackages/buildout-bluebream.git
    git&amp;#64;github.com:pythonpackages/buildout-django.git
    git&amp;#64;github.com:pythonpackages/buildout-jenkins.git
    git&amp;#64;github.com:pythonpackages/buildout-plone-getpaid.git
    git&amp;#64;github.com:pythonpackages/buildout-plone.git
    git&amp;#64;github.com:pythonpackages/buildout-wordpress.git
    git&amp;#64;github.com:pythonpackages/buildout-zope2.git
    git&amp;#64;github.com:pythonpackages/experimental.pythonpackages.git
    git&amp;#64;github.com:pythonpackages/github-services.git pythonpackages-github-services
    git&amp;#64;github.com:pythonpackages/pyramidpypi.git pythonpackages-index
    git&amp;#64;github.com:pythonpackages/pythonpackages-blog.git
    git&amp;#64;github.com:pythonpackages/pythonpackages-docs.git
    git&amp;#64;github.com:pythonpackages/pythonpackages-graphs.git
    git&amp;#64;github.com:pythonpackages/pythonpackages-paste.git
    git&amp;#64;github.com:pythonpackages/pythonpackages-scaffolds.git
    git&amp;#64;github.com:pythonpackages/pythonpackages.sendpickedversions.git
    git&amp;#64;github.com:pythonpackages/pythonpackages-whiskers.git
    git&amp;#64;github.com:pythonpackages/pythonpackages.git
vcs = git

[toys]
basedir = /Users/aclark/Developer/toys
checkouts =
    git&amp;#64;github.com:aclark4life/basic_pyramid_zodb.git
    git&amp;#64;github.com:aclark4life/github_repos_cloner.git
    git&amp;#64;github.com:aclark4life/other.git
    git&amp;#64;github.com:aclark4life/python_study.git
    git&amp;#64;github.com:aclark4life/django-hello.git
vcs = git
&lt;/pre&gt;
&lt;p&gt;Now it's time to bootstrap the Collective Python Buildout, which gives me &lt;strong&gt;all versions of Python, ever&lt;/strong&gt; &lt;a class="footnote-reference" href="#id17" id="id10"&gt;[7]&lt;/a&gt;. And off we go:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd Developer/buildout.python
$ python bootstrap.py
&lt;/pre&gt;
&lt;p&gt;Finally, there is some PATH configuration required to make all of this seemless. The Collective Python Buildout gets installed in /opt while brew's stuff is in /usr/local. My PATH config currently looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/Users/aclark/Developer/buildout.python/python-2.7/bin:$PATH
export PATH=~/Developer/binfiles:/usr/local/share/npm/bin:$PATH
&lt;/pre&gt;
&lt;p&gt;With the above configuration, I default to the Python 2.7 in the Collective Python Buildout. That means that is the &amp;quot;python&amp;quot; or &amp;quot;virtualenv&amp;quot; I get when I type those commands. I use the full path or expanded binary name when I need them e.g. /usr/local/bin/python or python3.3.&lt;/p&gt;
&lt;p&gt;That's it! I hope you will check out dotfiles and checkoutmanager for all your development needs.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not really an ode: &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Ode"&gt;http://en.wikipedia.org/wiki/Ode&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I know about Kenneth Reitz's XCode Command line Tools only, but if I recall correctly there is some &amp;quot;gotcha&amp;quot; that has bitten me more than once if I use that instead of the full XCode. I wish I could remember what it was now, but it's not coming to me. If it works for you though, great!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I know about the system Python, and for small things like checkoutmanager and dotfiles I don't mind using it. But there is merit in avoiding it because Apple treats it like &amp;quot;their&amp;quot; Python and makes decisions for you that you may prefer to make yourself. E.g. I believe they use a crippled version of the readline library.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Distribute is a more actively maintained fork of the venerable setuptools library (which itself is built on top of the Python standard library's distutils). Are we having fun yet?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I also alias checkoutmanager to cm :-)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I force because I want to replace the newly created .ssh dir with the one I keep in my Dotfiles repository.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id17" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id10"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Well, 2.4 through 3.3 at last count.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Django"></category><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Please Help Me Do Open Source Work</title><link href="http://aclark.net/blog/please-help-me-do-open-source-work.html" rel="alternate"></link><updated>2013-01-31T13:00:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-31:please-help-me-do-open-source-work.html</id><summary type="html">&lt;p&gt;&lt;em&gt;From my 'mid-life-crisis' series of blog entries :-)&lt;/em&gt;&lt;/p&gt;
&lt;img alt="images/open-source-work.png" src="images/open-source-work.png" /&gt;
&lt;div class="section" id="open-source-work"&gt;
&lt;h2&gt;Open Source Work&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Open Source Work&lt;/strong&gt; has paid my bills for a long time. Starting with &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt; in the early 2000s, to &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; in the early 2010s, to now. And for this, I am very grateful. To be clear: it's not exactly the &lt;em&gt;Open Source Work&lt;/em&gt; that has paid my bills, it's the consulting work I've been able to secure as a result of my dedication and devotion to open source software and communities. Which is great! (Even more clear: my dedication and devotion to open source software and communities has made learning new skills fun. And those skills have paid my bills for the past 8 years.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: Open Source Work is awesome. I'll likely spend my entire life doing it (in some capacity or another). And while Open Source Work does not pay, the experience is invaluable.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="saas-offering"&gt;
&lt;h2&gt;SaaS Offering&lt;/h2&gt;
&lt;p&gt;Along the way, I caught the &amp;quot;startup bug&amp;quot; and have been interested in building a SaaS offering that would at least pay my bills, if not make me fantastically wealthy. Enter 2012's: &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;. The year I spent doing pythonpackages.com work was awesome. I learned a lot. Traveled. Met a lot of cool folks who seemed genuinely interested in my idea(s). But unfortunately, I never made a dime doing it. The lesson, among others, is that &lt;strong&gt;SaaS offerings are hard&lt;/strong&gt;. I am now semi-focused on a &amp;quot;reboot&amp;quot; of the pythonpackages.com idea(s), but that's going to take a while to get going.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: Consulting *was* the dream. Now building a SaaS offering *is* the dream (among others). So where does Open Source Work fit in?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="play-as-work"&gt;
&lt;h2&gt;Play as Work&lt;/h2&gt;
&lt;p&gt;I've been &amp;quot;working for a living&amp;quot; since age 14. Back then, I was a busboy and dishwasher in my family's Italian restaurant, where I first learned to &lt;strong&gt;work hard and have fun doing it&lt;/strong&gt;. Since then, I've always worked hard, had fun, and taken few vacations (except for 1994-1998 when I was a full time CS student). I suspect I will always &amp;quot;work for a living&amp;quot; though as I get older, the line between work and play becomes even blurrier. Everyone wants to love or at least like their work. But very few are able to turn their play in to paid work. That's what I want to do. And I am very fortunate, I think, to know what I want to do in life. I know middle aged folk that still don't know the answer to that question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: liking my work *was* the dream. Now turning the things I like to do into paid work *is* the dream. In 2013, I would like to spend more time doing Open Source Work, working on projects like&lt;/strong&gt; &lt;a class="reference external" href="http://github.com/buildout"&gt;Buildout&lt;/a&gt;, &lt;a class="reference external" href="http://dcpython.org"&gt;DC Python&lt;/a&gt;, &lt;a class="reference external" href="http://github.com/python-imaging"&gt;Pillow&lt;/a&gt;, &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt;, &lt;a class="reference external" href="http://github.com/codekoala/django-axes"&gt;django-axes&lt;/a&gt;, &lt;a class="reference external" href="http://resume.aclark.net/projects/#collective"&gt;et al&lt;/a&gt;. &lt;strong&gt;If you have benefited from my work on any of these projects, directly or indirectly, please consider making a&lt;/strong&gt; &lt;a class="reference external" href="https://www.gittip.com/aclark4life"&gt;gittip donation&lt;/a&gt; &lt;strong&gt;to help me do more Open Source Work in 2013.&lt;/strong&gt;&lt;/p&gt;
&lt;script data-gittip-username="aclark4life"
src="https://www.gittip.com/assets/widgets/0002.js"&gt;
&lt;/script&gt;&lt;/div&gt;
</summary><category term="Django"></category><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Python 3 Porting</title><link href="http://aclark.net/blog/python-3-porting.html" rel="alternate"></link><updated>2013-01-10T19:15:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-10:python-3-porting.html</id><summary type="html">&lt;p&gt;&lt;em&gt;The 3 in 2013 is for Python 3&lt;/em&gt;&lt;/p&gt;
&lt;img alt="images/python-3-port.jpg" src="images/python-3-port.jpg" /&gt;
&lt;p&gt;I tend to like projects that everyone else &lt;strong&gt;hates&lt;/strong&gt;, e.g.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Removing persistent Python objects associated with missing classes in ZODB.&lt;/li&gt;
&lt;li&gt;Making new releases for old software that is still useful but unmaintained.&lt;/li&gt;
&lt;li&gt;Running flake8 on 10s or 100s of source files and hand-fixing the results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part of this has to do with &lt;strong&gt;repetition&lt;/strong&gt;. I know how to do these things, and I like doing them. Over and over. If someone says, &amp;quot;my Data.fs file is broken&amp;quot; I get excited. Anyway, I hope you get the idea.&lt;/p&gt;
&lt;div class="section" id="i-am-your-man"&gt;
&lt;h2&gt;I am your man&lt;/h2&gt;
&lt;p&gt;Which brings me to the subject of this post: &lt;strong&gt;Python 3 Porting&lt;/strong&gt;. I've been helping out porting the Python Imaging Library to Python 3 (via the Pillow fork, where I am the release manager). And it strikes me as the type of thing I'd be very interested in doing professionally. So, if you or your company are in need of a &amp;quot;workhorse&amp;quot; to plow through old code and update it, &lt;a class="reference external" href="http://aclark.net/team/alex-clark"&gt;I am your man&lt;/a&gt;. Please do &lt;a class="reference external" href="mailto:info&amp;#64;aclark.net"&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-in-it-for-you"&gt;
&lt;h2&gt;What's in it for you&lt;/h2&gt;
&lt;p&gt;Now I know what you are thinking: &lt;strong&gt;porting Python 2 software to Python 3 is a lot of work for little gain&lt;/strong&gt;. Maybe. Maybe not. I'm not going to try to convince you otherwise, however I will tell you this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For me, 2013 is &amp;quot;the year of Python 3&amp;quot;. I've now promised to deliver and maintain a &lt;strong&gt;Python 3 compatible PIL by PyCon 2013&lt;/strong&gt;. I now care about Python 3 (this was not true before).&lt;/li&gt;
&lt;li&gt;The Python 3 Wall of Shame is now the &lt;a class="reference external" href="https://python3wos.appspot.com/"&gt;Python 3 Wall of Superpowers&lt;/a&gt;. We are over the hump.&lt;/li&gt;
&lt;li&gt;Many popular Python web frameworks support or are about to support Python 3 e.g. CherryPy, Django, Pyramid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, there is no time like the present to &lt;strong&gt;take a serious look at Python 3&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Django"></category><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Pillow Python 3</title><link href="http://aclark.net/blog/pillow-python-3.html" rel="alternate"></link><updated>2013-01-10T12:15:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-10:pillow-python-3.html</id><summary type="html">&lt;p&gt;PIL is on its way to &lt;strong&gt;Python 3&lt;/strong&gt; via Pillow. Support from Brian Crowell and others has been merged into master here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python-imaging/Pillow/pull/35"&gt;https://github.com/python-imaging/Pillow/pull/35&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And work continues toward a pre &lt;strong&gt;PyCon 2013&lt;/strong&gt; release! Please help if you can:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu users, read through &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues/18"&gt;https://github.com/python-imaging/Pillow/issues/18&lt;/a&gt; and provide assistance with testing this Ubuntu package: &lt;a class="reference external" href="https://launchpad.net/~pythoneers/+archive/ppa"&gt;https://launchpad.net/~pythoneers/+archive/ppa&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Git experts, please comment on the merge issue described here: &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/pull/35"&gt;https://github.com/python-imaging/Pillow/pull/35&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Everyone else, please git clone the master branch for testing: &lt;strong&gt;git://github.com/python-imaging/Pillow.git&lt;/strong&gt; and report issues as you find them: &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues"&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
</summary><category term="Python"></category></entry><entry><title>Introducing The Plone Kitty</title><link href="http://aclark.net/blog/introducing-the-plone-kitty.html" rel="alternate"></link><updated>2013-01-09T12:15:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-09:introducing-the-plone-kitty.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Actually: re-introducing the Plone Kitty from Plone 1!&lt;/em&gt;&lt;/p&gt;
&lt;img alt="images/plone-kitty.png" src="images/plone-kitty.png" /&gt;
&lt;p&gt;&lt;em&gt;Plone Kitty&lt;/em&gt; is the name of a theme (then called &amp;quot;skin&amp;quot;) that shipped with the earliest versions of &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt; (1.1 in the image above). This was a simpler time when the web was new, and everything was possible!&lt;/p&gt;
&lt;p&gt;Today, we know that the &lt;strong&gt;web is hard&lt;/strong&gt;. While everything is still possible, building the web requires a tremendous amount of hard work. But it doesn't have to be all drudgery. There is still quite a bit of fun to be had building the web, if you know where to look (in addition to all the unavoidable hard work).&lt;/p&gt;
&lt;p&gt;Enter: Plone. Both the web and Plone have changed drastically since The Plone Kitty once prowled the internet. And while the Plone Kitty is all but extinct, Plone lives on; continously modernizing itself to keep up with the fast pace of today's modern web.&lt;/p&gt;
&lt;p&gt;From the &lt;a class="reference external" href="http://plone-1-fun.herokuapp.com"&gt;Plone Kitty website&lt;/a&gt; (now running on Heroku!):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
If you used Plone &amp;quot;back in the day&amp;quot; (early 2000s), please add a comment below about your experiences then. If you are new to Plone or just curious about it now, please add a comment below about your initial impressions.
&lt;/pre&gt;
&lt;p&gt;So if you'd like to add &lt;strong&gt;your bit of nostalgia&lt;/strong&gt;, or first impressions of Plone, &lt;a class="reference external" href="http://plone-1-fun.herokuapp.com/#disqus"&gt;please do so here&lt;/a&gt;. I appreciate any and all comments.&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>New Year's Python Meme 2012</title><link href="http://aclark.net/blog/new-years-python-meme-2012.html" rel="alternate"></link><updated>2012-12-29T15:30:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-12-29:new-years-python-meme-2012.html</id><summary type="html">&lt;img alt="images/tarek-meme-reminder.png" src="images/tarek-meme-reminder.png" /&gt;
&lt;p&gt;&lt;em&gt;This is my entry for Tarek Ziadé's New Year's Python Meme, a tradition I have come to enjoy. Both to reflect on the current year and look back on previous years. So here it is.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I did this in &lt;a class="reference external" href="http://blog.aclark.net/2009/12/31/new-years-python-meme/"&gt;2009&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="http://blog.aclark.net/2011/12/21/new-years-python-meme-2011/"&gt;2011&lt;/a&gt;. Let's try it again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. What’s the coolest Python application, framework or library you have discovered in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That would be &lt;a class="reference external" href="http://docs.python-requests.org/en/latest/"&gt;Kenneth Reitz's Requests&lt;/a&gt;. Like many others, I've been bitten by the elegance and simplicity bug that is inherent and ingrained in the Requests library. Primarily, I used it to build pythonpackages.com. In particular, I used it to communicate with the almost-equally-elegant (IMHO) GitHub API. This is why I like requests (among other reasons): I don't need to use a &amp;quot;third party&amp;quot; library to communicate with the GitHub API. Such libraries (I think) attempt to make my job easier by hiding complexity and presenting simpler APIs to use. This is sometimes necessary, but no substitute for &lt;em&gt;really&lt;/em&gt; and &lt;em&gt;actually&lt;/em&gt; simple APIs and good documentation (both of which GitHub and Kenneth provide, with their respective APIs.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. What new programming technique did you learn in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript: check. Unit testing: check. These are techniques I have learned enough of to be effective in my &amp;quot;day job&amp;quot; (I'm self-employed). But I learned (finally) that I am primarily: a Python Web Developer. And it feels good to say that. I use Python, and related web technologies to build web applications for my clients. I typically only care to learn enough of a technology to get my job done, then I lose interest (for the most part). That's because I'm also a Hacker. I identify significantly with this monicker because it fits who I am and how I conduct myself professionally. I care about getting the job done above all else. And if there is a job to be done, my intellectual curiosity knows no bounds. If the job is done, I'm going to play guitar. So whatever the technique, I'll learn it if it's something I care about for whatever reason.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Which open source project did you contribute to the most in 2012 ? What did you do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the first year that Plone did not consume my every moment. I also spent significant time working on &lt;a class="reference external" href="https://github.com/buildout"&gt;Buildout&lt;/a&gt; (INI-config-driven system to install Python packages and other software, &amp;amp; perform other related and miscellaneous tasks) and &lt;a class="reference external" href="https://github.com/python-imaging"&gt;Pillow (PIL fork)&lt;/a&gt;. With the help of many others, I hope to get a Python 3.3 compatible release of Pillow out by PyCon 2013. And I'll support Buildout &amp;lt; 2.x until such time as Buildout 2.x goes mainstream.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Which Python blog or website did you read the most in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Planets: Django, Mozilla, Plone, Python. Reddits: Python. Other feeds: Hacker News &amp;amp; Tech Crunch. I added Tech Crunch this year to satisfy my &amp;quot;startup itch&amp;quot;, as was recommended to me by Jonathon Perrelli of Fortify.vc in DC.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. What are the three top things you want to learn in 2013?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How to hustle. Hustling, and more hustling. I've gained a lot (enough?) technical skill over the years. Now I want to put that skill to good use in business. I've managed to remain self-employed for a number of years, now I'd like to employ others full time, build successful businesses and otherwise &amp;quot;expand my empire&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. What is the top software, application or library you wish someone would write in 2013?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope that I get more significant time to put into my &amp;quot;baby&amp;quot;: &lt;a class="reference external" href="https://github.com/pythonpackages"&gt;pythonpackages.com&lt;/a&gt;. In particular, I'm considering adding a Travis-like service which would spawn Windows VMs to run tests and produce executables for Python packages (to address a particular pain point I've discovered along the way: people want to support Windows, but often don't have the ability to do so easily.)&lt;/p&gt;
&lt;p&gt;Happy (Python) New Year!&lt;/p&gt;
&lt;p&gt;Want to do your own list? Here's how:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Copy-paste the questions and answer to them in your blog&lt;/li&gt;
&lt;li&gt;Tweet it with the &lt;a class="reference external" href="https://twitter.com/search/realtime?q=%232012pythonmeme&amp;amp;src=typd"&gt;#2012pythonmeme&lt;/a&gt; hashtag&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Django"></category><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>The Zen of Zope, by Alex Clark</title><link href="http://aclark.net/blog/the-zen-of-zope-by-alex-clark.html" rel="alternate"></link><updated>2012-12-09T18:00:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-12-09:the-zen-of-zope-by-alex-clark.html</id><summary type="html">&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import other
The Zen of Zope, by Alex Clark


Beautiful is an attribute of ugly.
Explicit is implemented by implicit.
Simple is provided by complex.
Complex is directly provided by complicated.
Flat only implements nested.
Sparse has tagged value dense.
Readability count is not in range.
Special cases could not adapt the rules.
Practicality implements purity.
Errors should never require a specification that doesn’t extend the specification of silence.
Unless explicit is a multi-adapter.
In subscribing to ambiguity, return all the objects that refuse the temptation to guess.
There should be none-- and preferably only zero --output from a handler.
Although that way may not be obvious at first unless you've registered an adapter hook
Now is verified by never.
Although never is not implemented by *right* now.
If the implementation is hard to explain, it queries the bad idea utility.
If the implementation is easy to explain, it may query the good idea utility.
Implicit namespace packages are one honking great idea -- let's do more of those!
&lt;/pre&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Plone Guide</title><link href="http://aclark.net/blog/plone-guide.html" rel="alternate"></link><updated>2012-11-23T08:30:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-11-23:plone-guide.html</id><summary type="html">&lt;div class="section" id="who"&gt;
&lt;h2&gt;Who&lt;/h2&gt;
&lt;p&gt;For anyone new to my blog, welcome. I am Alex Clark: Python Web Developer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what"&gt;
&lt;h2&gt;What&lt;/h2&gt;
&lt;p&gt;Recently with a tweet, I announced the start of a new personal project:&lt;/p&gt;
&lt;img alt="images/tweet.png" src="images/tweet.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="when"&gt;
&lt;h2&gt;When&lt;/h2&gt;
&lt;p&gt;I have tentatively scheduled this project to be completed by the end of 2013, because it's important to set a deadline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where"&gt;
&lt;h2&gt;Where&lt;/h2&gt;
&lt;p&gt;This project will be hosted on one of my current favorite websites: &lt;a class="reference external" href="http://readthedocs.org"&gt;http://readthedocs.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;I think about Plone a lot as it relates to my current professional work. And I have more thoughts than I can currently keep track of in blogs, tweets, etc. So I decided to make an effort to write them all down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;I think a lot about what other people think about Plone, so I decided this book will feature comments from the general public in it. E.g.:&lt;/p&gt;
&lt;img alt="images/comments.png" src="images/comments.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="how-much"&gt;
&lt;h2&gt;How much?&lt;/h2&gt;
&lt;p&gt;This book will be free. But if you'd like to support its development, please &lt;a class="reference external" href="http://gittip.com/aclark4life"&gt;gittip me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There's not much to it yet, but feel free to head over and add some comments: &lt;a class="reference external" href="https://plone-guide.readthedocs.org/en/latest/"&gt;https://plone-guide.readthedocs.org/en/latest/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Pillow 1-7-8</title><link href="http://aclark.net/blog/pillow-1-7-8.html" rel="alternate"></link><updated>2012-11-02T11:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-11-02:pillow-1-7-8.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Pillow is the &amp;quot;friendly&amp;quot; PIL fork. Initially just a packaging fork, now considering image code bug fixes and Python 3 support. To be friendly, we attempt to track changes against upstream tickets in PIL.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Pillow 1.7.8 is out! Read about it here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/Pillow/1.7.8"&gt;http://pypi.python.org/pypi/Pillow/1.7.8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="features"&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's PIL (Python Imaging Library)&lt;/li&gt;
&lt;li&gt;It installs on all modern systems &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Win32 eggs are provided (special thanks to Takayuki Shimizukawa)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="changes"&gt;
&lt;h2&gt;Changes&lt;/h2&gt;
&lt;p&gt;This release includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Removed doctests.py that made tests of other packages fail. [thomasdesvenain]&lt;/li&gt;
&lt;li&gt;Fix opening psd files with RGBA layers when A mode is not of type 65535 but 3. Fixes issue &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues/3"&gt;https://github.com/python-imaging/Pillow/issues/3&lt;/a&gt; [thomasdesvenain]&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;To install Pillow:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ easy_install Pillow
&lt;/pre&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install Pillow
&lt;/pre&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python setup.py install (inside the extracted zip)
&lt;/pre&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install zc.buildout
$ buildout init
&lt;/pre&gt;
&lt;p&gt;With &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
parts = pillow

[pillow]
recipe = zc.recipe.egg
&lt;/pre&gt;
&lt;p&gt;And:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ buildout
&lt;/pre&gt;
&lt;p&gt;(Note: easy_install &amp;amp; pip each handle namespace packages differently, so you should choose one or the other, and not mix the two.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="report-issues"&gt;
&lt;h2&gt;Report issues&lt;/h2&gt;
&lt;p&gt;If you find an issue, please report it here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues"&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Better yet: please fork, fix, and submit a pull request. Please also solicit for peer review once the pull request has been submitted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="discussion"&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;
&lt;p&gt;You may discuss issues related to PIL, Pillow, and Python imaging on the image-sig list:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mail.python.org/mailman/listinfo/image-sig"&gt;http://mail.python.org/mailman/listinfo/image-sig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy using Pillow!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If it doesn't, please report it: &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues"&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>Django Hello</title><link href="http://aclark.net/blog/django-hello.html" rel="alternate"></link><updated>2012-10-23T13:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-23:django-hello.html</id><summary type="html">&lt;p&gt;Django doesn't really need a hello world style introduction, its documentation speaks for itself. But this is what &lt;strong&gt;Hello World&lt;/strong&gt; in Django looks like to me. I hate boilerplate and I love reducing software down to its core components; just enough to start the server.&lt;/p&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from setuptools import setup

setup(
    name='hello',
)
&lt;/pre&gt;
&lt;p&gt;requirements.txt:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Django==1.4.1
-e .
&lt;/pre&gt;
&lt;p&gt;settings.py:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from hello import urls


DEBUG = True
ROOT_URLCONF = urls
&lt;/pre&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from django.conf.urls import patterns

urlpatterns = patterns(
    '',
    (r'', 'hello.views.index'),
)
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from django.http import HttpResponse
import datetime


# Based on https://docs.djangoproject.com/en/1.4/topics/http/views/
def index(request):
    &amp;quot;&amp;quot;&amp;quot;
    This function takes a Django request object and returns a 'Hello World'
    style response, by wrapping some HTML in a Django response object.
    &amp;quot;&amp;quot;&amp;quot;

    now = datetime.datetime.now()
    html = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;It is now %s.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; % now
    return HttpResponse(html)
&lt;/pre&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone this-repo
$ cd this-repo
$ virtualenv .
$ bin/pip install -r requirements.txt
$ bin/django-admin.py runserver --settings=hello.settings
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;The above code can be found here:&lt;/em&gt; &lt;a class="reference external" href="https://github.com/aclark4life/django-hello"&gt;https://github.com/aclark4life/django-hello&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Consider a&lt;/em&gt;&lt;/p&gt;
&lt;iframe style="border: 0; margin: 0; padding: 0;"
        src="https://www.gittip.com/aclark4life/widget.html"
        width="48pt" height="20pt"&gt;&lt;/iframe&gt;&lt;p&gt;&amp;lt;3&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Django"></category><category term="Python"></category></entry><entry><title>Gittip, Misunderstood</title><link href="http://aclark.net/blog/gittip-misunderstood.html" rel="alternate"></link><updated>2012-10-19T03:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-19:gittip-misunderstood.html</id><summary type="html">&lt;p&gt;People do not understand gittip. Or, they do not understand how I use it. Worse, they &lt;strong&gt;think&lt;/strong&gt; they understand it &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;. So much so, some choose to comment about it publicly.&lt;/p&gt;
&lt;img alt="images/condescend.jpg" src="images/condescend.jpg" /&gt;
&lt;p&gt;Remember &lt;a class="reference external" href="http://blog.aclark.net/gittip-is-the-future.html"&gt;gittip is the future&lt;/a&gt;? Someone commented:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Nobody likes a beggar.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
— &lt;a class="reference external" href="mailto:fuckoff&amp;#64;dfgd.com"&gt;fuckoff&amp;#64;dfgd.com&lt;/a&gt;&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Really? Well, I have to agree. I &lt;strong&gt;don't like seeing panhandlers&lt;/strong&gt; on the street. But I'd never yell &amp;quot;Nobody likes a beggar!&amp;quot; at them. Why? Because: I don't care what they do. Does their presence sometimes annoy me? Sure, because I have to read the sign. And then I have to nod, like &amp;quot;What's up&amp;quot; and &amp;quot;Nah, sorry&amp;quot; at the same time (an acquired skill).&lt;/p&gt;
&lt;p&gt;But that is not what bothers me the most about my friend &amp;#64;dfgd.com's comment. What bothers me the most is: I don't claim to know or understand why people do what they do. And short of a loitering law being broken somewhere, I think they have every right to do it (as long as they are not harming me or others). I'd even like to see a pandhandler use Square to accept payments. It sounds ridiculous, but I'd actually pay a panhandler that was accepting credit cards (I have no idea why this amuses me, but it does; of course, you may think twice about what is happening when they swipe but could a panhandler really figure out how to…&amp;nbsp;I digress, back to the story.)&lt;/p&gt;
&lt;p&gt;Anyway, pro tip: &lt;strong&gt;the people who use gittip are not begging&lt;/strong&gt;. Some (most?) never ask for a dime. I choose to promote my gittip link and I am now going to tell you why, so if anyone ever asks? Or condescends? Here it is:&lt;/p&gt;
&lt;div class="section" id="i-like-the-project"&gt;
&lt;h2&gt;I like the project&lt;/h2&gt;
&lt;p&gt;I like what Chad Whitacre is doing. I think it's a cool idea. I want to do everything I can to help him promote his service. I also like that people I know and like are being gittip'ed. It gives me a warm fuzzy inside. Hell, the entire &amp;quot;top 10&amp;quot; gives me a warm fuzzy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-like-money"&gt;
&lt;h2&gt;I like money&lt;/h2&gt;
&lt;p&gt;I have a funny story I like tell to… well, to you, now: I've done AdSense in the past. For YEARS. One time one of my blog entries got about 40+ upvotes on Hacker News and my revenue went up as quickly as it ever had. This, after years of adsensing, tipped the scales to… YUP, you guessed it! $100. I got my check, and a copy of it is sitting nearby ready for framing. Was that the hardest $100 I ever made? Probably. But it felt damn good to make it. Similarly, with $2 per week in support, I stand to make another $100 much quicker than I ever did with AdSense. This, my friends, is progress. It may not seem like much to random people on the internet. In fact, it may even be laughable, disgusting, or any number of things to other people. But guess what: it's none of their business.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="money-is-not-my-boss"&gt;
&lt;h2&gt;Money is not my boss&lt;/h2&gt;
&lt;p&gt;Some people go &lt;strong&gt;APE SHIT&lt;/strong&gt; and get &lt;strong&gt;REALLY UNCOMFORTABLE&lt;/strong&gt; in certain situations involving money. I am not one of them. Are you concerned that I'm not volunteering enough and getting paid too much? Don't be. I assure you, I can figure it out. If you have any questions, just ask me: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;. Are you concerned that because I get paid, someone else may get the wrong impression about volunteering and why do some people get paid and some don't and don't you worry this may give the wrong…? No. I trust that if someone wants to volunteer, that's exactly what they are going to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-have-vision"&gt;
&lt;h2&gt;I have vision&lt;/h2&gt;
&lt;p&gt;I picture any number of scenarios with gittip. Here are some:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Do you like that I've spent years pouring my heart and soul into the Plone software and community, and perhaps, made your life better in some small way? Gittip me.&lt;/li&gt;
&lt;li&gt;Did you notice I forked the Python Imaging Library so that thousands of people could have a working PIL release? Gittip me.&lt;/li&gt;
&lt;li&gt;Did you also notice the new zc.buildout release that's much faster than the old release? Gittip me. (And a few others too, most especially: iElectric and zenwryly… you could also gittip Jim Fulton too, I guess :-)).&lt;/li&gt;
&lt;li&gt;Do you want me to handle your Python package releases on a regular basis for you, but you don't want to sign a contract with my consulting business or use pythonpackages.com? Gittip me.&lt;/li&gt;
&lt;li&gt;Do you want me to handle some other task on a regular basis, but you don't want to sign a contract with my consulting business? Gittip me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are you aware of all those things and don't want to gittip me? That's fine too. I'm not entirely sure I'm making myself clear, but I will leave you with this: I will always donate my time freely to good causes, especially those near and dear to my heart. My non-profit organization DC Python has been working with the PyLadies to teach &amp;quot;Introduction to Python Classes&amp;quot; in DC. And I'm so grateful, because I want to grow the organization (as big as Mozilla?) and I need all the help I can get. But, I need to make a living too. And this is precisely where, as the old saying goes: &amp;quot;the rubber meets the road&amp;quot;.&lt;/p&gt;
&lt;p&gt;I (like so many others before me and along with me in the Plone, Python, and Mozilla communities) have become an entrepreneur. In addition to thinking about &amp;quot;what consulting projects am I going to work to pay my bills&amp;quot;, I like thinking about &amp;quot;what services can I build to pay my bills&amp;quot;. And I'm so lucky I get the chance to do it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You know what to do or not to do because you have just read this article:&lt;/em&gt; &lt;a class="reference external" href="http://gittip.com/aclark4life"&gt;http://gittip.com/aclark4life&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You may also want to follow me on Twitter:&lt;/em&gt; &lt;a class="reference external" href="http://twitter.com/aclark4life"&gt;http://twitter.com/aclark4life&lt;/a&gt;&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://blogs.hbr.org/ashkenas/2011/02/your-communications-may-not-be.html"&gt;http://blogs.hbr.org/ashkenas/2011/02/your-communications-may-not-be.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Why I Criticize The Plone Foundation Board</title><link href="http://aclark.net/blog/why-i-criticize-the-plone-foundation-board.html" rel="alternate"></link><updated>2012-10-17T20:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-17:why-i-criticize-the-plone-foundation-board.html</id><summary type="html">&lt;img alt="images/aclark-conf.jpg" src="images/aclark-conf.jpg" /&gt;
&lt;p&gt;TL;DR: Because I care.&lt;/p&gt;
&lt;p&gt;As some of you can probably relate to, I've had my fair share of disagreements with the Plone Foundation Board over the years. The good news is, for the most part, it (just like the community) is staffed with &lt;strong&gt;very reasonable people&lt;/strong&gt; who if you push them on an issue, will acknowledge that there are always competing viewpoints to any issue you can think of.&lt;/p&gt;
&lt;div class="section" id="the-fallacy-of-false-cause"&gt;
&lt;h2&gt;The Fallacy Of False Cause&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;I don't like what you have to say, therefore you must be quiet.&lt;/em&gt; &lt;strong&gt;Not necessarily. You may choose not to listen.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As long as you are polite, respectful, and on topic: you can have a civil discussion with almost any human individual or group in today's world. The challenge is in &lt;a class="reference external" href="http://blog.aclark.net/2012/10/17/top-3-favorite-logical-fallacies/"&gt;sticking to those criteria&lt;/a&gt;. Conversations often become heated and stray outside of respectful lines, because we are human.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="issues"&gt;
&lt;h2&gt;Issues&lt;/h2&gt;
&lt;p&gt;From the famous (?) pricing scrap of 2010 (i wanted a more expensive server with VM capability, they didn't) to various financially sensitive issues: i.e. I occasionally want to be financially compensated as a &amp;quot;volunteer&amp;quot;. And while the Board does compensate volunteers in many ways, they frequently don't agree with the ways I've suggested. And who could forget &lt;a class="reference external" href="http://plone.org/2008"&gt;Plone Conference 2008&lt;/a&gt;? This was the first year that the Foundation received a percentage of the ticket sales. Now if I recall correctly there were certainly some heated debates, but none were too taxing or unreasonable (unless you count the ones we collectively had with The Ronald Reagan Building ;-)).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="success"&gt;
&lt;h2&gt;Success&lt;/h2&gt;
&lt;p&gt;Plone's success &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; is my success and vice versa. I do a lot of different things in life, so I'm not going to say that Plone must succeed for me to succeed. But I must succeed, and if I can help Plone succeed too, I'm going to do everything within my power to make it happen. Let me be clear: Plone does not need me to be successful. But if you've seen the &amp;quot;Plone: I wish I could quit you.&amp;quot; T-Shirt by Tarek Ziadé (shown above), you may know why I keep struggling to make Plone as good as it can be, albeit by my excessively high and overly strict (but not unrealistic) standards; which some, I am sure, do not like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope, after reading this, you may have some better idea of who I am and why I do what I do. I've made a commitment in my life to open source software, helping people, and being the best human I can be. I hope you will join me in my quest. If not, at the very least I hope you will respect my right to undertake it. If you have any questions or concerns, please do not hesitate to contact me to express them. Either in the comments below, or here: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's to you, Plone. And to the next 10 years of success.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Success means different things to different people.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Python"></category><category term="Plone"></category></entry><entry><title>Top 3 "favorite" logical fallacies</title><link href="http://aclark.net/blog/top-3-favorite-logical-fallacies.html" rel="alternate"></link><updated>2012-10-17T02:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-17:top-3-favorite-logical-fallacies.html</id><summary type="html">&lt;img alt="images/y-u-no-agree.jpg" src="images/y-u-no-agree.jpg" /&gt;
&lt;p&gt;I love to debate issues. The more complex, the better. I have no formal training in &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Debate"&gt;debate&lt;/a&gt;, but I wish I did. It may have better prepared me to face different personality types with varying degree of communication skill. You don't have to watch the 2012 U.S. Presidential Debates to know that people will say things that are &lt;strong&gt;BATSHIT CRAZY&lt;/strong&gt; to make their point. I've done it myself. That's why we need rules to formalize our discussions, because it's hard to stay on point.&lt;/p&gt;
&lt;div class="section" id="fallacy"&gt;
&lt;h2&gt;Fallacy&lt;/h2&gt;
&lt;p&gt;In the course of debate, you may encounter a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Fallacy"&gt;fallacy&lt;/a&gt; or &amp;quot;faulty reasoning&amp;quot;. Discussion of fallacy is my favorite part of debate. So without further ado, my top 3 &amp;quot;favorite&amp;quot; &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[1]&lt;/a&gt; logical fallacies; of all those I've encountered since I begun to debate in electronic form in the mid-1990s. &lt;em&gt;Disclaimer: I have been on both sides of all three, I'm human. My goal in writing this blog entry is to facilitate better conversations within the communities I care about: Mozilla, Python, and Plone.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="you-will-regret-your-comments"&gt;
&lt;h3&gt;1. &amp;quot;You will regret your comments!&amp;quot;&lt;/h3&gt;
&lt;p&gt;This may be true, but it's probably not the point. And it's probably better to stay on topic then it is to stray into personal attacks, or what you may feel is &amp;quot;helping&amp;quot; &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[2]&lt;/a&gt; the other person.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-are-out-of-line"&gt;
&lt;h3&gt;2. &amp;quot;You are out of line!&amp;quot;&lt;/h3&gt;
&lt;p&gt;This may be true too, but it may take both sides to acknowledge the lines. When discussing a point, even though it's tempting to cry foul, it's probably better to stay on point. Sometimes you need a break, in which case it's OK to say &amp;quot;let's take a break and pick this up again later&amp;quot; &lt;a class="footnote-reference" href="#id8" id="id3"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-are-wrong"&gt;
&lt;h3&gt;3. &amp;quot;You are wrong!&amp;quot;&lt;/h3&gt;
&lt;p&gt;Perhaps. But it is likely that you may never agree with your debate counterparts. It's much better to focus on the core issues, and how you can compromise, then it is to focus attention on what is &amp;quot;right&amp;quot; and &amp;quot;wrong&amp;quot; (and who is right and wrong) &lt;a class="footnote-reference" href="#id9" id="id4"&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;It feels great to get those out. If anyone reading this has formal training in debate, I would love to hear your comments. Either below, or: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Like this blog entry? Consider supporting me on&lt;/em&gt; &lt;a class="reference external" href="http://gittip.com/aclark4life"&gt;gittip&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I say &amp;quot;favorite&amp;quot; because these fallacies have crystallized in my brain over the years to the point where I feel I can categorize and discuss them.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I say &amp;quot;helping&amp;quot; because it's probably hurting the intended recipient (whether it's true or not). Sorry, it's not up to you to decide whether or not someone else will regret their comments.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I am married. And there is no better place in the world, than within the institution of marriage, to learn how to debate. :-)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;There may be no tangible right or wrong, just preference. Discuss your preferences, then what you need from the other side to be happy. Then ask the other side to do the same.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Python"></category><category term="Plone"></category></entry><entry><title>Looking for projects</title><link href="http://aclark.net/blog/looking-for-projects.html" rel="alternate"></link><updated>2012-10-04T10:30:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-04:looking-for-projects.html</id><summary type="html">&lt;img alt="images/use_python.jpg" src="images/use_python.jpg" /&gt;
&lt;p&gt;With &lt;a class="reference external" href="http://blog.aclark.net/2012/09/28/pythonpackages-com-one-year-later/"&gt;pythonpackages.com winding down&lt;/a&gt;, I am now actively seeking projects for Q4 2012 and beyond. I am good at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deploying Plone sites: &lt;a class="reference external" href="http://blog.aclark.net/2012/10/03/plone-4-3-alpha-1-in-production/"&gt;http://blog.aclark.net/2012/10/03/plone-4-3-alpha-1-in-production/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maintaining and releasing Python packages: &lt;a class="reference external" href="http://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=aclark&amp;amp;submit=search"&gt;http://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=aclark&amp;amp;submit=search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cat herding volunteers: &lt;a class="reference external" href="http://lists.plone.org/pipermail/plone-com/Week-of-Mon-20120903/000039.html"&gt;http://lists.plone.org/pipermail/plone-com/Week-of-Mon-20120903/000039.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing documentation: &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/index.html"&gt;http://docs.pythonpackages.com/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing narrative text: &lt;a class="reference external" href="http://www.packtpub.com/plone-33-site-administration/book"&gt;http://www.packtpub.com/plone-33-site-administration/book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing Python code: &lt;a class="reference external" href="https://github.com/aclark4life"&gt;https://github.com/aclark4life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, I've put together a list of projects I am involved in (or have been involved in): &lt;a class="reference external" href="http://resume.aclark.net/projects/"&gt;http://resume.aclark.net/projects/&lt;/a&gt;, and please feel free to check out my résumé: &lt;a class="reference external" href="http://resume.aclark.net/"&gt;http://resume.aclark.net/&lt;/a&gt;. If you'd like to discuss how I can help you or your team, please get in touch: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;.&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category><category term="Mozilla"></category></entry><entry><title>pythonpackages-com one year later</title><link href="http://aclark.net/blog/pythonpackages-com-one-year-later.html" rel="alternate"></link><updated>2012-09-28T10:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-09-28:pythonpackages-com-one-year-later.html</id><summary type="html">&lt;p&gt;We are rolling up on the &lt;strong&gt;one year anniversary&lt;/strong&gt; of pythonpackages.com (in October). This is an exciting milestone (for me at least) because I've had a tremendous amount of fun building the site, not to mention how much I learned about GitHub, PyPI, Pyramid, Stripe, Redis, Bootstrap, and more.&lt;/p&gt;
&lt;p&gt;We are hovering around 200 signups which I'm quite proud of. But in terms of &lt;strong&gt;possible-financial-success&lt;/strong&gt; i.e. the potential of converting some of those sign ups in to actual customers I'd feel better if we were at 2,000 or higher.&lt;/p&gt;
&lt;div class="section" id="what-happened"&gt;
&lt;h2&gt;What happened?&lt;/h2&gt;
&lt;p&gt;As of the launch of the beta site 3 months ago, there are some actually-useful features available:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/introduction.html#introduction"&gt;ability to release a package from GitHub to PyPI&lt;/a&gt; without a terminal (i.e. in the web browser).&lt;/li&gt;
&lt;li&gt;The ability to release a package with &lt;cite&gt;git push&lt;/cite&gt; (by adding the service: &lt;a class="reference external" href="https://github.com/github/github-services/blob/master/services/pythonpackages.rb"&gt;https://github.com/github/github-services/blob/master/services/pythonpackages.rb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The ability to &amp;quot;manage packages&amp;quot; (see image below)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/manage-packages.png" src="images/manage-packages.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ability to &amp;quot;manage organizations&amp;quot; (see image below)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/manage-organizations.png" src="images/manage-organizations.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/create-package.html#create-packages"&gt;ability to create packages through the web&lt;/a&gt; (i.e. from the web browser to GitHub, whereas normally you'd run PasteScript in your Terminal).&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/create-new-package.png" src="images/create-new-package.png" /&gt;
&lt;p&gt;And a few more logistical features that are cool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ability to pay with a credit card (via Stripe)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/pay-with-stripe.png" src="images/pay-with-stripe.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ability to oauth against PyPI:&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/pypi-oauth.png" src="images/pypi-oauth.png" /&gt;
&lt;p&gt;Still, we have only scratched the surface of what could potentially be provided to the Python community. Future plans include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ability to easily &lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issue/28/build-windows-installers"&gt;build Windows installers&lt;/a&gt; for your Python software.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issue/27/support-bitbucket-and-other-dvcs-services"&gt;Support for other services&lt;/a&gt; e.g. bitbucket.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issue/29/add-git-branch-support"&gt;Support git branches&lt;/a&gt; i.e. for releasing from a branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, this is a great start to building &amp;quot;github style&amp;quot; automation for Python packaging but there is much more work to be done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-now"&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;I am in the process of winding down the 3 month &amp;quot;beta 1&amp;quot; period. The &amp;quot;beta 2&amp;quot; period (from now until the end of the year) will likely include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adding MailChimp integration to make it easier to email subscribers.&lt;/li&gt;
&lt;li&gt;Turn off SSL to save $20/month.&lt;/li&gt;
&lt;li&gt;Write tests and open source the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-can-you-do-to-help"&gt;
&lt;h2&gt;What can you do to help?&lt;/h2&gt;
&lt;p&gt;If you believe in the ideas behind pythonpackages.com (primarily: eliminating the need to think about packaging at all; e.g. through task automation, and process improvement behind the scenes; i.e. supporting new technology like distutils2/packaging, wheel, et al.; in order to present a seemless packaging story to developer-consumers.) then the best thing you can do is to purchase a paid plan:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pythonpackages.com/plans"&gt;http://pythonpackages.com/plans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second best thing you can do is support me on gittip:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gittip.com/aclark4life"&gt;https://gittip.com/aclark4life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These funds will go towards covering hosting costs until such time as the service can pay for itself. I am also asking folks who appreciate my open source work in general to consider a gittip donation. If you cannot help financially, you can still use the free plan to release packages! Please try it out and &lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new"&gt;give feedback&lt;/a&gt;. (The paid plans get you access to more package slots, so you don't have to swap out the free slot, and organizations, so you can release packages from organization repos).&lt;/p&gt;
&lt;p&gt;Thanks for considering!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Sorry for the blog spam</title><link href="http://aclark.net/blog/sorry-for-the-blog-spam.html" rel="alternate"></link><updated>2012-09-22T21:45:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-09-22:sorry-for-the-blog-spam.html</id><summary type="html">&lt;p&gt;As I'm just learning &lt;a class="reference external" href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;, &lt;a class="reference external" href="http://blog.aclark.net/2012/09/21/yes-this-blog-is-now-powered-by-pelican/#comment-658707601"&gt;Dirkjan Ochtman pointed out&lt;/a&gt; that I can have &amp;quot;fancy&amp;quot; URLs via the &lt;cite&gt;ARTICLE_PERMALINK_STRUCTURE&lt;/cite&gt; setting. So the blog spam you are seeing is a result of my publishing the same two articles with two different URLs (fancy and non-fancy). My apologies for the noise.&lt;/p&gt;
&lt;div class="section" id="publishconf-py"&gt;
&lt;h2&gt;publishconf.py&lt;/h2&gt;
&lt;p&gt;And actually, I found &lt;cite&gt;ARTICLE_URL&lt;/cite&gt; and &lt;cite&gt;ARTICLE_SAVE_AS&lt;/cite&gt; to be the settings I wanted to use instead &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt;. My &lt;a class="reference external" href="https://github.com/ACLARKNET/aclarknet.github.com/blob/master/publishconf.py"&gt;publishconf.py&lt;/a&gt; now looks like this &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ARTICLE_SAVE_AS = '/{date:%Y}/{date:%m}/{date:%d}/{slug}/index.html'
ARTICLE_URL = '/{date:%Y}/{date:%m}/{date:%d}/{slug}/'
AUTHOR = u'Alex Clark'
CATEGORY_FEED_ATOM = None
CATEGORY_FEED_RSS = None
DEFAULT_CATEGORY = 'Blog'
DEFAULT_LANG = 'en'
DEFAULT_PAGINATION = 10
DELETE_OUTPUT_DIRECTORY = True
DISQUS_SITENAME = 'aclark-blog'
GITHUB_URL = 'https://github.com/ACLARKNET/aclarknet.github.com'
GOOGLE_ANALYTICS = 'UA-34988446-1'
SITENAME = u'Alex Clark'
SITEURL = 'http://blog.aclark.net'
SOCIAL = (
    ('GitHub', 'http://github.com/aclark4life'),
    ('Gittip', 'https://www.gittip.com/aclark4life'),
    ('PythonPackages', 'https://pythonpackages.com/user/aclark4life'),
    ('Twitter', 'http://twitter.com/aclark4life'),
    ('atom feed (Mozilla)', 'http://blog.aclark.net/Mozilla.atom.xml'),
    ('atom feed (Plone)', 'http://blog.aclark.net/Plone.atom.xml'),
    ('atom feed (Python)', 'http://blog.aclark.net/Python.atom.xml'),
)
TAG_FEED_ATOM = 'feeds/%s.atom.xml'
TAG_FEED_RSS = None
TWITTER_USERNAME = 'aclark4life'
&lt;/pre&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pelican.notmyidea.org/en/3.0/settings.html#url-settings"&gt;http://pelican.notmyidea.org/en/3.0/settings.html#url-settings&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I removed the extraneous pelicanconf.py and put everything in one file&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Gittip is the future</title><link href="http://aclark.net/blog/gittip-is-the-future.html" rel="alternate"></link><updated>2012-09-21T21:45:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-09-21:gittip-is-the-future.html</id><summary type="html">&lt;p&gt;Heard of Gittip? If not, you should know: it has a lot of people (including me) excited about the potential to make a living doing what they love. From the Gittip blog &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Gittip is a system for funding people who build free culture. The core is small weekly gifts. The idea is that if 1,000 people give $1 a week to a great programmer, musician, scientist, teacher, etc., then that frees them up to pursue their vision even further for making the world better.&lt;/blockquote&gt;
&lt;p&gt;I love this idea! In particular, because it speaks to me more than other similar offerings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chipin&lt;/li&gt;
&lt;li&gt;Flattr&lt;/li&gt;
&lt;li&gt;Kickstarter&lt;/li&gt;
&lt;li&gt;Paypal&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why? If for no other reason, because it comes from a member of the Python community: Chad Whitacre of &lt;a class="reference external" href="http://aspen.io"&gt;http://aspen.io&lt;/a&gt; fame. And the Python community has become near and dear to me, second only to my-one-true-open-source-love: Plone. So I want to see open source developers, particularly Python developers, succeed.&lt;/p&gt;
&lt;img alt="images/gittip.png" src="images/gittip.png" /&gt;
&lt;p&gt;And succeed they will, with gittip. Some particularly impressive results so far:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chad Whitacre, the founder, is making almost $160 per week: &lt;a class="reference external" href="https://www.gittip.com/whit537/"&gt;https://www.gittip.com/whit537/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;David Glick, a newly independent Plone developer, is making over $100 per week: &lt;a class="reference external" href="https://www.gittip.com/davisagli/"&gt;https://www.gittip.com/davisagli/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read The Docs, everyone's favorite documentation hosting site, is making almost $100 per week: &lt;a class="reference external" href="https://www.gittip.com/readthedocs/"&gt;https://www.gittip.com/readthedocs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whilst no one is making a living off of gittip yet, with enough support and momentum it's only a matter of time before they do. Toward that end, I have written a blog entry for the &lt;a class="reference external" href="http://blog.gittip.com"&gt;gittip blog&lt;/a&gt; describing among other things: how I'd like to make a living with gittip. Here is an excerpt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Chad’s vision for Gittip really speaks to me. All over the world there are thousands of open source developers writing code, managing projects, and moving the world of open source technology forward. This helps millions of individuals, companies and the entire world with a variety of its endeavours.&lt;/p&gt;
&lt;p&gt;What if those folks could easily show their appreciation to individuals known to make open source happen? What if these volunteer developers didn’t need to go get “day jobs” to make a living because the world has taken care of them? What if companies didn’t need to hire employees in the traditional sense because their needs have already been met by open source?&lt;/p&gt;
&lt;p&gt;There is a lot to think about and strive for here, and I’m really excited to help Chad with his mission. On a daily basis I’m involved with, and influential to the following open source projects: Plone (Python-based CMS), Pillow (Python Imaging Library fork), Buildout (Python-based build system), and more. I hope Gittip can help me help you, the open source community and the world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can read the rest of the article here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.gittip.com/post/31960853095/back-the-stack-pythonpackages-com"&gt;http://blog.gittip.com/post/31960853095/back-the-stack-pythonpackages-com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you'd like to help me, I'm attempting to cover the hosting costs for my startup business: &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;, so I can keep developing it for another year. I truly believe in my vision of a &amp;quot;hosted packaging service&amp;quot;, and I really want to help the Python community fix its packaging story in any way that I can. If in no other way, than by making it so you don't have to think about Python packaging at all (i.e. I'll worry about the various complexities, so you don't have to). You can find me on gittip here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.gittip.com/aclark4life/"&gt;https://www.gittip.com/aclark4life/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, go be generous and help build the commons!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://blog.gittip.com/post/30116848405/with-payouts-gittip-is-minimally-viable"&gt;http://blog.gittip.com/post/30116848405/with-payouts-gittip-is-minimally-viable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Yes, this blog is now powered by Pelican</title><link href="http://aclark.net/blog/yes-this-blog-is-now-powered-by-pelican.html" rel="alternate"></link><updated>2012-09-21T15:30:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-09-21:yes-this-blog-is-now-powered-by-pelican.html</id><summary type="html">&lt;p&gt;As an open source &amp;quot;Plone guy&amp;quot;, I'm always prepared to defend and explain my choice to &lt;strong&gt;not&lt;/strong&gt; use Plone for blogging. A couple years ago, I started using Wordpress in order to learn its feature set. I enjoyed my time with it, but after moving to wordpress.com for &amp;quot;trouble free&amp;quot; hosting, I found I couldn't control my category feeds the way I wanted; the honeymoon was over.&lt;/p&gt;
&lt;p&gt;This was a giant let down, because I was hoping to avoid putting any time in to my blogging infrastructure. For weeks I did nothing. I poked at various options: Pelican, Plone, Tumblr, others. Eventually, I found my way back to Pelican and now I'm happy again.&lt;/p&gt;
&lt;img alt="images/pelican.png" src="images/pelican.png" /&gt;
&lt;p&gt;Pelican is a static blog generator, as you may have heard. So &lt;strong&gt;one big advantage&lt;/strong&gt; is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You can host it for free, or close to free on any number of free or cheap static website hosting services! (I'm using GitHub Pages)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="other-advantages"&gt;
&lt;h2&gt;Other advantages&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It does feeds right (I need 3 &amp;quot;full body&amp;quot; feeds for: Mozilla, Plone, Python) &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It's fun to configure (edit pelicanconf.py or publishconf.py).&lt;/li&gt;
&lt;li&gt;The &amp;quot;cool kids&amp;quot; use it: e.g. Tarek Ziadé, Kenneth Reitz, Daniel Greenfeld, many others.&lt;/li&gt;
&lt;li&gt;It grows with you: this is huge. You can start using it and feel comfortable right away, but there is always more to learn. This is how all software should be. Unfortunately, it's tough to get it right (I think this is formally called UX).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="some-disadvantages"&gt;
&lt;h2&gt;Some disadvantages&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't like typing in the terminal? Pelican is not for you.&lt;/li&gt;
&lt;li&gt;No &amp;quot;nested&amp;quot; entries e.g. 2012/09/21/entry.html. I don't know if there is a formal name for this feature, but I miss it (if for no other reason than &amp;quot;cool URLS never change&amp;quot; i.e. I've broken links with this move.)&lt;/li&gt;
&lt;li&gt;The pelican-import has some bugs, so I'm doing a lot of manual cleanup (I don't mind this though.)&lt;/li&gt;
&lt;li&gt;Tags are categories and categories are tags (or something). I had to convert all my categories to tags, and then turn on tag feeds and turn off category feeds. Category feeds are on by default and tag feeds are off by default. Also ATOM is on and RSS is off, if that is of interest to you. (Since this is really just configuration change and not a disadvantage per sé, it probably belongs more in the next section where I discuss my setup.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are curious about my setup, here are the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Getting started with Pelican was easy, basically:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ virtualenv .
$ bin/pip install pelican BeautifulSoup Markdown
$ bin/pelican-quickstart
&lt;/pre&gt;
&lt;p&gt;At this point, after I answer the quickstart questions I:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ source bin/activate
$ make html
&lt;/pre&gt;
&lt;p&gt;Now the content is ready to host (which for me just involves a git push).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tweaks"&gt;
&lt;h2&gt;Tweaks&lt;/h2&gt;
&lt;p&gt;A few things were tricky.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I wanted to host my articles at the top level of the repo for serving on GitHub Pages, so I modified the Makefile to make it so &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Categories control what links are available in the header, so I disabled them all but one called &amp;quot;Blog&amp;quot;. Not ideal, but it works.&lt;/li&gt;
&lt;li&gt;The &amp;quot;social&amp;quot; links, and my disqus and analytics API keys were all a pleasure to configure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;Now I write articles in restructured text in the &lt;cite&gt;content/&lt;/cite&gt; directory and publish them like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ make publish; git commit -a -m &amp;quot;Publish&amp;quot;; git push
&lt;/pre&gt;
&lt;p&gt;All the details are here if you'd like to take a look:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclarknet.github.com/commits/master"&gt;https://github.com/ACLARKNET/aclarknet.github.com/commits/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comments from more knowledgable Pelican users welcome. Like this article? Tip me on Gittip!&lt;/p&gt;
&lt;iframe style="border: 0; margin: 0; padding: 0;"
    src="https://www.gittip.com/aclark4life/widget.html"
    width="48pt" height="20pt"&gt;&lt;/iframe&gt;&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is actually my first &amp;quot;test&amp;quot; post with Pelican so I will get a chance to see how the feeds perform. But they looked good in testing.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I think I broke &amp;quot;make html&amp;quot;, actually. Primarily I just needed to make it not &amp;quot;clean&amp;quot; the entire repo.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Bootstrapping a Buildout 1-6 release</title><link href="http://aclark.net/blog/bootstrapping-a-buildout-1-6-release.html" rel="alternate"></link><updated>2012-08-13T21:10:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-13:bootstrapping-a-buildout-1-6-release.html</id><summary type="html">&lt;p&gt;A lot of work has been done on Buildout lately, most notably:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Jim Fulton is &lt;a class="reference external" href="https://github.com/buildout/buildout/commits/master"&gt;working on Buildout 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ross Patterson has greatly &lt;a class="reference external" href="http://rpatterson.net/blog/buildout-performance-improvements"&gt;improved Buildout performance&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Domen Kožar has &lt;a class="reference external" href="http://zope3.pov.lt/trac/changeset/127507"&gt;provided a patch&lt;/a&gt; that takes a conservative
approach to Ross's performance improvements.&lt;/li&gt;
&lt;li&gt;I have offered to do a release.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And there are a &lt;a class="reference external" href="http://mail.python.org/pipermail/distutils-sig/2012-July/018779.html"&gt;handful of other changes&lt;/a&gt; in &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/zc.buildout/trunk/CHANGES.txt?rev=127507#L4"&gt;trunk on svn.zope.org&lt;/a&gt;,
of which my favorite is:&lt;/p&gt;
&lt;blockquote&gt;
The buildout init command now accepts distribution requirements and
paths to set up a custom interpreter part that has the distributions
or parts in the path. For example:: $ python bootstrap.py init
BeautifulSoup&lt;/blockquote&gt;
&lt;p&gt;So with that, I am &lt;strong&gt;planning to do a zc.buildout 1.6 release within 24
hours&lt;/strong&gt; or so of now. Please add a comment or weigh in on
&lt;a class="reference external" href="http://mail.python.org/mailman/listinfo/distutils-sig"&gt;distutils-sig&lt;/a&gt; if you object. We have run the tests on Windows, and
discovered only pre-existing failures. We are also preparing to do
&amp;quot;Buildout 2 prophylactic releases&amp;quot; (i.e. releases that make 1.x continue
to work when 2.x is released) in the 1.6.x series.&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>pythonpackages.com: pyformance 0.2</title><link href="http://aclark.net/blog/pythonpackagescom-pyformance-02.html" rel="alternate"></link><updated>2012-08-13T13:15:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-13:pythonpackagescom-pyformance-02.html</id><summary type="html">&lt;p&gt;&lt;em&gt;pythonpackages.com helps Python programmers package and release their
software with just a few clicks.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="pyformance-0-2"&gt;
&lt;h2&gt;pyformance 0.2&lt;/h2&gt;
&lt;p&gt;pythonpackages.com recently processed it's first official release via the &lt;a class="reference external" href="http://blog.aclark.net/pythonpackagescom-new-github-service-quotgit-push-to-releasequot.html"&gt;new GitHub Service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As such, we are celebrating the release of &lt;a class="reference external" href="https://github.com/omergertel/pyformance"&gt;pyformance&lt;/a&gt; 0.2! According to the author &lt;a class="reference external" href="https://twitter.com/omergertel"&gt;Omer Gertel&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
It's a straight forward port of Coda Hale's fantastic metrics
package (originally for java). I don't have all of it ported yet,
and it's not tested as much as it should be, but it's a good start.

(BTW, if you do blog about PyFormance, you may also want to mention
this&amp;nbsp;talk by Coda Hale about metrics: http://www.youtube.com/watch?v=czes-oa0yik
He explains some of the math behind the package.)
&lt;/pre&gt;
&lt;p&gt;Done! :-) Thanks Omer for using our service. Check out pyformance on GitHub:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/omergertel/pyformance"&gt;https://github.com/omergertel/pyformance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the &lt;a class="reference external" href="http://www.youtube.com/watch?v=czes-oa0yik"&gt;talk by Coda Hale&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>pythonpackages.com: New GitHub Service "push to release"</title><link href="http://aclark.net/blog/pythonpackagescom-new-github-service-push-to-release.html" rel="alternate"></link><updated>2012-08-10T05:50:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-10:pythonpackagescom-new-github-service-push-to-release.html</id><summary type="html">&lt;p&gt;&lt;em&gt;pythonpackages.com helps Python programmers package and release their
software with just a few clicks.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="pythonpackages-github-service"&gt;
&lt;h2&gt;PythonPackages GitHub Service&lt;/h2&gt;
&lt;p&gt;There is a new &lt;a class="reference external" href="https://github.com/github/github-services"&gt;GitHub Service&lt;/a&gt; available for pythonpackages.com that&amp;nbsp;allows you to release Python packages from GitHub to the Python Package Index, simply by pushing a commit message that begins with &amp;quot;Release&amp;quot; e.g.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git commit -a -m &amp;quot;Release 1.0&amp;quot;; git push
&lt;/pre&gt;
&lt;p&gt;(The release creates a tag with the appropriate version number, extracted from setup.py) To use the service, please follow the instructions below.&lt;/p&gt;
&lt;div class="section" id="instructions"&gt;
&lt;h3&gt;Instructions&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sign up for the pythonpackages.com beta: &lt;a class="reference external" href="http://pythonpackages.com/signup"&gt;http://pythonpackages.com/signup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Follow the &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/introduction.html"&gt;Introduction&lt;/a&gt; instructions.&lt;/li&gt;
&lt;li&gt;On the Python Package Index, authorize pythonpackages.com to act on your behalf, as explained here:&amp;nbsp;&lt;a class="reference external" href="http://blog.aclark.net/pythonpackagescom-using-pypi039s-oauth1-support-to-register-and-upload-packages.html"&gt;http://blog.aclark.net/pythonpackagescom-using-pypi039s-oauth1-support-to-register-and-upload-packages.html&lt;/a&gt; (&lt;strong&gt;pythonpackages.com -&amp;gt; Dashboard -&amp;gt; Manage accounts -&amp;gt; PyPI -&amp;gt; Authorize&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;On GitHub, configure the PythonPackages service to be Active on any repository that contains a Python package you want to release (&lt;strong&gt;Repo -&amp;gt; Admin -&amp;gt; Service Hooks -&amp;gt; PythonPackages -&amp;gt; [*] Active&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can git push to release! If you have any trouble, please &lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new"&gt;open a ticket&lt;/a&gt;. These instructions will live permanently here:&amp;nbsp;&lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/github-service.html"&gt;http://docs.pythonpackages.com/en/latest/github-service.html&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>pythonpackages.com: Using PyPI&amp;#039;s OAuth1 support to register and upload packages</title><link href="http://aclark.net/blog/pythonpackagescom-using-pypi039s-oauth1-support-to-register-and-upload-packages.html" rel="alternate"></link><updated>2012-08-07T05:16:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-07:pythonpackagescom-using-pypi039s-oauth1-support-to-register-and-upload-packages.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;*TL;DR&lt;/strong&gt; PyPI has OAuth1 support; pythonpackages.com uses it to send your GitHub repos to PyPI.* Thanks in very large part to &lt;a class="reference external" href="https://twitter.com/r1chardj0n3s"&gt;Richard Jones&lt;/a&gt;, the Python Package Index now has support for registering and uploading packages via OAuth1. And using his &lt;a class="reference external" href="https://gist.github.com/0d46c48b230e61e18479"&gt;sample code&lt;/a&gt; I was able to take advantage of it on pythonpackages.com. The result is a fairly &lt;strong&gt;elegant approach to releasing packages&lt;/strong&gt; sans dirty hacks (I had been asking users for their username and password, then storing them in an encrypted session cookies so I could send them to PyPI.) Here's how it works now.&lt;/p&gt;
&lt;div class="section" id="sign-in-with-github"&gt;
&lt;h2&gt;Sign In With GitHub&lt;/h2&gt;
&lt;p&gt;GitHub provides an easy way to let folks sign in to pythonpackages.com with their APIv3. I was able to code the OAuth dance using only the requests library (HT Kenneth Reitz). This was working as of late 2011.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="select-a-package"&gt;
&lt;h2&gt;Select a package&lt;/h2&gt;
&lt;p&gt;Once you are signed in, you can select a package. Selected packages can perform various actions, one of which is &lt;strong&gt;Tag and Release&lt;/strong&gt;.  As soon as you select Tag and Release, you are required to authenticate with PyPI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strikeout-enter-your-pypi-credentials"&gt;
&lt;h2&gt;[STRIKEOUT:Enter your PyPI credentials]&lt;/h2&gt;
&lt;p&gt;In order to get the beta out the door, a dirty hack was added to allow users to enter their PyPI credentials. Credentials were saved in an encrypted session cookie, then written out to .pypirc before calling `python setup.py upload`. Really terrible. This was shipped in early July 2012 and is thankfully no longer necessary (though it is &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/security.html#github-credentials"&gt;still necessary to push the initial commit to GitHub.&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="authorize-pythonpackages-com"&gt;
&lt;h2&gt;Authorize pythonpackages.com&lt;/h2&gt;
&lt;p&gt;Now authorization can happen elegantly via OAuth1. First, sign in to PyPI. Then authorize pythonpackages.com to act on your behalf. Lastly, profit (register and upload your package).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="register-and-upload-your-package"&gt;
&lt;h2&gt;Register and upload your package&lt;/h2&gt;
&lt;p&gt;At this point you are free to tag and release. I am really excited about this. I began fantasizing about it almost a year ago and after several false starts (pypissh, openid, avoidance) it is now a reality. If you have a minute, please &lt;a class="reference external" href="https://pythonpackages.com/signup"&gt;give it a try&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Building Windows Installers In The Cloud</title><link href="http://aclark.net/blog/building-windows-installers-in-the-cloud.html" rel="alternate"></link><updated>2012-08-01T22:19:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-01:building-windows-installers-in-the-cloud.html</id><summary type="html">&lt;p&gt;With pythonpackages.com, I want to solve real problems for people today. So here's a proof of concept for building Windows installers quickly and easily &amp;quot;in the cloud&amp;quot; (i.e. without a Windows machine local). This article is mostly about the back end, as the front end is &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/introduction.html"&gt;already documented&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TL;DR: We're moving from proof-of-concept phase to useful-service phase. If you find the demo interesting and want to help build something great, please consider purchasing one of&lt;/em&gt; &lt;a class="reference external" href="http://pythonpackages.com/plans"&gt;our current plans&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="step-1-to-the-clouds"&gt;
&lt;h2&gt;Step 1: To The Clouds&lt;/h2&gt;
&lt;p&gt;For the purpose of the demo, I booted up a Windows server on Rackspace Cloud and started installing things. On the short list of things to install was:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.7 from python.org.&lt;/li&gt;
&lt;li&gt;GitHub for Windows from github.com (mainly for git.)&lt;/li&gt;
&lt;li&gt;pythonpackages.com from bitbucket.org (free private repos!)&lt;/li&gt;
&lt;li&gt;Microsoft compiler (free version, make sure to use the same one used to compile Python.)&lt;/li&gt;
&lt;li&gt;Redis for Windows (Hell froze over, you can find this in Microsoft's GitHub account: &lt;a class="reference external" href="https://github.com/MSOpenTech/Redis"&gt;https://github.com/MSOpenTech/Redis&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;Vim.exe (which I copy to vi.exe because I hate typing vim.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once I had all these things in place, I was able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install pythonpackages.com (pip install -r requirements.txt.)&lt;/li&gt;
&lt;li&gt;Compile and run Redis (Several projects bundled together in Visual
Studio is apparently called a &amp;quot;solution&amp;quot;, how quaint!)&lt;/li&gt;
&lt;li&gt;Start the site.&lt;/li&gt;
&lt;li&gt;Start testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-fix-all-the-bugs"&gt;
&lt;h2&gt;Step 2: Fix all the bugs&lt;/h2&gt;
&lt;p&gt;This step involved a lot of cursing:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Backslashes.&lt;/li&gt;
&lt;li&gt;Lack of vi key bindings.&lt;/li&gt;
&lt;li&gt;Other Windows-isms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I also praised my &lt;a class="reference external" href="http://cord.sourceforge.net/"&gt;CoRD Remote Desktop Client&lt;/a&gt; because it worked awesome. Anyway, the bugs/issues I fixed (and didn't fix) were roughly:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create new application on GitHub and configured keys accordingly.&lt;/li&gt;
&lt;li&gt;Switch Stripe keys to testing.&lt;/li&gt;
&lt;li&gt;Fix Python paths and other trivial changes, so the application can run `python setup.py bdist_wininst`.&lt;/li&gt;
&lt;li&gt;JavaScript is completely broken for some reason I've yet to determine (haven't looked yet, but guessing Windows path related).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-profit"&gt;
&lt;h2&gt;Step 3: Profit!&lt;/h2&gt;
&lt;p&gt;I have to admit: I was giddy when it started working, and I was able to create a Windows Installer for Pillow (Python Imaging Library fork). I was even happier when I ran the installer and it worked. That's it. Next I hope to &lt;a class="reference external" href="http://pythonpackages.com/plans"&gt;get some customers&lt;/a&gt; so I can keep the Windows box running, and make it available to the public.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="big-picture"&gt;
&lt;h2&gt;Big Picture&lt;/h2&gt;
&lt;p&gt;In case you are interested, the &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/roadmap.html"&gt;roadmap for beta Q3 is here&lt;/a&gt;. I will also mention that I recently used &lt;a class="reference external" href="http://dia-installer.de/"&gt;Dia&lt;/a&gt; (&amp;lt;3) to create this info-graphic, in hopes of better communicating what I'm trying to build. Check it out!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Pillow moved to python-imaging organization</title><link href="http://aclark.net/blog/pillow-moved-to-python-imaging-organization.html" rel="alternate"></link><updated>2012-07-25T02:19:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-07-25:pillow-moved-to-python-imaging-organization.html</id><summary type="html">&lt;p&gt;On 7/30/2010 Pillow, the &amp;quot;friendly&amp;quot; PIL fork, was released. Since then,
there have been a number of releases:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vanity Pillow
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.0.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-07-31&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 800
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-08-01&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 652
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-08-02&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,987
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 589
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 587
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 876
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.6.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-01&amp;nbsp;&amp;nbsp;&amp;nbsp; 6,706
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.0.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-05-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 678
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-05-31&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 663
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-02&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,460
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 569
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,156
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-07&amp;nbsp;&amp;nbsp; 17,429
Pillow-1.7.5-py2.7-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 917
Pillow-1.7.5-py2.6-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 918
Pillow-1.7.5-py2.5-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 516
Pillow-1.7.5-py2.4-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 477
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.6.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 7,401
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp; 10,540
Pillow-1.7.6-py2.7-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 632
Pillow-1.7.6-py2.6-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 439
Pillow-1.7.6-py2.5-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 332
Pillow-1.7.6-py2.4-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 336
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.7.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-04-05&amp;nbsp;&amp;nbsp; 28,704
Pillow-1.7.7-py2.7-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 716
Pillow-1.7.7-py2.6-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 354
Pillow-1.7.7-py2.5-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 198
Pillow-1.7.7-py2.4-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 201
----------------------------------------------------
Pillow has been downloaded 91,833 times!
&lt;/pre&gt;
&lt;p&gt;Originally, I thought if the fork went nowhere, at least the Plone
community could maintain it for its own needs. However since then, a
number of folks outside the Plone community have taken an interest, so
I've decided to move the repository from the &lt;a class="reference external" href="http://github.com/collective"&gt;Plone collective&lt;/a&gt; to a
new organization called &lt;a class="reference external" href="http://github.com/python-imaging"&gt;python-imaging&lt;/a&gt;. With this change, I hope to
gather folks to help develop a Python 3-compat release before PyCon
2013. (There are various PIL forks with Python 3-compat already in
existence, as well as the official PIL 1.2-dev tarball available from
bitbucket, which has some Python 3-compat if I understand correctly.)
The new home for Pillow is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python-imaging/Pillow"&gt;https://github.com/python-imaging/Pillow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>The Plones Templer</title><link href="http://aclark.net/blog/the-plones-templer.html" rel="alternate"></link><updated>2012-07-12T20:48:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-07-12:the-plones-templer.html</id><summary type="html">&lt;p&gt;(c.f. Knights Templar) I think we have a situation that could use the
help of the Plone and Python communities at large. It goes something
like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;About 6 years ago, &lt;a class="reference external" href="http://danielnouri.org/blog/devel/zope/quickstart-with-pastescript.html"&gt;Daniel Nouri started the ZopeSkel project&lt;/a&gt; to
provide a Zope project template to &lt;a class="reference external" href="http://pypi.python.org/pypi/PasteScript/1.7.5"&gt;PasteScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sometime between then and now, the Plone community latched on to the
ZopeSkel project to include templates for its projects.&lt;/li&gt;
&lt;li&gt;About 3 years ago, as part of the ZopeSkel project, &lt;a class="reference external" href="http://www.coactivate.org/projects/zopeskel-bbq-sprint/project-home"&gt;some folks at
the BBQ&lt;/a&gt; sprint built a more user friendly UI on top of PasteScript.
And some refactoring of the project was planned or occurred, during
which time the entire project was renamed to &amp;quot;Templer&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At present, if you install the latest ZopeSkel (3.0b3) you get:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/paster create --list-templates
Available templates:
&amp;nbsp; archetype:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A Plone project that uses Archetypes content types
&amp;nbsp; basic_buildout:&amp;nbsp;&amp;nbsp;&amp;nbsp; A basic buildout skeleton
&amp;nbsp; basic_namespace:&amp;nbsp;&amp;nbsp; A basic Python project with a namespace package
&amp;nbsp; basic_package:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A basic setuptools-enabled package
&amp;nbsp; nested_namespace:&amp;nbsp; A basic Python project with a nested namespace (2 dots in name)
&amp;nbsp; paste_deploy:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A web application deployed through paste.deploy
&amp;nbsp; plone_basic:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A package for Plone add-ons
&amp;nbsp; plone_nested:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A package for Plone add-ons with a nested namespace
&amp;nbsp; recipe:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A recipe project for zc.buildout
&amp;nbsp; zope2_basic:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A Zope project
&amp;nbsp; zope2_nested:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A nested-namespace Zope package
&lt;/pre&gt;
&lt;p&gt;Looks nice, but some templates are missing. If you install the previous
stable version (2.21.2), you get this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/paster create --list-templates
Available templates:
&amp;nbsp; archetype:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A Plone project that uses Archetypes content types
&amp;nbsp; basic_namespace:&amp;nbsp;&amp;nbsp;&amp;nbsp; A basic Python project with a namespace package
&amp;nbsp; basic_package:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A basic setuptools-enabled package
&amp;nbsp; basic_zope:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A Zope project
&amp;nbsp; kss_plugin:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A project for a KSS plugin
&amp;nbsp; nested_namespace:&amp;nbsp;&amp;nbsp; A basic Python project with a nested namespace (2 dots in name)
&amp;nbsp; paste_deploy:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A web application deployed through paste.deploy
&amp;nbsp; plone:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A project for Plone add-ons
&amp;nbsp; plone2.5_buildout:&amp;nbsp; A buildout for Plone 2.5 projects
&amp;nbsp; plone2.5_theme:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A theme for Plone 2.5
&amp;nbsp; plone2_theme:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A theme for Plone 2.1
&amp;nbsp; plone3_buildout:&amp;nbsp;&amp;nbsp;&amp;nbsp; A buildout for Plone 3 installation
&amp;nbsp; plone3_portlet:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A Plone 3 portlet
&amp;nbsp; plone3_theme:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A theme for Plone 3
&amp;nbsp; plone4_buildout:&amp;nbsp;&amp;nbsp;&amp;nbsp; A buildout for Plone 4 developer installation
&amp;nbsp; plone_app:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A project for Plone add-ons with a nested namespace (2 dots in name)
&amp;nbsp; plone_hosting:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Plone hosting: buildout with ZEO and Plone versions below 3.2
&amp;nbsp; plone_pas:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A project for a Plone PAS plugin
&amp;nbsp; recipe:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A recipe project for zc.buildout
&amp;nbsp; silva_buildout:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A buildout for Silva projects
&lt;/pre&gt;
&lt;p&gt;Looks a lot better. Additionally, with the previous release (2.21.2) you
can install zopeskel.dexterity, and &amp;quot;dexterity&amp;quot; will show up in the list
of available templates (but not so with 3.0b3). So what's left to finish
the move from ZopeSkel to Templer? I'm told by Chris Ewing (the current
project lead) that it's mostly a matter of missing imports in various
Python packages that provide templates to PasteScript. Let's. Finish.
This. This frustrates me because Paster is a nice system (that provides
pluggable commands, and code gen from templates). And ZopeSkel was a
nice system (that provided additional templates and a friendly UI). And
Templer will be a great system, but it's not there yet. So we need to
help Chris et. al. get it there ASAP. In addition to the code
refactoring, they have produced some &lt;a class="reference external" href="http://templer-manual.readthedocs.org/en/latest/index.html"&gt;nice documentation available on
readthedocs.org&lt;/a&gt;. If you are interested in helping, please gather
around the #plone on irc.freenode.net to discuss options (I am aclark on
IRC).&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>pythonpackages.com beta launch</title><link href="http://aclark.net/blog/pythonpackagescom-beta-launch.html" rel="alternate"></link><updated>2012-07-04T05:19:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-07-04:pythonpackagescom-beta-launch.html</id><summary type="html">&lt;p&gt;After 9 months of development, pythonpackages.com has grand-ceremoniously flipped the switch from alpha to beta. Here is an overview of the beta release features.&lt;/p&gt;
&lt;div class="section" id="killer-github-integration"&gt;
&lt;h2&gt;&lt;strong&gt;Killer GitHub integration&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The workflow you may now enjoy is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Login with your GitHub account&lt;/li&gt;
&lt;li&gt;Select a repository that contains a Python package&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="one-click-release"&gt;
&lt;h2&gt;One-click release&lt;/h2&gt;
&lt;p&gt;More sweet workflow:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Click a button to release to a test index, PyPI&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="create-packages-through-the-web-with-pastescript"&gt;
&lt;h2&gt;Create packages through-the-web (with PasteScript)&lt;/h2&gt;
&lt;p&gt;There's a lot of room for growth, but this feature is exciting even in its simplest form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dashboard-o-releases"&gt;
&lt;h2&gt;Dashboard o releases&lt;/h2&gt;
&lt;p&gt;pythonpackages.com keeps track of your releases, using the same technology that powers the alpha release &amp;quot;package featuring&amp;quot; feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github-organization-support"&gt;
&lt;h2&gt;GitHub Organization support&lt;/h2&gt;
&lt;p&gt;But wait, there's more. Paid plans (which have not been deployed yet) get access to GitHub organizations, whose repositories can then be &amp;quot;slotted&amp;quot; like normal. If you'd like to get started using the site, check out the &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/crashcourse.html"&gt;crash course&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Zope2 Bootstrap</title><link href="http://aclark.net/blog/zope2-bootstrap.html" rel="alternate"></link><updated>2012-06-12T10:27:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-06-12:zope2-bootstrap.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Bootstrap all the things, including Zope2.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/zope2_bootstrap"&gt;zope2_bootstrap&lt;/a&gt; is a new Python package that &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.monkeypatcher"&gt;monkey patches&lt;/a&gt; Zope2 in order to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Replace &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/Zope/trunk/src/App/dtml/manage_page_style.css.dtml"&gt;manage_page_styles.css.dtml&lt;/a&gt; styles with &lt;a class="reference external" href="http://twitter.github.com/bootstrap/base-css.html"&gt;Twitter Bootstrap&lt;/a&gt; styles.&lt;/li&gt;
&lt;li&gt;Adds CSS classes to &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/Zope/trunk/src/OFS/dtml/main.dtml"&gt;main&lt;/a&gt; and/or &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/Products.ExternalEditor/trunk/Products/ExternalEditor/manage_main.dtml"&gt;manage_main&lt;/a&gt; tables.&lt;/li&gt;
&lt;li&gt;Inserts a Plone logo (if Plone is installed) above &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/Products.ExternalEditor/trunk/Products/ExternalEditor/manage_tabs.dtml"&gt;manage_tabs.dtml&lt;/a&gt; tabs (h/t: &lt;a class="reference external" href="https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/patches/addzmiplonesite.py"&gt;https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/patches/addzmiplonesite.py&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Inserts a ZMI warning (if Plone is installed) below &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/Products.ExternalEditor/trunk/Products/ExternalEditor/manage_tabs.dtml"&gt;manage_tabs.dtml&lt;/a&gt; tabs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next version, I'll try to import &lt;a class="reference external" href="http://twitter.github.com/bootstrap/javascript.html"&gt;Twitter Bootstrap JavaScript&lt;/a&gt; for even more goodness. Enjoy, and give feedback in the comments, or &lt;a class="reference external" href="https://github.com/aclark4life/zope2_bootstrap/issues"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>A simple printer of nested lists</title><link href="http://aclark.net/blog/a-simple-printer-of-nested-lists.html" rel="alternate"></link><updated>2012-05-23T22:58:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-05-23:a-simple-printer-of-nested-lists.html</id><summary type="html">&lt;p&gt;&lt;em&gt;A rant&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Do you ever get the urge to kill? How many of us cringe whenever we see these words? Lately I've been spending a lot of time developing &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;, (now running on heroku!) during which time I see a lot of these kinds of packages being released.&lt;/p&gt;
&lt;p&gt;I kid about the killing part, but seriously: &lt;strong&gt;this is a problem&lt;/strong&gt;.  Fortunately for us, our PyPI overloads see fit to occasionally remove these packages, and for this I am grateful.&lt;/p&gt;
&lt;p&gt;I mean it makes me &lt;em&gt;dance-around-the-room&lt;/em&gt; happy! Ahem. But are they really all gone? Close enough. A quick &lt;a class="reference external" href="https://crate.io/?q=a+simple+printer+of+nested+lists"&gt;crate.io search&lt;/a&gt; now shows only 2 packages instead of 4 pages of results.&lt;/p&gt;
&lt;p&gt;Hallelujah! But is this the best we can do? I know that some well-meaning person wrote a book containing the example that is leading some poor, misguided souls to spam PyPI (if only the author listed the test site instead: &lt;a class="reference external" href="http://testpypi.python.org/pypi"&gt;http://testpypi.python.org/pypi&lt;/a&gt;). And I have to assume that this was just some terrible mistake. But do we all have to live with this mistake?&lt;/p&gt;
&lt;p&gt;I'm asking because I honestly don't know the answer. I remember when I started pythonpackages.com, the &lt;a class="reference external" href="http://pythonpackages.com/package/deliverance"&gt;Deliverance&lt;/a&gt; documentation was being updated something like every 5 minutes (kidding again, but it was frequent enough to be annoying). After grousing about it in public, it stopped happening!&lt;/p&gt;
&lt;p&gt;I wonder if some good natured grousing about our friends (read: enemies) the &lt;em&gt;simple printers of nested lists&lt;/em&gt; will do the same?&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Adam Yauch has passed</title><link href="http://aclark.net/blog/adam-yauch-has-passed.html" rel="alternate"></link><updated>2012-05-11T09:58:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-05-11:adam-yauch-has-passed.html</id><summary type="html">&lt;p&gt;&lt;em&gt;And why it matters to tech people, like me&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(I hope my tech colleagues will indulge my thoughts on the recent passing of Beastie Boy Adam Yauch.)&lt;/p&gt;
&lt;p&gt;TL;DR: I &amp;lt;3 the Beastie Boys and will miss Adam Yauch; and I suspect many others in the tech world do, and will, too&lt;/p&gt;
&lt;div class="section" id="where-i-came-from"&gt;
&lt;h2&gt;Where I came from&lt;/h2&gt;
&lt;p&gt;For as long as I can remember, I've been trying to emulate my heroes. It started with pop music in the 80s and artists like Michael Jackson, Madonna, and of course the Beastie Boys. While I was obsessed with Michael Jackson back then, I don't recall trying too hard to emulate the Beastie Boys… until the 90s.&lt;/p&gt;
&lt;p&gt;In the early 90s, I was just out of high school (where I discovered Led Zeppelin, Pink Floyd, Beatles, Stones etc), was working full time at Chili's, and had no serious plans for college. I was really into music, but didn't have the social skills required to participate in any meaningful activities, like playing in a band.&lt;/p&gt;
&lt;p&gt;But I loved music.&lt;/p&gt;
&lt;p&gt;I listened to Nirvana, Beastie Boys, and any number of other pop, rock and rap acts of the 90s. I went to rock shows at the 8x10 in Baltimore and 9:30 club in DC. I went to festivals like the HFSistival and Lollapalooza. Throughout the decade, I formulated my thoughts on how I would, one day, start a band.&lt;/p&gt;
&lt;p&gt;To say the Beastie Boys were inspirational to me during this time period would be a colossal understatement (remember the first time you saw the &amp;quot;So Watcha Want?&amp;quot; video?) While I wholly identified with the angst-ridden music of Nirvana, I also equally identified with the good natured spirit of, and dope-ass-jams from, the Beastie Boys: three guys producing kick ass music with, among other instruments, a &amp;quot;bullshit mic, made out of plastic&amp;quot;. Most importantly: they never took themselves too seriously. They made great music, but they were also just like you and me. They made you feel like you could do it, too.&lt;/p&gt;
&lt;p&gt;In the late 90s and early to mid 2000s, I finally got a chance to play music. I started a band, played some shows, recorded a few albums, and had a lot of fun. Most importantly: I proved to myself I could do it.  The shows I put on with my band were awesome; they were true rock shows: those in which the audience responded positively, viscerally. There is no better feeling in the world than that type of self-expression.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-i-am-now"&gt;
&lt;h2&gt;Who I am now&lt;/h2&gt;
&lt;p&gt;Eventually the band imploded, and I found a new obsession: technology. I have always been obsessed with tech, but never focused on it exclusively until the mid to late 2000s. Now I have a new set of heroes to emulate, and many new things to prove to myself I can do. Maybe I'll even play music again one day, but if I don't, I know that I accomplished, on some level, what I set out to do. And that is a great feeling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-we-are-all-headed"&gt;
&lt;h2&gt;Where we are all headed&lt;/h2&gt;
&lt;p&gt;We are all headed forward, now, without Adam Yauch to inspire us anew.  This sucks more than words can express; but it is, alas, a part of life.  Without death to make life precious, there would be no joy in living. We all only have a short period of time in life to accomplish our goals, so it is important that we spend time trying to do so. (And if your goals include helping other people, bonus points from Adam.)&lt;/p&gt;
&lt;p&gt;I cannot thank Adam Yauch (MCA), Adam Horovitz (Ad-Rock), and Mike D enough; for providing me with all the inspiration I needed, when I needed it, to live my life; it has made all the difference. I know that Ad-Rock and Mike D will continue to live their lives; and whether that includes performing as &amp;quot;Beastie Boys&amp;quot; or not, does not matter to me; I will still be watching, waiting to be inspired again. And to Adam Yauch who has rapped, joked, snowboarded, and philanthropized his way through all our lives: thank you for the inspiration; I use it every day, and I'll never forget it was &lt;em&gt;you&lt;/em&gt; and your closest two brothers Ad-Rock and Mike D who gave it to me.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>test-plone tmp</title><link href="http://aclark.net/blog/test-plone-tmp.html" rel="alternate"></link><updated>2012-04-04T14:14:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-04-04:test-plone-tmp.html</id><summary type="html">&lt;p&gt;Since Day 1 with Plone circa 2004, I've always taken pride in and greatly enjoyed refining my development environment. It's been stable for a while now (&amp;gt; 1 year or so) so I thought I'd share.&lt;/p&gt;
&lt;div class="section" id="operating-system"&gt;
&lt;h2&gt;Operating system&lt;/h2&gt;
&lt;p&gt;Mac OS X Latest (Lion, at the time of this writing)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="terminal"&gt;
&lt;h2&gt;Terminal&lt;/h2&gt;
&lt;p&gt;Mac OS X Terminal&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="editor"&gt;
&lt;h2&gt;Editor&lt;/h2&gt;
&lt;p&gt;Vim&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;Yes. All versions, via the collective Python buildout:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/collective/buildout.python"&gt;https://github.com/collective/buildout.python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="plone"&gt;
&lt;h2&gt;Plone&lt;/h2&gt;
&lt;p&gt;Yes. All versions, via pythonpackages.com:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/advanced.html"&gt;http://docs.pythonpackages.com/en/latest/advanced.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-tools"&gt;
&lt;h2&gt;Additional tools&lt;/h2&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://github.com/aclark4life/binfiles/blob/master/test-plone"&gt;shell script to run virtualenv, buildout, etc&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[bash] #!/bin/sh if ! [ -n &amp;quot;$1&amp;quot; ] then echo &amp;quot;Usage:nn$0 &amp;lt;dir&amp;gt;n&amp;quot; exit 1
fi if ! [ -d $1 ] then mkdir $1 fi cd $1 virtualenv-2.7 . bin/pip
install zc.buildout bin/buildout init cat &amp;lt;&amp;lt; EOF &amp;gt; buildout.cfg
[buildout] extends =
http://build.pythonpackages.com/buildout/plone/4.2.x-dev EOF
bin/buildout bin/plone start sleep 4 echo &amp;quot;Adding Plone site...&amp;quot; curl -d
form.submitted:boolean=&amp;quot;True&amp;quot;
http://admin:admin&amp;#64;localhost:8080/&amp;#64;&amp;#64;plone-addsite?site\_id=Plone
bin/plone stop bin/plone fg [/bash]
&lt;/pre&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://github.com/aclark4life/binfiles/blob/master/tmp"&gt;Python script to create temporary directories&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[python] #!/usr/bin/env python

import os import tempfile print os.path.abspath(tempfile.mkdtemp())
[/python]
&lt;/pre&gt;
&lt;p&gt;A default buildout config file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
eggs-directory = /Users/aclark/Developer/eggs-directory
download-cache = /Users/aclark/Developer/download-cache
extends-cache = /Users/aclark/Developer/extends-cache
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;My typical workflow looks like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hang in #plone on irc.freenode.net and wait for questions&lt;/li&gt;
&lt;li&gt;Hear question and get inspired to run Plone&lt;/li&gt;
&lt;li&gt;Run: &lt;strong&gt;$ test-plone `tmp`&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/2304317"&gt;~ 1 minute later&lt;/a&gt; I'm browsing &lt;strong&gt;http://localhost:8080/Plone&lt;/strong&gt; and can install add-ons, check ZMI settings, etc.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>New vanity release</title><link href="http://aclark.net/blog/new-vanity-release.html" rel="alternate"></link><updated>2012-01-30T09:52:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-01-30:new-vanity-release.html</id><summary type="html">&lt;p&gt;With all the Python &lt;a class="reference external" href="http://crate.io/"&gt;stats&lt;/a&gt; &lt;a class="reference external" href="http://python3wos.appspot.com/"&gt;goodness&lt;/a&gt; going on recently, I got
inspired to make a new &lt;a class="reference external" href="http://pythonpackages.com/info/vanity"&gt;vanity&lt;/a&gt; release. This release features the
ability to display per package download statistics via the `-v` or
`--verbose` command line argument.&lt;/p&gt;
&lt;p&gt;Here are some of my favorite results.&lt;/p&gt;
&lt;div class="section" id="vanity"&gt;
&lt;h2&gt;Vanity&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ vanity vanity -v
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vanity-1.0.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-04-14&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 352
&amp;nbsp;&amp;nbsp; vanity-1.1.0.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-10-26&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 139
&amp;nbsp;&amp;nbsp; vanity-1.1.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-10-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 114
&amp;nbsp;&amp;nbsp; vanity-1.1.2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-10-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 145
vanity-1.2.0.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-30&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0
-------------------------------------------
Package `vanity` has been downloaded 750 times!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="django"&gt;
&lt;h2&gt;Django&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ vanity django -v
Django-1.1.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-23&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,618
Django-1.1.4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-02-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,476
&amp;nbsp; Django-1.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-05-17&amp;nbsp;&amp;nbsp; 15,876
Django-1.2.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-05-24&amp;nbsp;&amp;nbsp; 65,120
Django-1.2.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-09-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,467
Django-1.2.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-09-11&amp;nbsp;&amp;nbsp; 73,984
Django-1.2.4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-23&amp;nbsp;&amp;nbsp; 49,904
Django-1.2.5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-02-09&amp;nbsp;&amp;nbsp; 63,977
Django-1.2.6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 427
Django-1.2.7.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-11&amp;nbsp;&amp;nbsp;&amp;nbsp; 6,825
&amp;nbsp; Django-1.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-03-23&amp;nbsp; 238,504
Django-1.3.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-10&amp;nbsp; 176,054
-------------------------------------------
Package `Django` has been downloaded 700,232 times!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="plone"&gt;
&lt;h2&gt;Plone&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ vanity plone -v
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Plone-3.2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2008-12-31&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,690
&amp;nbsp;&amp;nbsp; Plone-3.2.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-02-04&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,466
&amp;nbsp;&amp;nbsp; Plone-3.2.2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-03-03&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,893
&amp;nbsp;&amp;nbsp; Plone-3.2.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-06-20&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,731
&amp;nbsp;&amp;nbsp; Plone-3.2a1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2008-10-10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 976
&amp;nbsp; Plone-3.2rc1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2008-12-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 758
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Plone-3.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-08-19&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,611
&amp;nbsp;&amp;nbsp; Plone-3.3.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-09-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,148
Plone-3.3.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-11-03&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,043
&amp;nbsp;&amp;nbsp; Plone-3.3.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-12-08&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,733
&amp;nbsp;&amp;nbsp; Plone-3.3.4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-01-14&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,906
&amp;nbsp;&amp;nbsp; Plone-3.3.5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-03-03&amp;nbsp;&amp;nbsp; 12,131
Plone-3.3.6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-19&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 787
&amp;nbsp;&amp;nbsp; Plone-3.3b1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-03-12&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 940
&amp;nbsp; Plone-3.3rc1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-03-30&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 743
&amp;nbsp; Plone-3.3rc2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-04-05&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,822
&amp;nbsp; Plone-3.3rc3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-05-23&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,036
&amp;nbsp; Plone-3.3rc4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-07-07&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,163
&amp;nbsp; Plone-3.3rc5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-08-01&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,211
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Plone-4.0.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-08-30&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,659
&amp;nbsp;&amp;nbsp; Plone-4.0.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-10-04&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,224
&amp;nbsp;&amp;nbsp; Plone-4.0.2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-22&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,022
&amp;nbsp;&amp;nbsp; Plone-4.0.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,339
&amp;nbsp;&amp;nbsp; Plone-4.0.4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-03-01&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,711
&amp;nbsp;&amp;nbsp; Plone-4.0.5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,152
&amp;nbsp;&amp;nbsp; Plone-4.0.6.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-05-22&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,469
&amp;nbsp;&amp;nbsp; Plone-4.0.7.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-06&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,192
&amp;nbsp;&amp;nbsp; Plone-4.0.8.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-17&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 509
&amp;nbsp;&amp;nbsp; Plone-4.0.9.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-29&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 958
&amp;nbsp; Plone-4.0.10.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-10-12&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 495
&amp;nbsp;&amp;nbsp; Plone-4.0a1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-11-19&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 946
&amp;nbsp;&amp;nbsp; Plone-4.0a2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-12-04&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 921
&amp;nbsp;&amp;nbsp; Plone-4.0a3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-12-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,272
&amp;nbsp;&amp;nbsp; Plone-4.0a4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-02-01&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,121
&amp;nbsp;&amp;nbsp; Plone-4.0a5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-02-19&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 850
&amp;nbsp;&amp;nbsp; Plone-4.0b1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-03-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,308
&amp;nbsp;&amp;nbsp; Plone-4.0b2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-04-10&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,028
&amp;nbsp;&amp;nbsp; Plone-4.0b3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-05-04&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,722
&amp;nbsp;&amp;nbsp; Plone-4.0b4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-06-13&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,642
Plone-4.0b5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-07-08&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,995
&amp;nbsp; Plone-4.0rc1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-08-06&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,598
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Plone-4.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-17&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,479
Plone-4.1.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 429
Plone-4.1.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-10-08&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,187
Plone-4.1.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-11-29&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,883
&amp;nbsp;&amp;nbsp; Plone-4.1a1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 699
&amp;nbsp;&amp;nbsp; Plone-4.1a2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-02-11&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 451
&amp;nbsp;&amp;nbsp; Plone-4.1a3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-02-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 680
&amp;nbsp;&amp;nbsp; Plone-4.1b1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-03-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 958
&amp;nbsp;&amp;nbsp; Plone-4.1b2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,040
&amp;nbsp; Plone-4.1rc2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-05-22&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 797
&amp;nbsp; Plone-4.1rc3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-06&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,329
&amp;nbsp;&amp;nbsp; Plone-4.2a1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 521
&amp;nbsp;&amp;nbsp; Plone-4.2a2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-16&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 884
Plone-4.2b1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-06&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 619
------------------------------------------
Package `Plone` has been downloaded 111,877 times!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pyramid"&gt;
&lt;h2&gt;Pyramid&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ vanity pyramid -v
&amp;nbsp;&amp;nbsp; pyramid-1.0.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-31&amp;nbsp;&amp;nbsp; 24,055
&amp;nbsp;pyramid-1.0.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-13&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 460
&amp;nbsp;pyramid-1.0.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 185
&amp;nbsp;pyramid-1.0a1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-05&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,128
&amp;nbsp;pyramid-1.0a2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-09&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 952
&amp;nbsp;pyramid-1.0a3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-16&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 803
&amp;nbsp;pyramid-1.0a4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,732
&amp;nbsp;pyramid-1.0a5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 639
&amp;nbsp;pyramid-1.0a6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-16&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 834
&amp;nbsp;pyramid-1.0a7.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 912
&amp;nbsp;pyramid-1.0a8.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-27&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,233
&amp;nbsp;pyramid-1.0a9.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-08&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,313
pyramid-1.0a10.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-18&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 960
&amp;nbsp;pyramid-1.0b1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-22&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 871
&amp;nbsp;pyramid-1.0b2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-25&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,003
&amp;nbsp;pyramid-1.0b3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 816
&amp;nbsp;&amp;nbsp; pyramid-1.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-22&amp;nbsp;&amp;nbsp;&amp;nbsp; 5,674
&amp;nbsp;pyramid-1.1.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-13&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,057
&amp;nbsp;pyramid-1.1.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-17&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,560
&amp;nbsp;pyramid-1.1.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 160
&amp;nbsp;pyramid-1.1a1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-20&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,146
&amp;nbsp;pyramid-1.1a2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-23&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,003
&amp;nbsp;pyramid-1.1a3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-26&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,252
&amp;nbsp;pyramid-1.1a4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-01&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,517
&amp;nbsp;pyramid-1.1b1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 981
&amp;nbsp;pyramid-1.1b2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-13&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 844
&amp;nbsp;pyramid-1.1b3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 742
&amp;nbsp;pyramid-1.1b4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-18&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,094
&amp;nbsp;&amp;nbsp; pyramid-1.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-13&amp;nbsp;&amp;nbsp;&amp;nbsp; 6,450
&amp;nbsp;pyramid-1.2.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-28&amp;nbsp;&amp;nbsp; 10,357
&amp;nbsp;pyramid-1.2.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-11-20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 322
&amp;nbsp;pyramid-1.2.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-11-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,078
&amp;nbsp;pyramid-1.2.4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-06&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,193
&amp;nbsp;pyramid-1.2.5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 555
&amp;nbsp;pyramid-1.2.6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-05&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 514
&amp;nbsp;pyramid-1.2.7.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 472
&amp;nbsp;pyramid-1.2a1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-24&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 907
&amp;nbsp;pyramid-1.2a2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-27&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 696
&amp;nbsp;pyramid-1.2a3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-29&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,268
&amp;nbsp;pyramid-1.2a4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-02&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 593
&amp;nbsp;pyramid-1.2a5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-04&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 840
&amp;nbsp;pyramid-1.2a6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-07&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 602
&amp;nbsp;pyramid-1.2b1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 493
&amp;nbsp;pyramid-1.2b2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 700
&amp;nbsp;pyramid-1.2b3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-11&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 674
&amp;nbsp;pyramid-1.3a1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,264
&amp;nbsp;pyramid-1.3a2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-14&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,641
&amp;nbsp;pyramid-1.3a3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,716
&amp;nbsp;pyramid-1.3a4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-05&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 675
&amp;nbsp;pyramid-1.3a5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,369
&amp;nbsp;pyramid-1.3a6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-20&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,917
---------------------------------------------
Package `pyramid` has been downloaded 97,222 times!
&lt;/pre&gt;
&lt;p&gt;Enjoy the new release.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Hello Plone theming</title><link href="http://aclark.net/blog/hello-plone-theming.html" rel="alternate"></link><updated>2012-01-25T00:15:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-01-25:hello-plone-theming.html</id><summary type="html">&lt;p&gt;In this post, we introduce a new tutorial aimed at bridging the gap between the &lt;strong&gt;incredibly easy to use and enormously powerful Diazo theming engine for Plone&lt;/strong&gt;, and bootstrapping your first new theme. You do not need to have any Python skills whatsoever to perform these tasks. New Plone themes are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;HTML/CSS/JavaScript/images (Sound familiar? You don't need to know any Plone to understand this part.)&lt;/li&gt;
&lt;li&gt;A set of rules that map your HTML/CSS/JavaScript/images to Plone content. (This part is Diazo-specific; and while Diazo is not part of Plone, integration is provided by a Python package called plone.app.theming.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Diazo rules can get complex, but it's very easy to get your first rule done and working and then off you go. You may find this &lt;a class="reference external" href="http://readthedocs.org/docs/pythonpackages-docs/en/latest/features/examples/ex8-diazo.html"&gt;new tutorial on pythonpackages.com&lt;/a&gt;. Enjoy, and get busy theming Plone.&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>New Year's Python Meme 2011</title><link href="http://aclark.net/blog/new-years-python-meme-2011.html" rel="alternate"></link><updated>2011-12-21T13:11:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-12-21:new-years-python-meme-2011.html</id><summary type="html">&lt;p&gt;My response to &lt;a class="reference external" href="http://blog.ziade.org/2011/12/20/new-year039s-python-meme-2011/"&gt;http://blog.ziade.org/2011/12/20/new-year039s-python-meme-2011/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was fun &lt;a class="reference external" href="http://blog.aclark.net/2009/12/31/new-years-python-meme/"&gt;answering in 2009&lt;/a&gt;, so I thought I'd play again.&lt;/p&gt;
&lt;div class="section" id="whats-the-coolest-python-application-framework-or-library-you-have-discovered-in-2011"&gt;
&lt;h2&gt;What’s the coolest Python application, framework or library you have discovered in 2011?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.pylonsproject.org/"&gt;Pyramid&lt;/a&gt;. In early 2011 I released &lt;a class="reference external" href="http://pythonpackages.com/info/vanity"&gt;vanity&lt;/a&gt;, which later became &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;(more or less). I used building the site as an excuse to learn Pyramid, and it was well worth it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What new programming technique did you learn in 2011?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I learned to &lt;strong&gt;not&lt;/strong&gt; reinvent the wheel, and to collaborate with others on solving hard problems (which in and of itself is hard). Long story short, I took a little bit of heat within the Plone CMS community for creating a &amp;quot;one off&amp;quot; migration script:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pythonpackages.com/info/parse2plone"&gt;http://pythonpackages.com/info/parse2plone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've since learned my lesson and have been collaborating meaningfully with &lt;a class="reference external" href="https://twitter.com/#!/djay75"&gt;Dylan Jay&lt;/a&gt;on the more widely-supported &lt;a class="reference external" href="http://pythonpackages.com/info/mr.migrator"&gt;mr.migrator&lt;/a&gt; and friends.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s the name of the open source project you contributed to the most in 2011? What did you do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I contributed to the &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt; project quite a bit (as I have been doing for years now), but I also fell in love with &lt;a class="reference external" href="http://mozilla.org"&gt;Mozilla&lt;/a&gt; (and their mission) and began working on various things, including a virtual machine to help with the development of &lt;a class="reference external" href="http://support.mozilla.com"&gt;support.mozilla.com&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aclark4life/kitsune-vagrant"&gt;https://github.com/aclark4life/kitsune-vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What was the Python blog or website you read the most in 2011?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://news.ycombinator.com/"&gt;Hacker news&lt;/a&gt;. I have the start-up bug.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are the three top things you want to learn in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript, JavaScript, and JavaScript. I first heard the term 15 years ago and have been avoiding it ever since. Time to jump in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the top software, application or library you wish someone would write in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope someone (me) writes a &amp;quot;secret&amp;quot; feature for &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt; and launches it in first quarter of 2012; and I hope folks find it useful.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Introducing pythonpackages.com</title><link href="http://aclark.net/blog/introducing-pythonpackagescom.html" rel="alternate"></link><updated>2011-11-29T02:24:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-11-29:introducing-pythonpackagescom.html</id><summary type="html">&lt;div class="section" id="the-website-for-python-egoists"&gt;
&lt;h2&gt;The website for Python egoists™&lt;/h2&gt;
&lt;p&gt;I have this overwhelming desire to know how many times my favorite Python packages have been downloaded. Don't you? If so, look no further than &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="count-downloads"&gt;
&lt;h2&gt;Count downloads&lt;/h2&gt;
&lt;p&gt;Where you can enter a package like &lt;a class="reference external" href="http://pythonpackages.com/info/django"&gt;Django&lt;/a&gt; and find out the number of downloads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="count-favorites"&gt;
&lt;h2&gt;Count favorites&lt;/h2&gt;
&lt;p&gt;Or click on &lt;strong&gt;Count favorites&lt;/strong&gt; to reveal how many times it has been favorited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="find-trash"&gt;
&lt;h2&gt;Find trash&lt;/h2&gt;
&lt;p&gt;Or even poke some good natured fun at it, for its &lt;a class="reference external" href="http://pythonpackages.com/trash/django"&gt;failure to provide adequate package metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="discuss-packages"&gt;
&lt;h2&gt;Discuss packages&lt;/h2&gt;
&lt;p&gt;You can even &lt;em&gt;discuss&lt;/em&gt;packages on &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recent-activity"&gt;
&lt;h2&gt;Recent activity&lt;/h2&gt;
&lt;p&gt;But wait there is more! You can also browse the &lt;a class="reference external" href="http://pythonpackages.com/pypi"&gt;latest changelog activity&lt;/a&gt; from PyPi right on the site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="package-info"&gt;
&lt;h2&gt;Package info&lt;/h2&gt;
&lt;p&gt;Lastly, if you get bored counting package downloads and favorites you can look at the &lt;em&gt;actual&lt;/em&gt; &lt;a class="reference external" href="http://pythonpackages.com/info/django"&gt;package metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Sound interesting? Or utterly silly, perhaps? I think &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt; is the best of both. It started off as a front end to the command line utility &lt;a class="reference external" href="http://pythonpackages.com/info/vanity"&gt;vanity&lt;/a&gt;, but has taken on a life of it's own.&lt;/p&gt;
&lt;p&gt;After a small run on Python reddit and Hacker News, I'm looking forward to seeing what Python Planet folks think. So please check out &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt; and let me know. You can leave comments about the site here.&lt;/p&gt;
&lt;p&gt;Or open a new ticket here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new"&gt;https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>Plone: First class Python citizen</title><link href="http://aclark.net/blog/plone-first-class-python-citizen.html" rel="alternate"></link><updated>2011-10-24T09:09:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-10-24:plone-first-class-python-citizen.html</id><summary type="html">&lt;p&gt;&lt;em&gt;The Plone community and software fit nicely within the larger Python ecosystem. Here's why.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For almost as long as I have been involved in the &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt; project, I've been interested in Plone's role in the Python ecosystem. Today as I look across the current landscape, I'm proud to announce a new milestone the Plone community can take pride in. But the change didn't happen overnight, so first let's take a quick look back.&lt;/p&gt;
&lt;div class="section" id="pypi-support-in-psc"&gt;
&lt;h2&gt;PyPI support in PSC&lt;/h2&gt;
&lt;p&gt;Circa 2008, Tarek Ziadé and others finished the PyPI integration branch of PloneSoftwareCenter started by Sidnei Da Silva 2 years before.&lt;/p&gt;
&lt;p&gt;This was a big step towards the &amp;quot;Pythonification&amp;quot; of Plone, mainly because Plone packages could now be published on plone.org in the same way Python packages are published to the Python Package Index: via &amp;quot;python setup.py upload&amp;quot;. In fact if you are publishing Plone packages, it is recommended that you release to &lt;em&gt;both&lt;/em&gt; PyPI and plone.org simultaneously. This ensures your package is visible to the most number of potential users. And you can use &lt;a class="reference external" href="http://pypi.python.org/pypi/jarn.mkrelease"&gt;mkrelease&lt;/a&gt; to automate the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="collective-docs-at-rtd"&gt;
&lt;h2&gt;Collective docs at RTD&lt;/h2&gt;
&lt;p&gt;Just when you thought things couldn't get more exciting in Python land, along came &lt;a class="reference external" href="http://readthedocs.org/"&gt;readthedocs.org&lt;/a&gt; (a Django Dash production, IIRC). And to &lt;a class="reference external" href="https://github.com/collective/collective.developermanual/commit/4dc34d113b1a62064c83f3c431acc7d8deb42f1a"&gt;join the fun in July 2011&lt;/a&gt;, I moved Mikko Ohtamaa's awesome &lt;strong&gt;Plone Community Managed Developer Manual&lt;/strong&gt; to the &lt;a class="reference external" href="http://github.com/collective"&gt;Github collective&lt;/a&gt; and configured the RTD &lt;a class="reference external" href="https://github.com/blog/41-service-integration"&gt;service hook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This means that whenever anyone commits a change to the developer manual, within a few minutes a new Sphinx build &lt;a class="reference external" href="http://collective-docs.readthedocs.org/en/latest/index.html"&gt;gets published&lt;/a&gt;. It was so easy to set this up, I wish I had done it sooner.&lt;/p&gt;
&lt;p&gt;So you can that see over the years, we have been working ourselves into a frenzy of Python goodness! And last week, it got even better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-plone-packages"&gt;
&lt;h2&gt;Introducing: Plone packages!&lt;/h2&gt;
&lt;p&gt;Thanks to the good folks at &lt;a class="reference external" href="http://www.cartwheelweb.com/"&gt;Cartwheel Web&lt;/a&gt;, makers of the fine &lt;a class="reference external" href="http://opencomparison.org/"&gt;Open Comparison&lt;/a&gt; service, Plone now has its very own &lt;a class="reference external" href="http://plone.opencomparison.org"&gt;grid comparison website&lt;/a&gt;! (&lt;a class="reference external" href="http://djangopackages.com"&gt;Djangopackages.com&lt;/a&gt; was first, followed by &lt;a class="reference external" href="http://pyramid.opencomparison.org"&gt;pyramid.opencomparison.org&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;This is a site where folks can add packages hosted elsewhere (e.g. svn, github, pypi), vote on them, and add grid comparisons to compare similarly-featured add-ons, frameworks, and other related software.  Grids are the killer feature of this site, and personally I've been waiting to use them to answer questions like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q: What's the best blogging add-on for Plone?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: http://plone.opencomparison.org/grids/g/weblogs/&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The content is entirely user driven (TTW only) so please head over to &lt;a class="reference external" href="http://plone.opencomparison.org"&gt;plone.opencomparison.org&lt;/a&gt;, login with your github ID, and start adding packages! And while you are at it, please report any issues you find here: &lt;a class="reference external" href="https://github.com/opencomparison/opencomparison/issues"&gt;https://github.com/opencomparison/opencomparison/issues&lt;/a&gt;. Lastly, let's all tweet a big thanks to &lt;a class="reference external" href="https://twitter.com/#!/pydanny"&gt;&amp;#64;pydanny&lt;/a&gt;and &lt;a class="reference external" href="https://twitter.com/#!/audreyr"&gt;&amp;#64;audreyr&lt;/a&gt; for their hard work and generosity!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Pillow: one year later</title><link href="http://aclark.net/blog/pillow-one-year-later.html" rel="alternate"></link><updated>2011-10-14T13:11:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-10-14:pillow-one-year-later.html</id><summary type="html">&lt;p&gt;&lt;em&gt;For anyone unfamiliar with Pillow, it is the &amp;quot;friendly PIL fork&amp;quot;: a fork of PIL that aims to remain a good citizen in the PIL community through its actions.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="warm-and-fluffy-history"&gt;
&lt;h2&gt;Warm and fluffy history&lt;/h2&gt;
&lt;p&gt;Pillow 1.0 was released on 2010-07-31, a little over a year later came Pillow 1.7.5 which features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Many packaging fixes (mostly to support dependency libraries)&lt;/li&gt;
&lt;li&gt;Windows binaries&lt;/li&gt;
&lt;li&gt;Over 13K downloads&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pillow is used in Plone's &lt;a class="reference external" href="http://launchpad.net/plone/4.1/4.1.2/+download/Plone-4.1.2-UnifiedInstaller.tgz"&gt;UnifiedInstaller&lt;/a&gt;, and I know &lt;a class="reference external" href="https://github.com/collective/Pillow/commit/8a282c9ea4382045822ca4fc15e586ebd2f7ace7"&gt;folks from the Django community&lt;/a&gt;are using it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-creature-comforts"&gt;
&lt;h2&gt;Future creature comforts&lt;/h2&gt;
&lt;p&gt;All in all, a mild success. So what's next? &lt;strong&gt;More of the same&lt;/strong&gt;. To &lt;a class="reference external" href="http://stackoverflow.com/questions/2485295/the-problem-with-installing-pil-using-virtualenv-or-buildout/7770547#7770547"&gt;quote myself from a recent Stack Overflow answer&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
If PIL ever does exactly what Pillow does, then the fork will die. Until that happens, we have Pillow.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line-accommodations"&gt;
&lt;h2&gt;Bottom line accommodations&lt;/h2&gt;
&lt;p&gt;This may never happen of course, which is part of the reason for the fork. You can't force someone to maintain software for you. But in the open source world you can grab the bull by the horns (take the lead) and try to make things better. Even better: if your project and community are healthy and functioning properly, your success or failure will be determined by the folks in the community (as it should be). In this case, the Plone and Python communities have spoken clearly.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Vagrant, Puppet and Mozilla, oh my!</title><link href="http://aclark.net/blog/vagrant-puppet-and-mozilla-oh-my.html" rel="alternate"></link><updated>2011-10-03T17:25:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-10-03:vagrant-puppet-and-mozilla-oh-my.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Warning: This post is only loosely Python related and not at all Plone related, but I thought folks might enjoy hearing about Vagrant and Puppet because these tools may help you do your Plone and Python jobs better.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For the past couple weeks I've been working on creating a virtual machine to bootstrap a kitsune environment. Kitsune is the Django site that powers support.mozilla.com. I've now reached what I call the &lt;strong&gt;2nd milestone&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="milestones"&gt;
&lt;h2&gt;Milestones&lt;/h2&gt;
&lt;p&gt;The milestones are as follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Get the VM running to the point where one can type &lt;strong&gt;./manage.py&lt;/strong&gt; and receive the help output (and not a traceback). This sounds trivial but there is actually a lot of work involved to get to this point. Namely, figuring out how to make &lt;a class="reference external" href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt; execute each of the required steps successfully, together. (You would expect to be able to just define the steps in order, but those with this expectation will be disappointed. I assume Puppet has their reasons, and they are probably even good ones. :-))&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get the VM running to the point where one can open http://33.33.33.10:8000 from the host to see kitsune running. Once step #1 is done, this is actually easier than it sounds because I'm &amp;quot;cheating&amp;quot;. Test data has been imported and a syncdb has been run, but I'm using supervisor to manage the runserver process (for now).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Get the VM running like it does in production. This will involve configuring &lt;strong&gt;Apache&lt;/strong&gt;and &lt;strong&gt;mod_wsgi&lt;/strong&gt; as well as resolving any issues that remain with the app. I'll rely on the kitsune team to help with this, as I'm still learning the app. This is the &amp;quot;exciting&amp;quot; part for me because I get to learn something new. While Vagrant and Puppet are also new to me, I consider these technologies part of my &amp;quot;past life&amp;quot; (as a system administrator) and Django sites part of my &amp;quot;future life&amp;quot; (as a web developer).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now about the technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vagrant"&gt;
&lt;h2&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;I had heard of &lt;a class="reference external" href="http://vagrantup.com/"&gt;Vagrant&lt;/a&gt; before, but never tried it. I am now sorry I waited so long because the &amp;quot;cool factor&amp;quot; is very high. It requires that &lt;a class="reference external" href="https://www.virtualbox.org/"&gt;Virtualbox&lt;/a&gt; be installed, which I also danced around for too long before committing (being a former Parallels user).&lt;/p&gt;
&lt;p&gt;On OS X Lion[1], installing Vagrant is simply a matter of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gem install vagrant
&lt;/pre&gt;
&lt;p&gt;Once you have `vagrant` installed you can do:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vagrant init
&lt;/pre&gt;
&lt;p&gt;inside some revision-controlled directory and you have the beginnings of a virtual machine you can share with the masses. This is how &lt;a class="reference external" href="https://github.com/aclark4life/kitsune-vagrant"&gt;kitsune-vagrant&lt;/a&gt; was born. Hopefully this shared virtual machine will eventually make some new developer's life much easier.&lt;/p&gt;
&lt;p&gt;We now arrive at a fork in the road; though Vagrant makes it easy to follow both paths: Chef or Puppet (it supports both). I don't recall what made me choose Puppet over Chef, but it might have been that the &lt;a class="reference external" href="https://github.com/rhelmer/socorro-vagrant"&gt;Socorro folks were using it already&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you decide on Puppet (and assuming you do), it's pretty easy to figure out that your next move is to create a manifest file for Puppet to apply[2].&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="puppet"&gt;
&lt;h2&gt;Puppet&lt;/h2&gt;
&lt;p&gt;My knowledge of Puppet is currently quite limited. Specifically, I only know how to create a manifest file. (Vagrant does the rest!) I imagine there is much more to Puppet, especially with regard to doing actual configuration management on production servers. But I have not explored any of that yet.&lt;/p&gt;
&lt;p&gt;However, I did learn quite a bit about Puppet just from writing the manifest. The first most important thing I learned is this: &lt;strong&gt;Puppet is in charge&lt;/strong&gt;. It does things the way it wants to and you need to follow its rules. The first and biggest challenge is to achieve a linear execution of tasks.&lt;/p&gt;
&lt;p&gt;You cannot write rules in order and hope for the best. This will fail spectacularly when something executes before something else was supposed to. The way around this is via `require =&amp;gt;` statements.&lt;/p&gt;
&lt;p&gt;A grep through kitsune.pp reveals:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
require =&amp;gt; Exec['git_clone'],
require =&amp;gt; Exec['db_sync'],
require =&amp;gt; Exec['packages_upgrade'],
require =&amp;gt; Exec['packages_update'],
require =&amp;gt; Package[$packages_native],
require =&amp;gt; Exec['git_clone'],
require =&amp;gt; Exec['chown_kitsune'],
require =&amp;gt; Exec['packages_compiled'],
require =&amp;gt; Exec['packages_vendor'],
require =&amp;gt; Exec['db_create'],
require =&amp;gt; Exec['db_import'],
require =&amp;gt; file['/etc/supervisor/supervisord.conf'],
require =&amp;gt; Exec['supervisor_stop'],
&lt;/pre&gt;
&lt;p&gt;This roughly translates to the following workflow logic:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ensure that `aptitude -y update; aptitude -y upgrade` have been run before you try to install the list of packages we require.&lt;/li&gt;
&lt;li&gt;Ensure the list of packages we require is installed before we checkout the code.&lt;/li&gt;
&lt;li&gt;Ensure the code has been checked out (and pip install / git submodule have been run) before you try to syncdb and run the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a bit more to it, but with that knowledge you should be able to &lt;a class="reference external" href="https://github.com/aclark4life/kitsune-vagrant/blob/master/manifests/kitsune.pp"&gt;read and understand kitsune.pp in full&lt;/a&gt;. I learned most of the remaining required puppeteering from this site:&lt;a class="reference external" href="http://www.puppetcookbook.com/"&gt;http://www.puppetcookbook.com/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mozilla"&gt;
&lt;h2&gt;Mozilla&lt;/h2&gt;
&lt;p&gt;Oh my! This Mozilla work is a ton of fun[3]; I attribute this in part due to the structure of their organization: I was invited immediately to collaborate in IRC with the kitsune team and as a result, we all have something to show for it[4]. Next I will be working on the 3rd milestone! Hope to finish by the end
of this week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[1] This did not work on Snow Leopard, because `gem` is too old.  However if you `brew install ruby` and try again, it should work.&lt;/p&gt;
&lt;p&gt;[2] I didn't bother to investigate Chef, but I am curious about it.&lt;/p&gt;
&lt;p&gt;[3] And I hope this is only the beginning.&lt;/p&gt;
&lt;p&gt;[4] I hope to get a Mozilla gig but even if I don't, being able to do this type of work is very rewarding (which is why you will often hear people in open source say that to get paid for the type of work they do is a dream come true :-)).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Mozilla and PyPI</title><link href="http://aclark.net/blog/mozilla-and-pypi.html" rel="alternate"></link><updated>2011-09-22T12:03:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-09-22:mozilla-and-pypi.html</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="http://blog.aclark.net/in-defense-of-pypi"&gt;last time I wrote about PyPI&lt;/a&gt; some folks mistook the subject to be &lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt;, so let me be clear: this article is about the &lt;a class="reference external" href="http://pypi.python.org/pypi"&gt;Python Packaging Index&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recently began doing some volunteer work for Mozilla[1], working on a &lt;a class="reference external" href="https://github.com/aclark4life/kitsune-vagrant"&gt;virtual machine setup&lt;/a&gt; to make kitsune development easier (kitsune is the code name for the Django site that powers &lt;a class="reference external" href="http://support.mozilla.com"&gt;support.mozilla.com&lt;/a&gt;).&lt;/p&gt;
&lt;div class="section" id="git-submodules"&gt;
&lt;h2&gt;Git submodules&lt;/h2&gt;
&lt;p&gt;In doing so, I came across an interesting command from their &lt;a class="reference external" href="https://github.com/jsocol/kitsune/blob/master/docs/installation.rst"&gt;installation docs&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git submodule update --init --recursive
&lt;/pre&gt;
&lt;p&gt;I can recall some vague rumblings about git submodules prior to this incident, but nothing I'd call &amp;quot;familiarity&amp;quot;. So, I shrugged it off and went about the business of creating the VM (and resisting the urge to use &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout/1.5.2"&gt;zc.buildout&lt;/a&gt; to do it):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;On day 1, I created a &lt;a class="reference external" href="http://virtualbox.org"&gt;VirtualBox&lt;/a&gt; VM using the latest Ubuntu Server and was able to assemble and run the application by following the instructions.&lt;/li&gt;
&lt;li&gt;On day 2, I began to &lt;a class="reference external" href="http://vagrantup.com"&gt;&amp;quot;vagrantize&amp;quot;&lt;/a&gt; the process. Here I ran into a bit of trouble with the git-submodule command[2]. This led me to seek alternative methods to install the various Python packages it was trying to install (when stuck on a problem I often like to pursue the alternatives immediately, so I have them if I need them.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="zamboni"&gt;
&lt;h2&gt;Zamboni&lt;/h2&gt;
&lt;p&gt;Then, in the Mozilla IRC channel #sumodev (&lt;strong&gt;su&lt;/strong&gt;pport &lt;strong&gt;mo&lt;/strong&gt;zilla) some nice Mozillian (willkg) pointed me to this gem:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mozweb.readthedocs.org/en/latest/packaging.html"&gt;http://mozweb.readthedocs.org/en/latest/packaging.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which in turn led me to the following two links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jbalogh.github.com/zamboni/topics/packages/"&gt;http://jbalogh.github.com/zamboni/topics/packages/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://playdoh.readthedocs.org/en/latest/packages.html#packages"&gt;http://playdoh.readthedocs.org/en/latest/packages.html#packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, faint rumblings… this time about zamboni (not THAT Zamboni). I know I've heard of it, but I wouldn't call myself familiar with it. So, I innocently read the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Python projects can incur a number of dependencies. ``pip`` can be handy, but we’ve had better luck with distributing a ``vendor`` library.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;At which point I immediately thought to myself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Yeah… I hear that.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Followed a few seconds later by:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Wait… what?!?&lt;/strong&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="playdoh"&gt;
&lt;h2&gt;Playdoh&lt;/h2&gt;
&lt;p&gt;Some time/research later[3], I (re)discovered that zamboni is the codename for &lt;a class="reference external" href="https://addons.mozilla.org"&gt;addons.mozilla.org&lt;/a&gt;[4]. And &lt;a class="reference external" href="http://playdoh.readthedocs.org/"&gt;Playdoh&lt;/a&gt; is the code name for Mozilla's base Django project setup. If you aren't familiar with Playdoh, please do give it a whirl[5].&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pypi"&gt;
&lt;h2&gt;PyPI&lt;/h2&gt;
&lt;p&gt;While all of this is very, very interesting to me, I am primarily a &amp;quot;systems and processes&amp;quot; guy; and what ultimately stuck with me after two days of Mozilla-ing is the following blurb from the Playdoh packaging documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;The ``/vendor`` library is supposed to contain all packages and repositories. It enables the project to be deployed as one package onto many machines, without relying on PyPI-based installations on each target machine.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;&amp;quot;Nooooooooooooooo&amp;quot;, I am now saying to myself over and over. &amp;quot;Without relying on PyPI-based installations on each target machine.&amp;quot; Another &amp;quot;noooooooooooooooo!&amp;quot; :-) I certainly don't fault Mozilla for taking this approach, but it makes me sad that large organizations like Mozilla are passing over PyPI in favor of alternative methods of distributing Python software.&lt;/p&gt;
&lt;p&gt;Let us all now hang our heads, for a moment of pause and reflection.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[a minute passes]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-future"&gt;
&lt;h2&gt;The future&lt;/h2&gt;
&lt;p&gt;I can't speak for anyone else, but I would certainly like to see this change in the future. I would LOVE to see PyPI become a place that Mozilla felt confident it could use to deploy Python software. And this is something I'd love to work on &lt;em&gt;for&lt;/em&gt; Mozilla, if given the opportunity[6].&lt;/p&gt;
&lt;div class="section" id="great-for-python-great-for-mozilla"&gt;
&lt;h3&gt;Great for Python == great for Mozilla?&lt;/h3&gt;
&lt;p&gt;It's obvious what's in it for Python, but what's in for Mozilla?&lt;/p&gt;
&lt;p&gt;Simple.&lt;/p&gt;
&lt;p&gt;I happen to share Mozilla's vision for an open web and open source in general. And it's great to see them embracing &amp;amp; using Python for their web projects! Without a doubt,&amp;nbsp; they are interested in giving back to the Python community (e.g. via Playdoh and the Django community, in this case.) So I suspect they'd be open to helping the Python community fix a long standing issue: the stability and reliability of the Python Package Index. It would certainly benefit them in the long run to simplify their build process to the point where git-submodule was no longer needed[7].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[1] I am actively courting Mozilla in hopes of landing a gig by the end of the year. So all you Mozillians who know me personally, please put in a good word! And all you Mozillians I have not met yet: nice to meet you! :-)&lt;/p&gt;
&lt;p&gt;[2] The problem turned out to be git-submodule failing to run because things like: grep and sed were missing from the PATH. Easily fixed by modifying the puppet configuration, but not easily discovered because git-submodule itself returned zero! Some guy on #puppet was very helpful in getting me to print out debug info.&lt;/p&gt;
&lt;p&gt;[3] More help from friendly Mozillians in #webdev:&lt;/p&gt;
&lt;blockquote&gt;
11:13 &amp;lt; groovecoder&amp;gt; aclark: yeah, zamboni is amo 11:13 &amp;lt; kumar&amp;gt; playdoh was extracted from zamboni and other apps 11:13 &amp;lt; kumar&amp;gt; but zamboni itself does not eat the playdoh dog food, actually 11:15 &amp;lt; kumar&amp;gt; aclark also, in case you're not steeped in our initialisms, amo is addons.mozilla.org&lt;/blockquote&gt;
&lt;p&gt;[4] There is a great presentation about it here: &lt;a class="reference external" href="http://www.slideshare.net/andymckay/anatomy-of-a-large-django-site-7590098"&gt;http://www.slideshare.net/andymckay/anatomy-of-a-large-django-site-7590098&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;[5] More from kumar (emphasis is my own):&lt;/p&gt;
&lt;blockquote&gt;
11:25 &amp;lt; kumar&amp;gt; &lt;strong&gt;Playdoh is starting to stabilize&lt;/strong&gt; so it would be &lt;strong&gt;good to see some use of it outside Mozilla&lt;/strong&gt;; this would probably help us catch Mozilla-specific things that need extraction&lt;/blockquote&gt;
&lt;p&gt;[6] LARGE HINT ;-)&lt;/p&gt;
&lt;p&gt;[7] Again, not that there is anything wrong with what Mozilla is doing here. As a systems guy, I just happen to gravitate toward simplifying processes by eliminating steps.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Hello mod_wsgi</title><link href="http://aclark.net/blog/hello-mod_wsgi.html" rel="alternate"></link><updated>2011-08-28T20:43:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-08-28:hello-mod_wsgi.html</id><summary type="html">&lt;p&gt;It seems I've inadvertently started another series of blog entry:&amp;nbsp;the &amp;quot;hello world&amp;quot; series, wherein I explain how to easily get started with &lt;a class="reference external" href="http://blog.aclark.net/2011/08/20/hello-plone/"&gt;various exciting Python technologies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This time, in order to familiarize myself with &lt;a class="reference external" href="http://code.google.com/p/modwsgi/"&gt;mod_wsgi&lt;/a&gt;, I've created a buildout to automate some of the processes explained in:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://code.google.com/p/modwsgi/wiki/QuickInstallationGuide"&gt;http://code.google.com/p/modwsgi/wiki/QuickInstallationGuide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(This series also helps me to subtly introduce the zc.buildout &amp;quot;extendables&amp;quot; I have been working on. More on those in a future post.)&lt;/p&gt;
&lt;div class="section" id="the-extendables"&gt;
&lt;h2&gt;The extendables&lt;/h2&gt;
&lt;p&gt;The extendables make it easy to bootstrap a development environment with complex software requirements, via &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout/1.5.2"&gt;zc.buildout&lt;/a&gt;. In this case, I want to be able to type:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ test-apache test-dir
&lt;/pre&gt;
&lt;p&gt;And get a working, &lt;em&gt;disposable&lt;/em&gt; Apache instance minutes later. I also want that Apache to come with a mod_wsgi app installed and working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;First we use the &lt;a class="reference external" href="https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x"&gt;aforementioned extendable&lt;/a&gt;, like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ virtualenv test-dir
$ cd test-dir
$ bin/pip install zc.buildout
$ bin/buildout init
&lt;/pre&gt;
&lt;p&gt;Edit the buildout.cfg to look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends = https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x
&lt;/pre&gt;
&lt;p&gt;Run buildout:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/buildout
&lt;/pre&gt;
&lt;p&gt;Assuming successful completion, you should be able to run Apache in the foreground via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/supervisord -e debug -n
&lt;/pre&gt;
&lt;p&gt;Now check &lt;a class="reference external" href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This works because the &lt;a class="reference external" href="https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x"&gt;&amp;quot;extendable&amp;quot; (buildout configuration file)&lt;/a&gt; contains:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/conf/app.wsgi.in"&gt;little WSGI app&lt;/a&gt; from the QuickInstallationGuide, templatized via &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.recipe.template/1.9"&gt;collective.recipe.template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a class="reference external" href="https://github.com/ACLARKNET/build/blob/master/apache/2.2.x/httpd.conf.in"&gt;templatized httpd.conf file&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like to automate the process even further with the &lt;a class="reference external" href="https://github.com/ACLARKNET/binfiles/blob/master/test-apache"&gt;following script&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/shmkdir $1
virtualenv-2.6 $1
cd $1
bin/easy_install zc.buildout
bin/buildout init
cat &amp;lt;&amp;lt; EOF &amp;gt; buildout.cfg
[buildout]
extends = https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x
EOF
bin/buildout
bin/supervisord -e debug -n
&lt;/pre&gt;
&lt;p&gt;Thus closing the loop on this blog entry, and making the following possible:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ test-apache test-dir
&lt;/pre&gt;
&lt;p&gt;I've been using my &lt;a class="reference external" href="https://github.com/ACLARKNET/binfiles/blob/master/test-plone"&gt;test-plone&lt;/a&gt; script for years now, and I'm hoping that the test-apache script proves just as useful (especially as Plone moves closer to a WSGI-supporting stack via &lt;a class="reference external" href="http://pypi.python.org/pypi/Zope2/2.13.9"&gt;Zope 2.13&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Hello Plone</title><link href="http://aclark.net/blog/hello-plone.html" rel="alternate"></link><updated>2011-08-20T20:27:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-08-20:hello-plone.html</id><summary type="html">&lt;p&gt;This is a &amp;quot;hello world&amp;quot; style tutorial/application for Plone, aimed squarely at Python developers. I have created a project on Github too, to hold the code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aclark4life/hello_plone"&gt;https://github.com/aclark4life/hello_plone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="step-1-setup"&gt;
&lt;h2&gt;Step 1 - Setup&lt;/h2&gt;
&lt;p&gt;Everyone in the Python world loves virtualenv, so this step will be a familiar one. Inside the hello_plone repo, I first create a virtualenv:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ virtualenv .
&lt;/pre&gt;
&lt;p&gt;I then install some additional tools:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/pip install zc.buildout
&lt;/pre&gt;
&lt;p&gt;As you see, Plone uses Buildout. One day it may not, but for now it does. Get over it. ;-) (Or better yet, help us figure out how to make Buildout optional in Plone. Many would welcome the improvement, and hail you as their conquering hero!) Until then:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/buildout init
&lt;/pre&gt;
&lt;p&gt;Edit your buildout.cfg and put this in it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends = http://raw.github.com/pythonpackages/buildout-plone/master/4.3.x
&lt;/pre&gt;
&lt;p&gt;That's it. Now run buildout:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/buildout
&lt;/pre&gt;
&lt;p&gt;It will take some time to download all the packages, but you only have to do this once. Afterward, you can configure a global packages directory and share that amongst all your development projects. See the &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout/1.5.2#user-defaults"&gt;zc.buildout 1.5.2 page on PyPI&lt;/a&gt; to find out more. When it finishes, do this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/plone fg
&lt;/pre&gt;
&lt;p&gt;Then open &lt;a class="reference external" href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Click the button and follow the steps. You don't need to select any additional add-ons from the list. Afterward, you should get a Plone site here: &lt;a class="reference external" href="http://localhost:8080/Plone"&gt;http://localhost:8080/Plone&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-develop"&gt;
&lt;h2&gt;Step 2 - Develop&lt;/h2&gt;
&lt;p&gt;There are a ton of things you can do in Plone, but it is primarily a &amp;quot;content management system&amp;quot; meaning, &amp;quot;you put your website in it.&amp;quot;¹ And I don't mean your &amp;quot;crazy cool next gen web app&amp;quot; website. I mean your web. site. The one you use for you or your business or church or band or bridge club or whatever. Since this is a &amp;quot;hello world&amp;quot; demonstration, I am going to show you how to start writing Python code whose results will &amp;quot;show up on the screen&amp;quot; in short order. After that, I'll point you to some next steps. So, to develop we need a Python package. Create your own, or use zopeskel (paster wrapped in some &amp;quot;user friendliness&amp;quot;). Or use paster with the zopeskel templates installed.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/pip install zopeskel
$ bin/zopeskel plone_basic my.app

plone: A project for Plone add-ons

…
&lt;/pre&gt;
&lt;p&gt;Now that we have a Python package, we want to &amp;quot;load it in Plone&amp;quot;. To do that, we need to add the package to our buildout. Fortunately, buildout has a mechanism for this particular use case built in. It's called a &amp;quot;develop egg&amp;quot;, and it is configured via the `develop` parameter available in the `buildout` section. Additionally, we need to &amp;quot;tell Plone&amp;quot; about our develop egg too. But this is done in the same way you tell Plone about any other package. You add it to the `eggs` parameter of the `plone.recipe.zope2instance` section. So now we have:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
develop = ./my.app
extends = http://raw.github.com/pythonpackages/buildout-plone/master/4.3.x

[plone]
eggs += my.app
&lt;/pre&gt;
&lt;p&gt;Now let's write some code. We are going to: &amp;quot;wire up a template to a view&amp;quot;, say &amp;quot;hello world!&amp;quot; then &amp;quot;call it a day&amp;quot;. This is accomplished via some &amp;quot;goo&amp;quot; maintained by the &lt;a class="reference external" href="http://docs.zope.org/zopetoolkit/"&gt;Zope Toolkit project&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from Products.Five.browser.pagetemplatefile import
    ViewPageTemplateFile
from zope.publisher.browser import BrowserPage

class Hello(BrowserPage):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;&amp;quot;&amp;quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp; Wire up some goo
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;&amp;quot;&amp;quot;

&amp;nbsp;&amp;nbsp;&amp;nbsp; template = ViewPageTemplateFile('hello.pt')

&amp;nbsp;&amp;nbsp;&amp;nbsp; def __call__(self):
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return self.template()
&lt;/pre&gt;
&lt;p&gt;And it can go in: &lt;strong&gt;*my.app/my/app/hello.py*.&lt;/strong&gt; Now, because Plone uses the &lt;a class="reference external" href="http://pypi.python.org/pypi/zope.component/3.10.0"&gt;Zope component architecture&lt;/a&gt;, we need to &amp;quot;wire up&amp;quot; the &amp;quot;component&amp;quot; we just created. This is done via the &lt;a class="reference external" href="http://pypi.python.org/pypi/zope.configuration/3.7.4"&gt;Zope Configuration Markup Language&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;configure
&amp;nbsp;&amp;nbsp;&amp;nbsp; xmlns:browser=&amp;quot;http://namespaces.zope.org/browser&amp;quot;&amp;gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;browser:page

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for=&amp;quot;*&amp;quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name=&amp;quot;hello&amp;quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; permission=&amp;quot;zope2.View&amp;quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /&amp;gt;

&amp;lt;/configure&amp;gt;
&lt;/pre&gt;
&lt;p&gt;And it goes in: &lt;strong&gt;*my.app/my/app/configure.zcml*&lt;/strong&gt;. It &amp;quot;just works&amp;quot; because we include an &lt;a class="reference external" href="http://pypi.python.org/pypi/z3c.autoinclude/0.3.4"&gt;entry point in our setup.py&lt;/a&gt; to make it so (paster took care of that, in this case.) Lastly, create: &lt;strong&gt;*my.app/my/app/hello.pt.*&lt;/strong&gt; And put &amp;quot;Hello world!&amp;quot; in it. Stop and start Plone (i.e. CTRL-C, bin/plone fg) and then open: &lt;a class="reference external" href="http://localhost:8080/Plone/hello"&gt;http://localhost:8080/Plone/hello&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nice, but a little boring. At the very least, let us get our &amp;quot;hello world!&amp;quot; to show up &amp;quot;in Plone&amp;quot;. To do this, we simply invoke Plone's main_template and insert our text into the main content area. Add the following to &lt;strong&gt;*my.app/my/app/hello.pt.*&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;div metal:use-macro=&amp;quot;here/main_template/macros/master&amp;quot;&amp;gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div metal:fill-slot=&amp;quot;main&amp;quot;&amp;gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, we are using &lt;a class="reference external" href="http://docs.zope.org/zope2/zope2book/ZPT.html"&gt;Zope Page Templates&lt;/a&gt;. ZPTs must be valid XHTML, much to the &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/templates/#templates"&gt;chagrin of Django's creators&lt;/a&gt;. But in addition to the main con: &amp;quot;making humans edit XML is sadistic!&amp;quot;) there are some pros too e.g. &amp;quot;Play nicely with editing tools.&amp;quot; In other words, get over it.  ;-) (Or better yet, add support for using alternative template languages in Plone. I have no idea what the technical feasibility is, but it might be worth some effort.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-fun-profit"&gt;
&lt;h2&gt;Step 3 - Fun/profit!&lt;/h2&gt;
&lt;p&gt;That's not so bad you say? (That is what I am hoping you will say!) Great. Some good next steps are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Theming with Diazo and &lt;a class="reference external" href="http://pypi.python.org/pypi/plone.app.theming/1.0b8"&gt;plone.app.theming&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Content types with Dexterity and &lt;a class="reference external" href="http://pypi.python.org/pypi/plone.app.dexterity/1.0.1"&gt;plone.app.dexterity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Easy through-the-web form generation with &lt;a class="reference external" href="http://pypi.python.org/pypi/Products.PloneFormGen/1.7b5"&gt;PloneFormGen&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, check out the Plone &lt;a class="reference external" href="http://collective-docs.readthedocs.org"&gt;community managed developer documentation&lt;/a&gt; on readthedocs.org for more! ¹ c.f. SNL skit w/Rob Schnieder and/or Adam Sander too, apparently: &lt;a class="reference external" href="http://www.youtube.com/watch?v=muA5EBmpDhA"&gt;http://www.youtube.com/watch?v=muA5EBmpDhA&lt;/a&gt; I like the Rob Schnieder ones better :-)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Plone secrets: Episode 2 - Collective Python buildout</title><link href="http://aclark.net/blog/plone-secrets-episode-2-collective-python-buildout.html" rel="alternate"></link><updated>2011-07-06T12:45:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-07-06:plone-secrets-episode-2-collective-python-buildout.html</id><summary type="html">&lt;p&gt;You know who uses the (Plone) Collective Python buildout? Me neither, because we don't have any good statistics on its use (that I know of).  If it were a Python package, we could at least &lt;a class="reference external" href="http://blog.aclark.net/2011/06/16/youre-so-vain-so-why-not-use-vanity/"&gt;count the number of times it has been downloaded&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You know who should use it? Everyone.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[dramatic pause…]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;OK maybe not everyone, but at least everyone that regularly develops with &lt;strong&gt;multiple versions of Python&lt;/strong&gt;. Here's why.&lt;/p&gt;
&lt;div class="section" id="actively-maintained"&gt;
&lt;h2&gt;Actively maintained&lt;/h2&gt;
&lt;p&gt;Check out the log. It has been going strong for over 3 years.&lt;/p&gt;
&lt;p&gt;If I recall correctly, it was born out of the frustration¹ of having to compile Python on Mac OS X Leopard. Python &lt;em&gt;never&lt;/em&gt; compiles correctly on new versions of OS X (which is a complete mystery to me given that Apple ships with Python, don't they think people will want to compile it?).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easy-to-install"&gt;
&lt;h2&gt;Easy to install&lt;/h2&gt;
&lt;p&gt;Got Subversion? Then you &lt;em&gt;can haz&lt;/em&gt; the Collective Python buildout². You will also need to bootstrap it with whatever Python version you happen to have laying around. I won't go into detail about this; but suffice it to say depending on your OS, one of the following or something like it should work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ aptitude install python2.5
&lt;/pre&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ brew install python
&lt;/pre&gt;
&lt;p&gt;If you are on Windows, give up (unless you have a Microsoft C compiler). Sorry.&lt;/p&gt;
&lt;p&gt;Now, check out the code from the repository (if you are a member of the &lt;a class="reference external" href="http://dev.plone.org/collective"&gt;Collective&lt;/a&gt; and may potentially contribute something back, make sure you use https):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ svn co http://svn.plone.org/svn/collective/buildout/python
&lt;/pre&gt;
&lt;p&gt;Next, bootstrap and run the buildout:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd python
$ python bootstrap.py -d
$ bin/buildout
&lt;/pre&gt;
&lt;p&gt;That's it. The buildout should go merrily on it's way compiling Python 2.4 through 3.2. When it finishes, you can install it in /opt (or wherever you like) with the following command (you might need sudo):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/install-links
&lt;/pre&gt;
&lt;p&gt;Then you should see:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ /bin/ls -1 /opt/local/bin
easy_install-2.4
easy_install-2.5
easy_install-2.6
easy_install-2.7
easy_install-3.2
pip-2.4
pip-2.5
pip-2.6
pip-2.7
pip-3.2
python2.4
python2.5
python2.6
python2.7
python3.2
virtualenv-2.4
virtualenv-2.5
virtualenv-2.6
virtualenv-2.7
virtualenv-3.2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="easy-to-configure"&gt;
&lt;h2&gt;Easy to configure&lt;/h2&gt;
&lt;p&gt;Now you can add &lt;strong&gt;/opt/local/bin&lt;/strong&gt; to your environment PATH variable.  This will make it easy to choose a particular Python, PIP, or Virtualenv at your leisure.&lt;/p&gt;
&lt;p&gt;Unfortunately, if you pip install something, it will end up in the checkout instead of &lt;em&gt;/opt/local/bin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To get around this, I usually pick one Python for daily use, and add its bin directory to my environment PATH variable:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ echo $PATH | tr ':' 'n'
/sbin
/usr/sbin
/usr/local/bin
/opt/local/bin
/Users/aclark/Developer/collective/python/python-2.7/bin
/usr/bin
/bin
/sbin
/usr/X11/bin
&lt;/pre&gt;
&lt;p&gt;After various pip installs, my 2.7 bin directory contains the usual tools of the trade:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ /bin/ls -1 /Users/aclark/Developer/collective/python/
python-2.7/bin
__dotcloud_git_ssh
activate
activate.csh
activate.fish
activate_this.py
bfg2pyramid
checkoutmanager
cloudservers
dotcloud
easy_install
easy_install-2.7
eye
flake8
fsdump
fsoids
fsrefs
fstail
hg
mako-render
mkrelease
paster
pilconvert.py
pildriver.py
pilfile.py
pilfont.py
pilprint.py
pip
pip-2.7
playerpiano
pygmentize
python
python2.7
recorderpiano
repozo
rfc2397
rst2html.py
rst2latex.py
rst2man.py
rst2newlatex.py
rst2odt.py
rst2odt_prepstyles.py
rst2pseudoxml.py
rst2s5.py
rst2xml.py
rstpep2html.py
runzeo
sphinx-autogen
sphinx-build
sphinx-quickstart
vanity
zconfig
zconfig_schema2html
zdaemon
zeoctl
zeopack
zeopasswd
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="wrap-it-up-i-ll-take-it"&gt;
&lt;h2&gt;Wrap it up, I'll take it&lt;/h2&gt;
&lt;p&gt;That's it! There is not too much more to say, other than I hope you find this post useful and will consider using the &lt;a class="reference external" href="http://svn.plone.org/svn/collective/buildout/python"&gt;Collective Python buildout&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, comments are always welcome.&lt;/p&gt;
&lt;div class="section" id="notes"&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;¹ Experienced by its creator, &lt;a class="reference external" href="http://twitter.com/fschulze"&gt;fschulze&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;² It will likely end up on &lt;a class="reference external" href="http://github.com/collective"&gt;Github&lt;/a&gt; at some point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>You&amp;#039;re so vain, so why not use Vanity?</title><link href="http://aclark.net/blog/you039re-so-vain-so-why-not-use-vanity.html" rel="alternate"></link><updated>2011-06-16T12:01:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-06-16:you039re-so-vain-so-why-not-use-vanity.html</id><summary type="html">&lt;p&gt;A few months ago I created a package called &lt;strong&gt;Vanity&lt;/strong&gt;[0] that
provides easy access to package download statistics from &lt;strong&gt;PyPI&lt;/strong&gt;. You
can find the source code here: &lt;a class="reference external" href="https://github.com/aclark4life/vanity"&gt;https://github.com/aclark4life/vanity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I love this tool, and I use it all the time to gauge the value of a
package. Of course, downloads are only one criteria you can use to judge
the value of a package, and arguably not even a very good one.
&lt;strong&gt;Vanity&lt;/strong&gt; itself is a good example of this phenomenon. I find it
incredibly useful, but in it's history it has only been downloaded &lt;em&gt;130&lt;/em&gt;
times.&lt;/p&gt;
&lt;p&gt;Other packages I have created with much less value have been downloaded
more times, e.g. &lt;strong&gt;plonetheme.aclark_twitter&lt;/strong&gt; which has been
downloaded&amp;nbsp; &lt;em&gt;674&lt;/em&gt; times. But that package has also been around much
longer. So obviously another useful metric would be the &lt;em&gt;time period&lt;/em&gt;
during which the downloads occurred.&lt;/p&gt;
&lt;p&gt;Anyway, here is how it works:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ easy_install vanity
&lt;/pre&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vanity &amp;lt;package&amp;gt;
&lt;/pre&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vanity vanity
Package `vanity` has been downloaded 130 times!
&lt;/pre&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vanity plonetheme.aclark_twitter
Package `plonetheme.aclark_twitter` has been downloaded 674 times!
&lt;/pre&gt;
&lt;p&gt;Some of my other favorites:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vanity Django[1]
Package `Django` has been downloaded 302111 times!
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
$ vanity zope.component
Package `zope.component` has been downloaded 210541 times!
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
$ vanity pyramid
Package `pyramid` has been downloaded 26067 times!
&lt;/pre&gt;
&lt;p&gt;Another thing to consider is if hitting &lt;strong&gt;PyPI&lt;/strong&gt; each time is really
necessary. I'm told there is &lt;strong&gt;PyPI&lt;/strong&gt; data living somewhere else, and in
future versions I would like to make vanity use that data by default.&lt;/p&gt;
&lt;p&gt;So, this post is simply to announce &lt;strong&gt;Vanity&lt;/strong&gt; to a wider audience in
the event that some folks may find it useful. Otherwise, I will be happy
to continue to watch &lt;strong&gt;Vanity&lt;/strong&gt; downloads crawl ever so slowly towards
200. :-)&lt;/p&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[0] By standing on the shoulders of some Plone giants, &lt;a class="reference external" href="http://davisagli.com/"&gt;David Glick,&lt;/a&gt;
in particular.&lt;/p&gt;
&lt;p&gt;[1] There is a &lt;a class="reference external" href="https://github.com/aclark4life/vanity/issues/1"&gt;known issue&lt;/a&gt; with regard to making Vanity case
insensitive.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Top 10 reasons &amp;quot;Plone 3.3. Site Admin&amp;quot; book is (still) for you</title><link href="http://aclark.net/blog/top-10-reasons-quotplone-33-site-adminquot-book-is-still-for-you.html" rel="alternate"></link><updated>2011-05-10T13:34:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-05-10:top-10-reasons-quotplone-33-site-adminquot-book-is-still-for-you.html</id><summary type="html">&lt;p&gt;About a year ago, I was frantically trying to finish &lt;a class="reference external" href="http://aclark.net/training"&gt;Plone 3.3 Site
Administration&lt;/a&gt; in time to teach it at Plone Symposium East 2010 (at
Penn State University) as well as publish it. I remember staying up all
night to finish &amp;amp; submit the final drafts then driving 4 hours to Penn
State, then teaching for 8 hours before I was finally able to crash (but
not before consuming a large and delicious cheeseburger and a Yuengling
from the &lt;a class="reference external" href="http://www.pshs.psu.edu/NittanyLionInn/nlhome.asp"&gt;Nittany Lion Inn&lt;/a&gt;room service, yum).&lt;/p&gt;
&lt;p&gt;The class went well and everyone seemed happy with the results (and I am
very grateful to PSU for the opportunity). I remember struggling to get
some Windows users up to speed, so this year I've decided to &amp;quot;require&amp;quot;
students to install Plone before the class (via the &lt;a class="reference external" href="http://plone.org/products/plone/releases/4.0.5"&gt;appropriate
installer for their platform&lt;/a&gt;). Most &amp;quot;site admin-ing&amp;quot; we do will be &amp;quot;ad
hoc&amp;quot; preferably on top of a stand-alone Python installation. But we can
refer to the installer-based Plone as needed (and in fact the
installer-based Plone is all some folks will ever need or want).&lt;/p&gt;
&lt;div class="section" id="the-list"&gt;
&lt;h2&gt;The list&lt;/h2&gt;
&lt;p&gt;Anyway, this post is about this year's class taught from the same
material but updated to account for any changes that have occurred since
the book was first published. Most importantly, it addresses the release
of Plone 4 in the context of the book title &amp;quot;Plone 3.3 Site
Administration&amp;quot;.&lt;/p&gt;
&lt;p&gt;So without further ado, why &amp;quot;Plone 3.3 Site Administration&amp;quot; is (still)
for you:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;The version reference in the title is (mostly) meaningless&lt;/strong&gt;.
&lt;a class="reference external" href="http://www.packtpub.com/books/plone"&gt;PACKT&lt;/a&gt; insist on incorporating a software version number into the
title of their books. I would have called it: &amp;quot;Plone Site
Administration&amp;quot;, or &amp;quot;Buildout for Plone&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The book teaches valuable *techniques*, using Plone 3.3 as an
example&lt;/strong&gt;. Most, if not all of the techniques still apply today (i.e.
w/Plone 4.0.x and Plone 4.1.x). They will likely continue to apply as
long as Plone continues to rely on &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout"&gt;zc.buildout&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plone makes it relatively easy to upgrade&lt;/strong&gt; by providing &lt;a class="reference external" href="http://dist.plone.org/release/4.1b2/versions.cfg"&gt;version
numbers&lt;/a&gt; for all of the packages it requires. In many cases an
upgrade simply involves referring to a newer list of package
versions. In the case of upgrading from Plone 3.3.x to Plone 4.0.x,
the [zope2] section goes away because Zope2 became an egg. (Compare
&lt;a class="reference external" href="http://dist.aclark.net/build/plone/3.3.x/buildout.cfg"&gt;this buildout&lt;/a&gt; with &lt;a class="reference external" href="http://dist.aclark.net/build/plone/4.0.x/buildout.cfg"&gt;this one&lt;/a&gt;.) Also Plone 4 buildouts should be
bootstrapped with Python 2.6 instead of Python 2.4 (as was required
by Plone 3).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python tools &amp;quot;goodness&amp;quot;&lt;/strong&gt;. This book goes to great lengths to
demonstrate how Plone fits &amp;quot;naturally&amp;quot; on top of the Python software
stack. It also includes information about non-Plone-specific
Python-related technologies like &lt;a class="reference external" href="http://packages.python.org/distribute/"&gt;Distribute&lt;/a&gt; and &lt;a class="reference external" href="http://pypi.python.org/pypi/pip"&gt;PIP&lt;/a&gt;. This (in
theory) makes Plone more approachable to &amp;quot;regular&amp;quot; Python folk.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Python buildout&lt;/strong&gt;. One of the most useful things the Plone
community has to offer the Python community at large is the &lt;a class="reference external" href="http://svn.plone.org/svn/collective/buildout/python/"&gt;Python
buildout&lt;/a&gt;. If you do development that requires multiple versions of
Python (e.g. Plone 3.3.x/4.0.x) you could do worse than to rely on
this buildout to provide them (multiple versions) quickly and easily.
The book dances around the subject, but the point is: use it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt;. This book goes to great lengths to demonstrate
the Plone installation process on three popular operating systems:
Mac OS X, Ubuntu Linux, and Windows. The point is to show off how
similar the process is across platforms because Python does all the
hard work, and of course to deal with the cases where it is not
similar (e.g. it's &amp;quot;hard&amp;quot; to compile &lt;a class="reference external" href="http://python.org/download/windows/"&gt;Python on Windows&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add-ons&lt;/strong&gt;! A lot of the value of Plone comes from the ability to
customize it to fit your needs. If that customization has already
been done by some other member of the community, even better. This is
one of the core essences of the Plone community: everyone working
hard to contribute to the available pool of add-ons, and then
&lt;a class="reference external" href="http://plone.org/products"&gt;sharing the results&lt;/a&gt;. This book aims to make you better at
evaluating the myriad of options you may be presented with when you
need to &lt;a class="reference external" href="http://pypi.python.org/pypi"&gt;find and install an add-on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upgrades&lt;/strong&gt;! The final chapter of the book holds your hand and walks
you through an upgrade from Plone 3.3.x to Plone 4.0.x. It doesn't
contain anything you can't find at &lt;a class="reference external" href="http://plone.org/upgrade"&gt;http://plone.org/upgrade&lt;/a&gt; (in
fact it contains much less information), but in the context of a book
full of buildout configuration file examples, it should feel more
like a natural step than an intimidating process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;! The book covers how to deal with security patches,
&lt;em&gt;not&lt;/em&gt; in the common case of when a hotfix is released as a Zope 2
Product or Python egg, but in the &lt;a class="reference external" href="http://dist.aclark.net/build/plone/2.1.x/buildout.cfg"&gt;somewhat more obscure case&lt;/a&gt; where
a newer (non-egg) Zope2 release replaces an older one (with a
vulnerability). The modern equivalent would be a Plone release
post-security-hotfix release. Such releases simply contain a newer
KGS (listing package versions that contain the appropriate fixes).
This &amp;quot;old school&amp;quot; example is included to give readers as broad a
perspective as possible, so that they may better handle anything they
may come across in the wild.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All the boring stuff too&lt;/strong&gt;. This book also walks you through the
remaining &amp;quot;hot&amp;quot; topics not covered yet in this list, all from a heavy
zc.buildout configuration management perspective: site basics (e.g.
customizing navigation), appearance (AKA theming, strictly &amp;quot;old
style&amp;quot; sorry), administration (e.g. mail settings, ldap), deployment
and maintenance (e.g. automating database backups and packing), and
optimization (e.g. load balancing, supervisor, and &lt;a class="reference external" href="http://pypi.python.org/pypi/munin.plone"&gt;munin graphs&lt;/a&gt;!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-training"&gt;
&lt;h2&gt;The training&lt;/h2&gt;
&lt;p&gt;Sound even the &lt;em&gt;slightest&lt;/em&gt; bit interesting? And/or are these things you
&lt;em&gt;need&lt;/em&gt; to know about Plone for your job? If so, then you or your
employees will not want to miss my one day class next week at the &lt;a class="reference external" href="http://weblion.psu.edu/symposium"&gt;Plone
Symposium East 2011&lt;/a&gt;. In case you (or your employees) are interested,
you can sign up here (separate from the symposium):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://aclark.net/training"&gt;http://aclark.net/training&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope to see you there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-service"&gt;
&lt;h2&gt;The service&lt;/h2&gt;
&lt;div class="section" id="baas-buildout-as-a-service"&gt;
&lt;h3&gt;BaaS (Buildout as a Service)&lt;/h3&gt;
&lt;p&gt;(Yes, I am serious)&lt;/p&gt;
&lt;p&gt;And finally for whatever it is worth, many of the lessons learned from
writing the book from the author's perspective ended up here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;dist.aclark.net/build/plone[1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is to say: buildouts are living and breathing things[2]; they are
frequently changing in response to what is going on in the Python
package ecosystem around them (even though their primary goal is to
maintain stability and/or to only change when you want to change). When
a change (like a security fix or configuration change) comes along, the
author pushes changes out to the dist server than deploys the dist
server changes to production.&lt;/p&gt;
&lt;p&gt;[1] DISCLAIMER: Please DO NOT RELY ON this &amp;quot;BaaS example&amp;quot; for anything
important, EVER. It's only here for educational purposes (for now at
least).&lt;/p&gt;
&lt;p&gt;[2] Yeah, I don't get out much :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>In Defense of PyPI</title><link href="http://aclark.net/blog/in-defense-of-pypi.html" rel="alternate"></link><updated>2011-01-31T09:19:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-01-31:in-defense-of-pypi.html</id><summary type="html">&lt;p&gt;Everyone on the &lt;em&gt;Python Planet&lt;/em&gt; is probably already familiar with Peter
Fein's recent article &lt;a class="reference external" href="http://blog.wearpants.org/elitism-and-the-importance-of-pypi"&gt;about PyPI use (or lack thereof).&lt;/a&gt; But in case
not, particularly striking was the number of folks who joined the &amp;quot;PyPI
bashing&amp;quot; in the comments. In fact, it has inspired me to write this post
&amp;quot;in defense of PyPI&amp;quot;. I would like to offer the Python community a
summary of what I think are the general criticisms, along with my
responses as a &amp;quot;sysadmin / developer type&amp;quot;.&lt;/p&gt;
&lt;p&gt;First let me say this: I love PyPI! And I agree with Peter, if your
package isn't on PyPI it&amp;nbsp; &amp;quot;doesn't exist&amp;quot;. I wouldn't put it quite like
that; but I would say it's fairly important if you are publishing open
source Python code, to consider uploading it to the Python Package
Index.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;div class="section" id="because-everybody-wins"&gt;
&lt;h2&gt;Because Everybody Wins&lt;/h2&gt;
&lt;p&gt;Believe it or not, the general Python community is interested in seeing
your code. Whether to use it for an example, or to avoid reinventing the
wheel, or whatever the reason; we'd like a chance to see your code. But
if you don't publish it to PyPI, we may never get that chance!&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;For better or worse, PyPI is the canonical place on Earth for Python
packages. It's the CPAN of Python. I understand that not everyone is
100% comfortable with this, but that doesn't make it any less true. If
you accept that &amp;quot;open source is good&amp;quot;, and that &amp;quot;Python rules&amp;quot;, then you
simply must take this next leap of faith: &amp;quot;PyPI is &lt;em&gt;the&lt;/em&gt; place for
Python packages&amp;quot;.&lt;/p&gt;
&lt;p&gt;[waves hand]&lt;/p&gt;
&lt;p&gt;Moving on, why else should you consider uploading your packages to PyPI?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="because-it-is-the-right-thing-to-do"&gt;
&lt;h2&gt;Because It Is The &amp;quot;Right&amp;quot; Thing To Do&lt;/h2&gt;
&lt;p&gt;Another thing that struck me is the number of folks who (appear to)
confuse &amp;quot;version control&amp;quot; with &amp;quot;distribution&amp;quot;. If I'm not mistaken,
Launchpad, Github, and Bitbucket are primarily designed for Bazaar, Git,
and Mercurial hosting respectively. These sites can host your
distribution tarballs, but they certainly weren't &lt;em&gt;designed and built&lt;/em&gt;
to do so. Rather, they were designed and built to host your source code.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;In some cases, a project may wish to host it's own &lt;a class="reference external" href="http://dist.plone.org/"&gt;distribution
server&lt;/a&gt;. Whether it be for redundancy (although PyPI has begun to
tackle this) or &amp;quot;branding&amp;quot; or other reasons, I would argue this is the
preferred way of handling it: &lt;em&gt;in addition to uploading to PyPI, not in
place of it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="because-it-is-not-that-hard"&gt;
&lt;h2&gt;Because It Is Not That Hard&lt;/h2&gt;
&lt;p&gt;Ahem… we get it. The situation with easy_install is &amp;quot;less than ideal&amp;quot;.
But this is something to be fixed, not avoided. If you are receiving too
many support requests, may I suggest &lt;a class="reference external" href="http://blog.jazkarta.com/2010/05/15/installing-plone-without-buildout/#comment-162"&gt;simply telling people not to use
easy_install&lt;/a&gt;. Or, if the problem is proper packaging, learn how to
&lt;a class="reference external" href="http://groups.google.com/group/pylons-devel/msg/abfe9e7a43f62594"&gt;test your packages&lt;/a&gt; before uploading them. Due to the large number of
screwed up releases I've made, I've come to rely on a&lt;a class="reference external" href="http://pypi.python.org/pypi/Products.PloneSoftwareCenter"&gt;local PyPI&lt;/a&gt; and
a virtualenv to test installations. Others use &lt;a class="reference external" href="http://groups.google.com/group/pylons-devel/msg/696c69843eecd026"&gt;even simpler methods&lt;/a&gt;.
And with tools like &lt;a class="reference external" href="http://pypi.python.org/pypi/jarn.mkrelease"&gt;mkrelease,&lt;/a&gt; it's easy to upload your package to
multiple PyPI locations with just a single command (although
leaping-tall-buildings-in-a single-bound is not yet supported.)&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;The point is, please consider helping the community fix the problem
rather than simply avoiding it. There are folks &lt;a class="reference external" href="http://wiki.python.org/moin/Distutils/SprintParis"&gt;actively trying to
improve the situation&lt;/a&gt; right now.&lt;/p&gt;
&lt;p&gt;Let's see, what else?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="because-it-does-not-have-to-be-perfect"&gt;
&lt;h2&gt;Because It Does Not Have To Be Perfect&lt;/h2&gt;
&lt;p&gt;Over the years I've seen various and sundry criticisms of the PyPI user
interface. Fine. I have not looked into the current development process,
but I assume the author/maintainers would be open to some constructive
criticism and/or development assistance.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;It doesn't have to be Github-sexy to be useful. If you would like to
report a bug or feature request, do it &lt;a class="reference external" href="http://sourceforge.net/tracker/?group_id=66150"&gt;here&lt;/a&gt; (at least, I think that
is the right place.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this convinces at least some folks to consider uploading their
packages to PyPI. If it doesn't, please let me know why in the comments.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;&lt;em&gt;Did you enjoy reading this article? If so, please consider `helping me
help Plone`_.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>New Year’s Python Meme</title><link href="http://aclark.net/blog/new-years-python-meme.html" rel="alternate"></link><updated>2009-12-31T18:22:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2009-12-31:new-years-python-meme.html</id><summary type="html">&lt;img alt="images/lenin_packaging.png" src="images/lenin_packaging.png" style="width: 100%;" /&gt;
&lt;div class="section" id="whats-the-coolest-python-application-framework-or-library-you-have-discovered-in-2009"&gt;
&lt;h2&gt;What’s the coolest Python application, framework or library you have discovered in 2009?&lt;/h2&gt;
&lt;p&gt;That would be &lt;a class="reference external" href="http://zenoss.org"&gt;Zenoss&lt;/a&gt;. I'm very impressed with the application as well as the community, which is awesome. They remind me a lot of the Plone community; I think the two can learn a lot from each other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-new-programming-technique-did-you-learn-in-2009"&gt;
&lt;h2&gt;What new programming technique did you learn in 2009?&lt;/h2&gt;
&lt;p&gt;Generally speaking, I'm happy with my progress as a Plone integrator, plowing through the tremendous Plone code stack, on my way to complete mastery. I may never get there, but I'm having fun trying. In other words, I know a lot more about how far the Zope2/CMF/Five rabbit hole goes. If I had to pick, I'd choose Grok in Plone, mostly as it relates to Dexterity: &lt;a class="reference external" href="http://plone.org/products/dexterity/documentation/manual/five.grok"&gt;http://plone.org/products/dexterity/documentation/manual/five.grok&lt;/a&gt;. I created &lt;a class="reference external" href="http://plone.org/products/collective-project"&gt;http://plone.org/products/collective-project&lt;/a&gt; as a result, or rather, I converted the package to use Dexterity types so I could learn Dexterity, in part ;-). At first I was angry at being &amp;quot;forced&amp;quot; to use Grok techniques in Plone, but then it grew on me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whats-the-name-of-the-open-source-project-you-contributed-the-most-in-2009-what-did-you-do"&gt;
&lt;h2&gt;What’s the name of the open source project you contributed the most in 2009? What did you do?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I dug out from &lt;a class="reference external" href="http://plone.org/events/conferences/2008-washington-dc"&gt;Plone Conference 2008&lt;/a&gt;, which included publishing the &lt;a class="reference external" href="http://plone.org/events/conferences/2008-washington-dc/agenda"&gt;videos and slides&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I helped move plone.org to &lt;a class="reference external" href="http://sixfeetup.com"&gt;Six Feet Up&lt;/a&gt;, and have been looking after &lt;a class="reference external" href="http://dev.plone.org/plone/browser/Products.PloneOrg/trunk"&gt;it&lt;/a&gt; as well as &lt;a class="reference external" href="http://plone.org/news/plone-domain-dns-changes"&gt;other infrastructure issues&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I worked on a book called 'Plone Site Admin', which will most likely come out in early 2010 (via &lt;a class="reference external" href="http://packtpub.com"&gt;Packt&lt;/a&gt;). I hope the community will find it useful.&lt;/li&gt;
&lt;li&gt;I contributed a &lt;a class="reference external" href="http://dev.plone.org/plone/ticket/9330"&gt;new feature&lt;/a&gt; to Plone 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-was-the-python-blog-or-website-you-read-the-most-in-2009"&gt;
&lt;h2&gt;What was the Python blog or website you read the most in 2009?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://planet.plone.org"&gt;Planet Plone&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-the-three-top-things-you-want-to-learn-in-2010"&gt;
&lt;h2&gt;What are the three top things you want to learn in 2010?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zenoss.org"&gt;Zenoss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wsgi.org/wsgi/"&gt;WSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dev.plone.org/plone/browser/buildouts/plone-coredev/branches/4.0"&gt;Plone 4 core development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy (Python) New Year everyone!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry></feed>