<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alex Clark - Python Web Developer</title><link href="http://aclark.net/blog/" rel="alternate"></link><link href="http://aclark.net/blog/feeds/all.atom.xml" rel="self"></link><id>http://aclark.net/blog/</id><updated>2013-02-22T10:00:00-05:00</updated><entry><title>Built with Plone, Powered By GitHub Pages</title><link href="http://aclark.net/blog/2013/02/22/built-with-plone-powered-by-github-pages/" rel="alternate"></link><updated>2013-02-22T10:00:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-02-22:2013/02/22/built-with-plone-powered-by-github-pages/</id><summary type="html">&lt;p&gt;&lt;em&gt;Is Plone the next great static website generator? Probably not, but it definitely could be&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I am always looking for ways to improve, streamline and otherwise hack my e-life. And this post is about all of the above.&lt;/p&gt;
&lt;img alt="/blog/images/httrack.png" src="/blog/images/httrack.png" /&gt;
&lt;div class="section" id="plone-in-the-cloud"&gt;
&lt;h2&gt;Plone in the cloud&lt;/h2&gt;
&lt;p&gt;Plone is still too &amp;quot;heavy&amp;quot; to easily run &amp;quot;in the cloud&amp;quot;, but it's getting there. In particular, I find this effort by David Bain very inspiring:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pigeonflight/stack-python-plone"&gt;https://github.com/pigeonflight/stack-python-plone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And based on my experiments and research on Heroku:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aclark4life/zope2-heroku"&gt;https://github.com/aclark4life/zope2-heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only &amp;quot;real&amp;quot; remaining issue seems to be packaging; we need this PLIP to happen sooner, rather than later:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://dev.plone.org/ticket/13283"&gt;https://dev.plone.org/ticket/13283&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cheating"&gt;
&lt;h2&gt;Cheating&lt;/h2&gt;
&lt;p&gt;In the meantime, one way you can cheat is to export the contents of your Plone site with &lt;a class="reference external" href="http://www.httrack.com/"&gt;httrack&lt;/a&gt; then host the results for free on &lt;a class="reference external" href="http://pages.github.com"&gt;GitHub Pages&lt;/a&gt; (i.e. &amp;quot;the cloud&amp;quot;)&lt;/p&gt;
&lt;p&gt;This process if far from perfect &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;, but in a pinch it can work. And it recently worked very well for me so I thought I'd share. See:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://aclark.net"&gt;http://aclark.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclarknet.github.com"&gt;https://github.com/ACLARKNET/aclarknet.github.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These links are my website, and GitHub Pages repository respectively. The website was created with Plone (&lt;a class="reference external" href="https://github.com/ACLARKNET/new_style"&gt;https://github.com/ACLARKNET/new_style&lt;/a&gt;) then exported via httrack, then uploaded to GitHub Pages (to the gh-pages branch of any repo except &amp;lt;{org,user}&amp;gt;&amp;gt;.github.com repos).&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;httrack got &amp;quot;stuck&amp;quot; on my &amp;#64;&amp;#64;search links, and I've got a lot of duplicate content now. Fortunately I don't mind editing lots and lots of text files :-).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In doing this, I was able to turn off my $11/month &amp;quot;website and IRC server&amp;quot; which makes the CFO happy. And in a year or so with Plone 5, hopefully I'll be able to return to the cloud and edit content &amp;quot;live&amp;quot; again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What do you think about Plone as a static site generator and/or Plone in the cloud? Let me know in the comments below!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>I love checkoutmanager and dotfiles</title><link href="http://aclark.net/blog/2013/02/08/i-love-checkoutmanager-and-dotfiles/" rel="alternate"></link><updated>2013-02-08T12:00:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-02-08:2013/02/08/i-love-checkoutmanager-and-dotfiles/</id><summary type="html">&lt;p&gt;&lt;em&gt;An ode to my OS X development workstation setup&lt;/em&gt; &lt;a class="footnote-reference" href="#id11" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I am big on setting up my development environment, and enjoying the environment I work in. And I'm very thankful to the folks who make my life easier, including the authors of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ohloh.net/p/python/contributors/summary"&gt;Python&lt;/a&gt;: Python Core Developers&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/dotfiles"&gt;dotfiles&lt;/a&gt;: Jon Bernard&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/checkoutmanager"&gt;checkoutmanager&lt;/a&gt;: Reinout Van Rees&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also love &lt;strong&gt;repetition&lt;/strong&gt;. So picture if you will, a new &lt;strong&gt;Macbook Air or Pro&lt;/strong&gt; ready to serve as my development workstation. I like to perform, and study, the steps required to turn a new laptop in to my development workstation. So here we go. In this article, I will walk through the steps required to turn a new machine in to my developer workstation. Do follow along!&lt;/p&gt;
&lt;div class="section" id="shell"&gt;
&lt;h2&gt;Shell&lt;/h2&gt;
&lt;p&gt;One of the first things I do on a new system is change my shell to &lt;strong&gt;Zsh&lt;/strong&gt; in &lt;tt class="docutils literal"&gt;System Preferences &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Users &amp;amp; Groups &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Current User &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Right Click &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Advanced &lt;span class="pre"&gt;Options...&lt;/span&gt;&lt;/tt&gt;. Don't forget to &lt;tt class="docutils literal"&gt;Click the lock to make changes&lt;/tt&gt; first.&lt;/p&gt;
&lt;img alt="/blog/images/zsh.png" src="/blog/images/zsh.png" /&gt;
&lt;div class="section" id="zsh"&gt;
&lt;h3&gt;Zsh&lt;/h3&gt;
&lt;p&gt;Why &lt;strong&gt;Zsh&lt;/strong&gt;? One of my favorite features is &lt;strong&gt;shared history between open sessions&lt;/strong&gt;. So I can run a command in one window, and then run the same command from another window by fetching it from the history (with CTRL-R).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xcode"&gt;
&lt;h2&gt;XCode&lt;/h2&gt;
&lt;p&gt;After I take possession of my new laptop (running &lt;strong&gt;Mountain Lion&lt;/strong&gt;, the newest OS X at the time of this writing), I head to the App Store to download XCode. &lt;a class="footnote-reference" href="#id12" id="id2"&gt;[2]&lt;/a&gt; Among many other things, XCode gives me the GNU C Compiler and allows me to type &amp;quot;gcc&amp;quot; in my &lt;tt class="docutils literal"&gt;Applications &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Utilities &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Terminal&lt;/tt&gt;.&lt;/p&gt;
&lt;img alt="/blog/images/gcc.png" src="/blog/images/gcc.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;img alt="/blog/images/homebrew.png" src="/blog/images/homebrew.png" /&gt;
&lt;p&gt;Now I need a Python interpreter &lt;a class="footnote-reference" href="#id13" id="id4"&gt;[3]&lt;/a&gt;. For development I use the &lt;a class="reference external" href="https://github.com/collective/buildout.python"&gt;Collective Python Buildout&lt;/a&gt; but I also enjoy using &lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;Homebrew's&lt;/a&gt; Python 2.7. I use Homebrew for a variety of other things too (e.g. mobile-shell AKA mosh) so here we go:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&amp;quot;
&lt;/pre&gt;
&lt;p&gt;… follow instructions …&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ brew install python
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="git"&gt;
&lt;h2&gt;Git&lt;/h2&gt;
&lt;p&gt;I think OS X (or XCode) includes git, but just in case:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ brew install git
&lt;/pre&gt;
&lt;p&gt;Which reminds me, don't forget that installing the command line utilities in Mountain Lion's XCode requires an additional step in &lt;tt class="docutils literal"&gt;Preferences &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Downloads &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Command Line Tools &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; Install&lt;/tt&gt;:&lt;/p&gt;
&lt;img alt="/blog/images/command-line-utils.png" src="/blog/images/command-line-utils.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;Dotfiles&lt;/h2&gt;
&lt;p&gt;At this point, I can begin to get serious about turning this new machine in to my developer workstation. And that means: &lt;strong&gt;installing my private ssh key&lt;/strong&gt; so I can check out code without typing a password, of course. Normally this would be tedious, but with git and dotfiles it's not so bad. This is what I do from my home directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone https://super_secret_url/dotfiles.git Dotfiles
&lt;/pre&gt;
&lt;p&gt;I use https which requires a password for the first time only. Then I edit &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Dotfiles/.git/config&lt;/span&gt;&lt;/tt&gt; and change the repository URL to &lt;tt class="docutils literal"&gt;git&amp;#64;super_secret_url/dotfiles.git&lt;/tt&gt;. So every subsequent pull and push will require no password. And to &amp;quot;install&amp;quot; these dotfiles, I do &lt;a class="footnote-reference" href="#id16" id="id6"&gt;[6]&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install dotfiles
$ dotfiles -s --force
&lt;/pre&gt;
&lt;p&gt;Note: the dotfiles command finds my dotfiles in the default directory &amp;quot;Dotfiles&amp;quot; and create symbolic links to them.&lt;/p&gt;
&lt;div class="section" id="distribute-pip"&gt;
&lt;h3&gt;Distribute &amp;amp; Pip&lt;/h3&gt;
&lt;p&gt;Homebrew's Python includes pip, but even if it didn't:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl -O http://python-distribute.org/distribute_setup.py
$ /usr/local/bin/python distribute_setup.py
$ {easy_install, pip install} dotfiles
&lt;/pre&gt;
&lt;p&gt;In other words, you can always install Distribute &lt;a class="footnote-reference" href="#id14" id="id7"&gt;[4]&lt;/a&gt;. After which you can use &lt;tt class="docutils literal"&gt;easy_install&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; to install dotfiles. (You can read up on the differences. TL;DR: neither is &amp;quot;better&amp;quot; or &amp;quot;worse&amp;quot;, it's just a question of which tradeoffs you are willing to make. I tend to use pip just because it's newer and I like its requirements.txt feature, but easy_install is still very well supported as part of the Distribute project.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;Checkoutmanager&lt;/h2&gt;
&lt;p&gt;Now I need some things to develop. Since I work on a bunch of different projects, I need a way to keep track of what should be checked out at any given time. So I do this &lt;a class="footnote-reference" href="#id15" id="id9"&gt;[5]&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install checkoutmanager
$ checkoutmanager co
&lt;/pre&gt;
&lt;p&gt;This creates and populates my &lt;tt class="docutils literal"&gt;~/Developer&lt;/tt&gt; directory with code. And it &amp;quot;just works&amp;quot; because I keep a &lt;tt class="docutils literal"&gt;.checkoutmanager.cfg&lt;/tt&gt; in my Dotfiles repository. It currently looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[aclark]
basedir = /Users/aclark/Developer/aclark
checkouts =
    git&amp;#64;github.com:aclark4life/aclark4life.github.com.git resume
    git&amp;#64;github.com:aclark4life/desktops.git
    git&amp;#64;github.com:aclark4life/hireme.git
    git&amp;#64;github.com:aclark4life/projects.git
    git&amp;#64;github.com:aclark4life/reinstall.git
    git&amp;#64;github.com:ACLARKNET/tweets.git
    git&amp;#64;github.com:aclark4life/usesthis.git
vcs = git

[alt]
basedir = /Users/aclark/Developer/alt
checkouts =
    git&amp;#64;github.com:alt-aclark-net/alt-aclark-net.github.com.git
    git&amp;#64;github.com:alt-aclark-net/dexter.git
    git&amp;#64;github.com:alt-aclark-net/headstraight.git
vcs = git

[buildout]
basedir = /Users/aclark/Developer/buildout
checkouts =
    git&amp;#64;github.com:collective/buildout.bootstrap.git
    git&amp;#64;github.com:buildout/buildout.git
    git&amp;#64;github.com:buildout/buildout.github.com.git
vcs = git

[distribute]
basedir = /Users/aclark/Developer
checkouts = ssh://hg&amp;#64;bitbucket.org/tarek/distribute
vcs = hg

[clients]
basedir = /Users/aclark/Developer
checkouts =
; Bunch o client repos
vcs = git

[clients-hg]
basedir = /Users/aclark/Developer
checkouts =
; Bunch o client repos
vcs = hg

[dcpython]
basedir = /Users/aclark/Developer/dcpython
checkouts =
    git&amp;#64;github.com:DCPython/dcpython.github.com.git
    git&amp;#64;github.com:DCPython/pyramid-tutorials.git
vcs = git

[misc]
basedir = /Users/aclark/Developer
checkouts =
    git&amp;#64;github.com:ACLARKNET/aclarknet.github.com.git blog
    git&amp;#64;github.com:ACLARKNET/new_style.git
    git&amp;#64;github.com:aclark4life/binfiles.git
;    git&amp;#64;github.com:aclark4life/pyramid_python_3.git
    git&amp;#64;github.com:aclark4life/vanity.git
    git&amp;#64;github.com:aclark4life/zope2-heroku.git
    git&amp;#64;github.com:aclark4life/zope2_bootstrap.git
    git&amp;#64;github.com:codekoala/django-axes.git
    git&amp;#64;github.com:collective/buildout.python
vcs = git

[pillow]
basedir = /Users/aclark/Developer/pillow
checkouts =
    git&amp;#64;github.com:python-imaging/Pillow.git
    git&amp;#64;github.com:python-imaging/python-imaging.github.com.git
vcs = git

[plethorasociety]
basedir = /Users/aclark/Developer/plethorasociety
checkouts =
    git&amp;#64;github.com:plethorasociety/plethorasociety.github.com.git
vcs = git

[plone]
basedir = /Users/aclark/Developer/plone
checkouts =
    git&amp;#64;github.com:aclark4life/Plone-Debug-Assistant.git
    git&amp;#64;github.com:aclark4life/collective.recipe.bluebream.git
    git&amp;#64;github.com:aclark4life/event_days_indexer.git
    git&amp;#64;github.com:aclark4life/hello_plone.git
    git&amp;#64;github.com:aclark4life/mr_migrator_demo.git
    git&amp;#64;github.com:aclark4life/parse2plone.git
    git&amp;#64;github.com:aclark4life/plone_1_fun.git
    git&amp;#64;github.com:aclark4life/plone_addon_upgrade.git
    git&amp;#64;github.com:aclark4life/plone_guide.git
    git&amp;#64;github.com:aclark4life/plone_workflow_events.git
    git&amp;#64;github.com:aclark4life/schemaextender-facetednav-demo.git
    git&amp;#64;github.com:aclark4life/silly_content_import.git
    git&amp;#64;github.com:aclark4life/transmogrify.extract.git
    git&amp;#64;github.com:aclark4life/transmogrify.regexp.git
    git&amp;#64;github.com:aclark4life/viewlets_dont_suck.git
    git&amp;#64;github.com:aclark4life/wordpress2plone.git
    git&amp;#64;github.com:collective/Products.AttachmentField.git
    git&amp;#64;github.com:collective/Products.CalendarX.git
    git&amp;#64;github.com:collective/Products.EventRegistration.git
    git&amp;#64;github.com:collective/Products.PloneSoftwareCenter.git
    git&amp;#64;github.com:collective/Products.ifQuotes.git
    git&amp;#64;github.com:collective/Products.naked_plone.git
    git&amp;#64;github.com:collective/buildout.plonetest.git
    git&amp;#64;github.com:collective/collective.contacts.git
    git&amp;#64;github.com:collective/collective.controlpanel.edit_css.git
    git&amp;#64;github.com:collective/collective.developermanual.git
    git&amp;#64;github.com:collective/collective.formtoy.git
    git&amp;#64;github.com:collective/collective.github.com.git
    git&amp;#64;github.com:collective/collective.googleanalytics.git
    git&amp;#64;github.com:collective/collective.package.git
    git&amp;#64;github.com:collective/collective.project.git
    git&amp;#64;github.com:collective/collective.recaptcha.git
    git&amp;#64;github.com:collective/collective.recipe.grp.git
    git&amp;#64;github.com:collective/collective.recipe.rsync.git
    git&amp;#64;github.com:collective/collective.rip.git
    git&amp;#64;github.com:collective/collective.stats.git
    git&amp;#64;github.com:collective/funnelweb.git
    git&amp;#64;github.com:collective/github-collective.git
    git&amp;#64;github.com:collective/mr.migrator.git
    git&amp;#64;github.com:collective/plonecom-buildout.git
    git&amp;#64;github.com:collective/plonecom.theme.git
    git&amp;#64;github.com:collective/plonetheme.coolblue.git
    git&amp;#64;github.com:collective/plonetheme.freshpick.git
    git&amp;#64;github.com:collective/plonetheme.grungeera.git
    git&amp;#64;github.com:collective/plonetheme.keepitsimple.git
    git&amp;#64;github.com:collective/plonetheme.unilluminated.git
    git&amp;#64;github.com:collective/transmogrify.filesystem.git
    git&amp;#64;github.com:plone/Installers-OS-X.git
    git&amp;#64;github.com:plone/Products.PloneOrg.git
    git&amp;#64;github.com:plone/admin-docs.git
    git&amp;#64;github.com:plone/buildout.coredev.git
    git&amp;#64;github.com:plone/planet.plone.org.git
    git&amp;#64;github.com:plone/plone.api.git
    git&amp;#64;github.com:plone/plone.github.com.git
    git&amp;#64;github.com:plone/ploneorg.admin.git
    git&amp;#64;github.com:plone/plonetheme.ploneorg.git
vcs = git

[pythonpackages]
basedir = /Users/aclark/Developer/pythonpackages
checkouts =
    git&amp;#64;github.com:aclark4life/buildout-apache-mysql.git
    git&amp;#64;github.com:aclark4life/buildout-munin.git
    git&amp;#64;github.com:aclark4life/buildout-mysql.git
    git&amp;#64;github.com:aclark4life/buildout-nginx.git
    git&amp;#64;github.com:aclark4life/buildout-plone-haproxy.git
    git&amp;#64;github.com:aclark4life/buildout-plone-varnish.git
    git&amp;#64;github.com:aclark4life/buildout-zenoss.git
    git&amp;#64;bitbucket.org:pythonpackages/pythonpackages.com.git vanity_app
    git&amp;#64;github.com:pythonpackages/buildout-apache-modwsgi.git
    git&amp;#64;github.com:pythonpackages/buildout-bluebream.git
    git&amp;#64;github.com:pythonpackages/buildout-django.git
    git&amp;#64;github.com:pythonpackages/buildout-jenkins.git
    git&amp;#64;github.com:pythonpackages/buildout-plone-getpaid.git
    git&amp;#64;github.com:pythonpackages/buildout-plone.git
    git&amp;#64;github.com:pythonpackages/buildout-wordpress.git
    git&amp;#64;github.com:pythonpackages/buildout-zope2.git
    git&amp;#64;github.com:pythonpackages/experimental.pythonpackages.git
    git&amp;#64;github.com:pythonpackages/github-services.git pythonpackages-github-services
    git&amp;#64;github.com:pythonpackages/pyramidpypi.git pythonpackages-index
    git&amp;#64;github.com:pythonpackages/pythonpackages-blog.git
    git&amp;#64;github.com:pythonpackages/pythonpackages-docs.git
    git&amp;#64;github.com:pythonpackages/pythonpackages-graphs.git
    git&amp;#64;github.com:pythonpackages/pythonpackages-paste.git
    git&amp;#64;github.com:pythonpackages/pythonpackages-scaffolds.git
    git&amp;#64;github.com:pythonpackages/pythonpackages.sendpickedversions.git
    git&amp;#64;github.com:pythonpackages/pythonpackages-whiskers.git
    git&amp;#64;github.com:pythonpackages/pythonpackages.git
vcs = git

[toys]
basedir = /Users/aclark/Developer/toys
checkouts =
    git&amp;#64;github.com:aclark4life/basic_pyramid_zodb.git
    git&amp;#64;github.com:aclark4life/github_repos_cloner.git
    git&amp;#64;github.com:aclark4life/other.git
    git&amp;#64;github.com:aclark4life/python_study.git
    git&amp;#64;github.com:aclark4life/django-hello.git
vcs = git
&lt;/pre&gt;
&lt;p&gt;Now it's time to bootstrap the Collective Python Buildout, which gives me &lt;strong&gt;all versions of Python, ever&lt;/strong&gt; &lt;a class="footnote-reference" href="#id17" id="id10"&gt;[7]&lt;/a&gt;. And off we go:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd Developer/buildout.python
$ python bootstrap.py
&lt;/pre&gt;
&lt;p&gt;Finally, there is some PATH configuration required to make all of this seemless. The Collective Python Buildout gets installed in /opt while brew's stuff is in /usr/local. My PATH config currently looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
export PATH=/usr/local/bin:/usr/local/sbin:/opt/local/bin:/Users/aclark/Developer/buildout.python/python-2.7/bin:$PATH
export PATH=~/Developer/binfiles:/usr/local/share/npm/bin:$PATH
&lt;/pre&gt;
&lt;p&gt;With the above configuration, I default to the Python 2.7 in the Collective Python Buildout. That means that is the &amp;quot;python&amp;quot; or &amp;quot;virtualenv&amp;quot; I get when I type those commands. I use the full path or expanded binary name when I need them e.g. /usr/local/bin/python or python3.3.&lt;/p&gt;
&lt;p&gt;That's it! I hope you will check out dotfiles and checkoutmanager for all your development needs.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id11" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Not really an ode: &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Ode"&gt;http://en.wikipedia.org/wiki/Ode&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id12" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I know about Kenneth Reitz's XCode Command line Tools only, but if I recall correctly there is some &amp;quot;gotcha&amp;quot; that has bitten me more than once if I use that instead of the full XCode. I wish I could remember what it was now, but it's not coming to me. If it works for you though, great!&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id13" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I know about the system Python, and for small things like checkoutmanager and dotfiles I don't mind using it. But there is merit in avoiding it because Apple treats it like &amp;quot;their&amp;quot; Python and makes decisions for you that you may prefer to make yourself. E.g. I believe they use a crippled version of the readline library.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id14" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id7"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Distribute is a more actively maintained fork of the venerable setuptools library (which itself is built on top of the Python standard library's distutils). Are we having fun yet?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id15" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id9"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I also alias checkoutmanager to cm :-)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id16" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id6"&gt;[6]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I force because I want to replace the newly created .ssh dir with the one I keep in my Dotfiles repository.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id17" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id10"&gt;[7]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Well, 2.4 through 3.3 at last count.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Django"></category><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Please Help Me Do Open Source Work</title><link href="http://aclark.net/blog/2013/01/31/please-help-me-do-open-source-work/" rel="alternate"></link><updated>2013-01-31T13:00:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-31:2013/01/31/please-help-me-do-open-source-work/</id><summary type="html">&lt;p&gt;&lt;em&gt;From my 'mid-life-crisis' series of blog entries :-)&lt;/em&gt;&lt;/p&gt;
&lt;img alt="images/open-source-work.png" src="images/open-source-work.png" /&gt;
&lt;div class="section" id="open-source-work"&gt;
&lt;h2&gt;Open Source Work&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Open Source Work&lt;/strong&gt; has paid my bills for a long time. Starting with &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt; in the early 2000s, to &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; in the early 2010s, to now. And for this, I am very grateful. To be clear: it's not exactly the &lt;em&gt;Open Source Work&lt;/em&gt; that has paid my bills, it's the consulting work I've been able to secure as a result of my dedication and devotion to open source software and communities. Which is great! (Even more clear: my dedication and devotion to open source software and communities has made learning new skills fun. And those skills have paid my bills for the past 8 years.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: Open Source Work is awesome. I'll likely spend my entire life doing it (in some capacity or another). And while Open Source Work does not pay, the experience is invaluable.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="saas-offering"&gt;
&lt;h2&gt;SaaS Offering&lt;/h2&gt;
&lt;p&gt;Along the way, I caught the &amp;quot;startup bug&amp;quot; and have been interested in building a SaaS offering that would at least pay my bills, if not make me fantastically wealthy. Enter 2012's: &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;. The year I spent doing pythonpackages.com work was awesome. I learned a lot. Traveled. Met a lot of cool folks who seemed genuinely interested in my idea(s). But unfortunately, I never made a dime doing it. The lesson, among others, is that &lt;strong&gt;SaaS offerings are hard&lt;/strong&gt;. I am now semi-focused on a &amp;quot;reboot&amp;quot; of the pythonpackages.com idea(s), but that's going to take a while to get going.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: Consulting *was* the dream. Now building a SaaS offering *is* the dream (among others). So where does Open Source Work fit in?&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="play-as-work"&gt;
&lt;h2&gt;Play as Work&lt;/h2&gt;
&lt;p&gt;I've been &amp;quot;working for a living&amp;quot; since age 14. Back then, I was a busboy and dishwasher in my family's Italian restaurant, where I first learned to &lt;strong&gt;work hard and have fun doing it&lt;/strong&gt;. Since then, I've always worked hard, had fun, and taken few vacations (except for 1994-1998 when I was a full time CS student). I suspect I will always &amp;quot;work for a living&amp;quot; though as I get older, the line between work and play becomes even blurrier. Everyone wants to love or at least like their work. But very few are able to turn their play in to paid work. That's what I want to do. And I am very fortunate, I think, to know what I want to do in life. I know middle aged folk that still don't know the answer to that question.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR: liking my work *was* the dream. Now turning the things I like to do into paid work *is* the dream. In 2013, I would like to spend more time doing Open Source Work, working on projects like&lt;/strong&gt; &lt;a class="reference external" href="http://github.com/buildout"&gt;Buildout&lt;/a&gt;, &lt;a class="reference external" href="http://dcpython.org"&gt;DC Python&lt;/a&gt;, &lt;a class="reference external" href="http://github.com/python-imaging"&gt;Pillow&lt;/a&gt;, &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt;, &lt;a class="reference external" href="http://github.com/codekoala/django-axes"&gt;django-axes&lt;/a&gt;, &lt;a class="reference external" href="http://resume.aclark.net/projects/#collective"&gt;et al&lt;/a&gt;. &lt;strong&gt;If you have benefited from my work on any of these projects, directly or indirectly, please consider making a&lt;/strong&gt; &lt;a class="reference external" href="https://www.gittip.com/aclark4life"&gt;gittip donation&lt;/a&gt; &lt;strong&gt;to help me do more Open Source Work in 2013.&lt;/strong&gt;&lt;/p&gt;
&lt;script data-gittip-username="aclark4life"
src="https://www.gittip.com/assets/widgets/0002.js"&gt;
&lt;/script&gt;&lt;/div&gt;
</summary><category term="Django"></category><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Python 3 Porting</title><link href="http://aclark.net/blog/2013/01/10/python-3-porting/" rel="alternate"></link><updated>2013-01-10T19:15:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-10:2013/01/10/python-3-porting/</id><summary type="html">&lt;p&gt;&lt;em&gt;The 3 in 2013 is for Python 3&lt;/em&gt;&lt;/p&gt;
&lt;img alt="images/python-3-port.jpg" src="images/python-3-port.jpg" /&gt;
&lt;p&gt;I tend to like projects that everyone else &lt;strong&gt;hates&lt;/strong&gt;, e.g.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Removing persistent Python objects associated with missing classes in ZODB.&lt;/li&gt;
&lt;li&gt;Making new releases for old software that is still useful but unmaintained.&lt;/li&gt;
&lt;li&gt;Running flake8 on 10s or 100s of source files and hand-fixing the results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part of this has to do with &lt;strong&gt;repetition&lt;/strong&gt;. I know how to do these things, and I like doing them. Over and over. If someone says, &amp;quot;my Data.fs file is broken&amp;quot; I get excited. Anyway, I hope you get the idea.&lt;/p&gt;
&lt;div class="section" id="i-am-your-man"&gt;
&lt;h2&gt;I am your man&lt;/h2&gt;
&lt;p&gt;Which brings me to the subject of this post: &lt;strong&gt;Python 3 Porting&lt;/strong&gt;. I've been helping out porting the Python Imaging Library to Python 3 (via the Pillow fork, where I am the release manager). And it strikes me as the type of thing I'd be very interested in doing professionally. So, if you or your company are in need of a &amp;quot;workhorse&amp;quot; to plow through old code and update it, &lt;a class="reference external" href="http://aclark.net/team/alex-clark"&gt;I am your man&lt;/a&gt;. Please do &lt;a class="reference external" href="mailto:info&amp;#64;aclark.net"&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-in-it-for-you"&gt;
&lt;h2&gt;What's in it for you&lt;/h2&gt;
&lt;p&gt;Now I know what you are thinking: &lt;strong&gt;porting Python 2 software to Python 3 is a lot of work for little gain&lt;/strong&gt;. Maybe. Maybe not. I'm not going to try to convince you otherwise, however I will tell you this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For me, 2013 is &amp;quot;the year of Python 3&amp;quot;. I've now promised to deliver and maintain a &lt;strong&gt;Python 3 compatible PIL by PyCon 2013&lt;/strong&gt;. I now care about Python 3 (this was not true before).&lt;/li&gt;
&lt;li&gt;The Python 3 Wall of Shame is now the &lt;a class="reference external" href="https://python3wos.appspot.com/"&gt;Python 3 Wall of Superpowers&lt;/a&gt;. We are over the hump.&lt;/li&gt;
&lt;li&gt;Many popular Python web frameworks support or are about to support Python 3 e.g. CherryPy, Django, Pyramid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, there is no time like the present to &lt;strong&gt;take a serious look at Python 3&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Django"></category><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Pillow Python 3</title><link href="http://aclark.net/blog/2013/01/10/pillow-python-3/" rel="alternate"></link><updated>2013-01-10T12:15:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-10:2013/01/10/pillow-python-3/</id><summary type="html">&lt;p&gt;PIL is on its way to &lt;strong&gt;Python 3&lt;/strong&gt; via Pillow. Support from Brian Crowell and others has been merged into master here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python-imaging/Pillow/pull/35"&gt;https://github.com/python-imaging/Pillow/pull/35&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And work continues toward a pre &lt;strong&gt;PyCon 2013&lt;/strong&gt; release! Please help if you can:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ubuntu users, read through &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues/18"&gt;https://github.com/python-imaging/Pillow/issues/18&lt;/a&gt; and provide assistance with testing this Ubuntu package: &lt;a class="reference external" href="https://launchpad.net/~pythoneers/+archive/ppa"&gt;https://launchpad.net/~pythoneers/+archive/ppa&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Git experts, please comment on the merge issue described here: &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/pull/35"&gt;https://github.com/python-imaging/Pillow/pull/35&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Everyone else, please git clone the master branch for testing: &lt;strong&gt;git://github.com/python-imaging/Pillow.git&lt;/strong&gt; and report issues as you find them: &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues"&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you!&lt;/p&gt;
</summary><category term="Python"></category></entry><entry><title>About My Work</title><link href="http://aclark.net/blog/2013/01/10/about-my-work/" rel="alternate"></link><updated>2013-01-10T11:45:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-10:2013/01/10/about-my-work/</id><summary type="html">&lt;p&gt;Regarding some of the criticism or objection to some of the content of my blog entries, etc., here are my thoughts:&lt;/p&gt;
&lt;div class="section" id="i-hear-you"&gt;
&lt;h2&gt;I hear you&lt;/h2&gt;
&lt;p&gt;No one is more critical of my work than me. If you have feedback, criticism, etc. then please do let me know. I consider very carefully every request I receive, and I make every attempt to be cordial and accommodating. The place to do that for &lt;strong&gt;this blog&lt;/strong&gt; is currently:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclarknet.github.com/issues"&gt;https://github.com/ACLARKNET/aclarknet.github.com/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or for folks without a GitHub account (i.e. anonymous):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/aclarknet/blog/issues"&gt;https://bitbucket.org/aclarknet/blog/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or just email me:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Or add a comment below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="controversial-entries-explained"&gt;
&lt;h2&gt;Controversial Entries Explained&lt;/h2&gt;
&lt;p&gt;I'd also like to clarify my intentions with regard to two of my most recent and somewhat controversial entries:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zen of Zope&lt;/li&gt;
&lt;li&gt;Plone Kitty&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They are intended to be &lt;em&gt;pro&lt;/em&gt; Zope and &lt;em&gt;pro&lt;/em&gt; Plone. Yes, Zope can be complex. But it's also useful. And full of &amp;quot;been there, done that&amp;quot; wisdom. Yes, the simple days of Plone Kitty are gone, but there are many great things ahead. Let's carry the best of the past forward into the future.&lt;/p&gt;
&lt;p&gt;I don't always state my intentions this explicitly: because that is no where near as fun for me. But I don't want folks to get the wrong impression either, so please help me get the message right if you can.&lt;/p&gt;
&lt;p&gt;As always, thanks for reading.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Hello Plone Again</title><link href="http://aclark.net/blog/2013/01/09/hello-plone-again/" rel="alternate"></link><updated>2013-01-09T15:30:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-09:2013/01/09/hello-plone-again/</id><summary type="html">&lt;p&gt;Regarding my recent &amp;quot;Goodbye Plone&amp;quot; post:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's come to my attention that the style of my departure post, and associated actions, may be perceived poorly. I'm sorry. This was not my intention, and I apologize if I've upset anyone. The Plone Community deserves the best, so let me see what I can do to address this.&lt;/li&gt;
&lt;li&gt;Several folks have reached out to express their concern about my departure, I appreciate this very much.&lt;/li&gt;
&lt;li&gt;While I stand behind my need to distance myself from such conflicts, I don't want to give the Plone Community or the outside world the wrong impression.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, let me say this: I'm thinking about what happened today, and I'm going to comment about it in the future. I.e. after 24 hours or so. Regardless of future updates, please consider me: &amp;quot;around in some capacity, but not as fully engaged for personal reasons&amp;quot; :-). This is an attempt to revert my abrubt departure, while at the same time not fully re-engaging until such time as I can determine the best course of action. Note that above all, and aside from my personal and professional goals, I don't want to be disruptive to the community if I can help it.&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Goodbye Plone</title><link href="http://aclark.net/blog/2013/01/09/goodbye-plone/" rel="alternate"></link><updated>2013-01-09T13:30:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-09:2013/01/09/goodbye-plone/</id><summary type="html">&lt;p&gt;After experiencing an unexpectedly negative reaction in #plone to my most recent post &amp;quot;Introducing The Plone Kitty&amp;quot; (which was intended to be light-hearted and fun), I have decided to leave the Plone community for good. I wish you all the best! It's been fun.&lt;/p&gt;
&lt;p&gt;To be clear: I'll still be doing some Plone consulting as part of my &amp;quot;day job&amp;quot; at ACLARK.NET, LLC. But I won't be participating in any community events because it has become clear to me that my vision for Plone, and the Plone Community, may be inconsistent with the vision held by other members of the core team.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Introducing The Plone Kitty</title><link href="http://aclark.net/blog/2013/01/09/introducing-the-plone-kitty/" rel="alternate"></link><updated>2013-01-09T12:15:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2013-01-09:2013/01/09/introducing-the-plone-kitty/</id><summary type="html">&lt;p&gt;&lt;em&gt;Actually: re-introducing the Plone Kitty from Plone 1!&lt;/em&gt;&lt;/p&gt;
&lt;img alt="images/plone-kitty.png" src="images/plone-kitty.png" /&gt;
&lt;p&gt;&lt;em&gt;Plone Kitty&lt;/em&gt; is the name of a theme (then called &amp;quot;skin&amp;quot;) that shipped with the earliest versions of &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt; (1.1 in the image above). This was a simpler time when the web was new, and everything was possible!&lt;/p&gt;
&lt;p&gt;Today, we know that the &lt;strong&gt;web is hard&lt;/strong&gt;. While everything is still possible, building the web requires a tremendous amount of hard work. But it doesn't have to be all drudgery. There is still quite a bit of fun to be had building the web, if you know where to look (in addition to all the unavoidable hard work).&lt;/p&gt;
&lt;p&gt;Enter: Plone. Both the web and Plone have changed drastically since The Plone Kitty once prowled the internet. And while the Plone Kitty is all but extinct, Plone lives on; continously modernizing itself to keep up with the fast pace of today's modern web.&lt;/p&gt;
&lt;p&gt;From the &lt;a class="reference external" href="http://plone-1-fun.herokuapp.com"&gt;Plone Kitty website&lt;/a&gt; (now running on Heroku!):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
If you used Plone &amp;quot;back in the day&amp;quot; (early 2000s), please add a comment below about your experiences then. If you are new to Plone or just curious about it now, please add a comment below about your initial impressions.
&lt;/pre&gt;
&lt;p&gt;So if you'd like to add &lt;strong&gt;your bit of nostalgia&lt;/strong&gt;, or first impressions of Plone, &lt;a class="reference external" href="http://plone-1-fun.herokuapp.com/#disqus"&gt;please do so here&lt;/a&gt;. I appreciate any and all comments.&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>New Year's Python Meme 2012</title><link href="http://aclark.net/blog/2012/12/29/new-years-python-meme-2012/" rel="alternate"></link><updated>2012-12-29T15:30:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-12-29:2012/12/29/new-years-python-meme-2012/</id><summary type="html">&lt;img alt="images/tarek-meme-reminder.png" src="images/tarek-meme-reminder.png" /&gt;
&lt;p&gt;&lt;em&gt;This is my entry for Tarek Ziadé's New Year's Python Meme, a tradition I have come to enjoy. Both to reflect on the current year and look back on previous years. So here it is.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I did this in &lt;a class="reference external" href="http://blog.aclark.net/2009/12/31/new-years-python-meme/"&gt;2009&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="http://blog.aclark.net/2011/12/21/new-years-python-meme-2011/"&gt;2011&lt;/a&gt;. Let's try it again.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. What’s the coolest Python application, framework or library you have discovered in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That would be &lt;a class="reference external" href="http://docs.python-requests.org/en/latest/"&gt;Kenneth Reitz's Requests&lt;/a&gt;. Like many others, I've been bitten by the elegance and simplicity bug that is inherent and ingrained in the Requests library. Primarily, I used it to build pythonpackages.com. In particular, I used it to communicate with the almost-equally-elegant (IMHO) GitHub API. This is why I like requests (among other reasons): I don't need to use a &amp;quot;third party&amp;quot; library to communicate with the GitHub API. Such libraries (I think) attempt to make my job easier by hiding complexity and presenting simpler APIs to use. This is sometimes necessary, but no substitute for &lt;em&gt;really&lt;/em&gt; and &lt;em&gt;actually&lt;/em&gt; simple APIs and good documentation (both of which GitHub and Kenneth provide, with their respective APIs.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. What new programming technique did you learn in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript: check. Unit testing: check. These are techniques I have learned enough of to be effective in my &amp;quot;day job&amp;quot; (I'm self-employed). But I learned (finally) that I am primarily: a Python Web Developer. And it feels good to say that. I use Python, and related web technologies to build web applications for my clients. I typically only care to learn enough of a technology to get my job done, then I lose interest (for the most part). That's because I'm also a Hacker. I identify significantly with this monicker because it fits who I am and how I conduct myself professionally. I care about getting the job done above all else. And if there is a job to be done, my intellectual curiosity knows no bounds. If the job is done, I'm going to play guitar. So whatever the technique, I'll learn it if it's something I care about for whatever reason.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Which open source project did you contribute to the most in 2012 ? What did you do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the first year that Plone did not consume my every moment. I also spent significant time working on &lt;a class="reference external" href="https://github.com/buildout"&gt;Buildout&lt;/a&gt; (INI-config-driven system to install Python packages and other software, &amp;amp; perform other related and miscellaneous tasks) and &lt;a class="reference external" href="https://github.com/python-imaging"&gt;Pillow (PIL fork)&lt;/a&gt;. With the help of many others, I hope to get a Python 3.3 compatible release of Pillow out by PyCon 2013. And I'll support Buildout &amp;lt; 2.x until such time as Buildout 2.x goes mainstream.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Which Python blog or website did you read the most in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Planets: Django, Mozilla, Plone, Python. Reddits: Python. Other feeds: Hacker News &amp;amp; Tech Crunch. I added Tech Crunch this year to satisfy my &amp;quot;startup itch&amp;quot;, as was recommended to me by Jonathon Perrelli of Fortify.vc in DC.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. What are the three top things you want to learn in 2013?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How to hustle. Hustling, and more hustling. I've gained a lot (enough?) technical skill over the years. Now I want to put that skill to good use in business. I've managed to remain self-employed for a number of years, now I'd like to employ others full time, build successful businesses and otherwise &amp;quot;expand my empire&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. What is the top software, application or library you wish someone would write in 2013?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope that I get more significant time to put into my &amp;quot;baby&amp;quot;: &lt;a class="reference external" href="https://github.com/pythonpackages"&gt;pythonpackages.com&lt;/a&gt;. In particular, I'm considering adding a Travis-like service which would spawn Windows VMs to run tests and produce executables for Python packages (to address a particular pain point I've discovered along the way: people want to support Windows, but often don't have the ability to do so easily.)&lt;/p&gt;
&lt;p&gt;Happy (Python) New Year!&lt;/p&gt;
&lt;p&gt;Want to do your own list? Here's how:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Copy-paste the questions and answer to them in your blog&lt;/li&gt;
&lt;li&gt;Tweet it with the &lt;a class="reference external" href="https://twitter.com/search/realtime?q=%232012pythonmeme&amp;amp;src=typd"&gt;#2012pythonmeme&lt;/a&gt; hashtag&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Django"></category><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>The Zen of Zope, by Alex Clark</title><link href="http://aclark.net/blog/2012/12/09/the-zen-of-zope-by-alex-clark/" rel="alternate"></link><updated>2012-12-09T18:00:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-12-09:2012/12/09/the-zen-of-zope-by-alex-clark/</id><summary type="html">&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; import other
The Zen of Zope, by Alex Clark


Beautiful is an attribute of ugly.
Explicit is implemented by implicit.
Simple is provided by complex.
Complex is directly provided by complicated.
Flat only implements nested.
Sparse has tagged value dense.
Readability count is not in range.
Special cases could not adapt the rules.
Practicality implements purity.
Errors should never require a specification that doesn’t extend the specification of silence.
Unless explicit is a multi-adapter.
In subscribing to ambiguity, return all the objects that refuse the temptation to guess.
There should be none-- and preferably only zero --output from a handler.
Although that way may not be obvious at first unless you've registered an adapter hook
Now is verified by never.
Although never is not implemented by *right* now.
If the implementation is hard to explain, it queries the bad idea utility.
If the implementation is easy to explain, it may query the good idea utility.
Implicit namespace packages are one honking great idea -- let's do more of those!
&lt;/pre&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Plone Guide</title><link href="http://aclark.net/blog/2012/11/23/plone-guide/" rel="alternate"></link><updated>2012-11-23T08:30:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-11-23:2012/11/23/plone-guide/</id><summary type="html">&lt;div class="section" id="who"&gt;
&lt;h2&gt;Who&lt;/h2&gt;
&lt;p&gt;For anyone new to my blog, welcome. I am Alex Clark: Python Web Developer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what"&gt;
&lt;h2&gt;What&lt;/h2&gt;
&lt;p&gt;Recently with a tweet, I announced the start of a new personal project:&lt;/p&gt;
&lt;img alt="images/tweet.png" src="images/tweet.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="when"&gt;
&lt;h2&gt;When&lt;/h2&gt;
&lt;p&gt;I have tentatively scheduled this project to be completed by the end of 2013, because it's important to set a deadline.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where"&gt;
&lt;h2&gt;Where&lt;/h2&gt;
&lt;p&gt;This project will be hosted on one of my current favorite websites: &lt;a class="reference external" href="http://readthedocs.org"&gt;http://readthedocs.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;p&gt;I think about Plone a lot as it relates to my current professional work. And I have more thoughts than I can currently keep track of in blogs, tweets, etc. So I decided to make an effort to write them all down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;I think a lot about what other people think about Plone, so I decided this book will feature comments from the general public in it. E.g.:&lt;/p&gt;
&lt;img alt="images/comments.png" src="images/comments.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="how-much"&gt;
&lt;h2&gt;How much?&lt;/h2&gt;
&lt;p&gt;This book will be free. But if you'd like to support its development, please &lt;a class="reference external" href="http://gittip.com/aclark4life"&gt;gittip me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There's not much to it yet, but feel free to head over and add some comments: &lt;a class="reference external" href="https://plone-guide.readthedocs.org/en/latest/"&gt;https://plone-guide.readthedocs.org/en/latest/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Pillow 1-7-8</title><link href="http://aclark.net/blog/2012/11/02/pillow-1-7-8/" rel="alternate"></link><updated>2012-11-02T11:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-11-02:2012/11/02/pillow-1-7-8/</id><summary type="html">&lt;p&gt;&lt;em&gt;Pillow is the &amp;quot;friendly&amp;quot; PIL fork. Initially just a packaging fork, now considering image code bug fixes and Python 3 support. To be friendly, we attempt to track changes against upstream tickets in PIL.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Pillow 1.7.8 is out! Read about it here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/Pillow/1.7.8"&gt;http://pypi.python.org/pypi/Pillow/1.7.8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="features"&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's PIL (Python Imaging Library)&lt;/li&gt;
&lt;li&gt;It installs on all modern systems &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Win32 eggs are provided (special thanks to Takayuki Shimizukawa)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="changes"&gt;
&lt;h2&gt;Changes&lt;/h2&gt;
&lt;p&gt;This release includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Removed doctests.py that made tests of other packages fail. [thomasdesvenain]&lt;/li&gt;
&lt;li&gt;Fix opening psd files with RGBA layers when A mode is not of type 65535 but 3. Fixes issue &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues/3"&gt;https://github.com/python-imaging/Pillow/issues/3&lt;/a&gt; [thomasdesvenain]&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;To install Pillow:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ easy_install Pillow
&lt;/pre&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install Pillow
&lt;/pre&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python setup.py install (inside the extracted zip)
&lt;/pre&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install zc.buildout
$ buildout init
&lt;/pre&gt;
&lt;p&gt;With &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
parts = pillow

[pillow]
recipe = zc.recipe.egg
&lt;/pre&gt;
&lt;p&gt;And:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ buildout
&lt;/pre&gt;
&lt;p&gt;(Note: easy_install &amp;amp; pip each handle namespace packages differently, so you should choose one or the other, and not mix the two.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="report-issues"&gt;
&lt;h2&gt;Report issues&lt;/h2&gt;
&lt;p&gt;If you find an issue, please report it here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues"&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Better yet: please fork, fix, and submit a pull request. Please also solicit for peer review once the pull request has been submitted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="discussion"&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;
&lt;p&gt;You may discuss issues related to PIL, Pillow, and Python imaging on the image-sig list:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mail.python.org/mailman/listinfo/image-sig"&gt;http://mail.python.org/mailman/listinfo/image-sig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enjoy using Pillow!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If it doesn't, please report it: &lt;a class="reference external" href="https://github.com/python-imaging/Pillow/issues"&gt;https://github.com/python-imaging/Pillow/issues&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>Django Hello</title><link href="http://aclark.net/blog/2012/10/23/django-hello/" rel="alternate"></link><updated>2012-10-23T13:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-23:2012/10/23/django-hello/</id><summary type="html">&lt;p&gt;Django doesn't really need a hello world style introduction, its documentation speaks for itself. But this is what &lt;strong&gt;Hello World&lt;/strong&gt; in Django looks like to me. I hate boilerplate and I love reducing software down to its core components; just enough to start the server.&lt;/p&gt;
&lt;p&gt;setup.py:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from setuptools import setup

setup(
    name='hello',
)
&lt;/pre&gt;
&lt;p&gt;requirements.txt:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Django==1.4.1
-e .
&lt;/pre&gt;
&lt;p&gt;settings.py:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from hello import urls


DEBUG = True
ROOT_URLCONF = urls
&lt;/pre&gt;
&lt;p&gt;urls.py:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from django.conf.urls import patterns

urlpatterns = patterns(
    '',
    (r'', 'hello.views.index'),
)
&lt;/pre&gt;
&lt;p&gt;views.py:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from django.http import HttpResponse
import datetime


# Based on https://docs.djangoproject.com/en/1.4/topics/http/views/
def index(request):
    &amp;quot;&amp;quot;&amp;quot;
    This function takes a Django request object and returns a 'Hello World'
    style response, by wrapping some HTML in a Django response object.
    &amp;quot;&amp;quot;&amp;quot;

    now = datetime.datetime.now()
    html = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;It is now %s.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; % now
    return HttpResponse(html)
&lt;/pre&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git clone this-repo
$ cd this-repo
$ virtualenv .
$ bin/pip install -r requirements.txt
$ bin/django-admin.py runserver --settings=hello.settings
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;The above code can be found here:&lt;/em&gt; &lt;a class="reference external" href="https://github.com/aclark4life/django-hello"&gt;https://github.com/aclark4life/django-hello&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Consider a&lt;/em&gt;&lt;/p&gt;
&lt;iframe style="border: 0; margin: 0; padding: 0;"
        src="https://www.gittip.com/aclark4life/widget.html"
        width="48pt" height="20pt"&gt;&lt;/iframe&gt;&lt;p&gt;&amp;lt;3&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Django"></category><category term="Python"></category></entry><entry><title>Plone Secrets 5: The Community</title><link href="http://aclark.net/blog/2012/10/23/plone-secrets-5-the-community/" rel="alternate"></link><updated>2012-10-23T11:30:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-23:2012/10/23/plone-secrets-5-the-community/</id><summary type="html">&lt;p&gt;This is a &lt;strong&gt;non-technical&lt;/strong&gt; post on the Plone community, why it's so great, how it functions, and some details that may help one understand it from the outside looking in (AKA The &amp;quot;secrets&amp;quot;)&lt;/p&gt;
&lt;div class="section" id="size-and-activity"&gt;
&lt;h2&gt;Size and Activity&lt;/h2&gt;
&lt;p&gt;The Plone community is &lt;strong&gt;HUGE&lt;/strong&gt;. I don't have any numbers handy, but I'm sure there is as much if not more activity going on in the Plone Community right now as there is in the White House &amp;quot;reelection department&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="structure"&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;p&gt;The Plone community consists (roughly) of Founders, Contributors, and Users. It has formalized itself into a &lt;strong&gt;501(c)(3) organization&lt;/strong&gt; with a corresponding board and membership. The board conducts business to &amp;quot;protect and promote Plone&amp;quot; on behalf of the community and the foundation members (but not necessarily board members) are all recognized contributors. Contributors control the speed and direction of the project. Some of the contributors are:&lt;/p&gt;
&lt;div class="section" id="teams"&gt;
&lt;h3&gt;Teams&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;The Framework Team&lt;/strong&gt; (arguably the most important team, next to the core developers themselves &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[0]&lt;/a&gt;.) Responsible for &amp;quot;evaluating PLIPS for inclusion in Plone&amp;quot;. PLIPS are &amp;quot;Plone Improvement Proposals&amp;quot; used to convey the message: &amp;quot;I want to add this feature to (or remove from) Plone core and I, or the others listed here, will do the work.&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Documentation Team&lt;/strong&gt; (arguably equally as important) Responsible for documenting the Plone software for developers and end users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The QA Team&lt;/strong&gt; (arguably… oh hell they're all important) Responsible for making sure the software is suitable for consumption by developers and end users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Marketing Team&lt;/strong&gt; Responsible for promoting Plone to prospective consumers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The AI Team&lt;/strong&gt; (Admin Infrastructure) &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[1]&lt;/a&gt; Responsible for maintaining software and systems infrastructure for the community.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internationalization Team&lt;/strong&gt; Responsible for translating Plone's user interface text into multiple language.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security team&lt;/strong&gt; Responsible for addressing complex security issues with Plone core software.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And more…&lt;/strong&gt; I'm sure I missed some teams, feel free to check out the entire list here: &lt;a class="reference external" href="http://plone.org/team"&gt;http://plone.org/team&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="factions"&gt;
&lt;h3&gt;Factions&lt;/h3&gt;
&lt;p&gt;As is common in the world at large, the Plone community is comprised of various factions. From circles of friends, to the hundreds of Plone consulting firms, to the business sectors that embrace Plone (e.g. non-profits). These factions may never, in their lifetimes, interact with one another but they are critical to the success of Plone. (It would be a shame if they didn't, which is why we have the annual Plone Conference).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="individuals"&gt;
&lt;h3&gt;Individuals&lt;/h3&gt;
&lt;p&gt;Finally, we have the noteworthy individuals of the project. These include the Founders, Board Presidents, Release Managers, Core Developers, and more. Most especially this includes &lt;strong&gt;YOU&lt;/strong&gt;. If you have contributed to the Plone project in any way large or small, your work is appreciated.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="greatness"&gt;
&lt;h2&gt;Greatness&lt;/h2&gt;
&lt;p&gt;What's great is that it all works. I am struck by how much the Plone Community is a microcosm of the world. Especially during election time in the United States, I've been thinking a lot about &amp;quot;how the world works&amp;quot; and I see the same patterns everywhere. Not everyone:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Enjoys the same activities&lt;/li&gt;
&lt;li&gt;Shares the same beliefs&lt;/li&gt;
&lt;li&gt;Likes the same people&lt;/li&gt;
&lt;li&gt;Has the same goals&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But when you share a common goal e.g. Running a country, or a city, or a state, or business, or a community, or a project, you find ways to get along. Individuals work with other individuals, factions work with other factions, teams works with others teams, projects ship their product to the world. In this case, I'm looking forward to the Plone project shipping its product to the world for the next 10 years or more.&lt;/p&gt;
&lt;p&gt;Good luck to us all!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Consider a&lt;/em&gt;&lt;/p&gt;
&lt;iframe style="border: 0; margin: 0; padding: 0;"
        src="https://www.gittip.com/aclark4life/widget.html"
        width="48pt" height="20pt"&gt;&lt;/iframe&gt;&lt;p&gt;&amp;lt;3&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[0]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I'm not listing the core developers because there are over 100 of them and they don't formally meet as far as I know. But of course, without the Founders and Core Developers none of us would be here. So a very special thanks to them as well.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Term coined by Wyn Williams&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Why Split The Lists</title><link href="http://aclark.net/blog/2012/10/22/why-split-the-lists/" rel="alternate"></link><updated>2012-10-22T01:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-22:2012/10/22/why-split-the-lists/</id><summary type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The Plone community consists (roughly) of Founders, Contributors, and Users. It has formalized itself into a 501(c)(3) software foundation with a corresponding board and membership. The board conducts business on behalf of the community and the board and foundation members are all recognized contributors. Both the board and the membership have their own private mailing list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="issue"&gt;
&lt;h2&gt;Issue&lt;/h2&gt;
&lt;p&gt;Over the years, issues have been raised on the membership list that have led to more discussion than all of the foundation membership are comfortable with. And some have expressed that concern (usually without addressing the orginal concern or &amp;quot;topic&amp;quot; of the thread).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fix"&gt;
&lt;h2&gt;Fix&lt;/h2&gt;
&lt;p&gt;While I am quite confident that folks can manage their own &lt;strong&gt;INBOXES&lt;/strong&gt; (or should be able to), I'm not confident that folks (myself included) can resist engaging with others over issues like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &amp;quot;religious&amp;quot; aspect (The Plone community is better than this!)&lt;/li&gt;
&lt;li&gt;The practical aspect (Everyone can just control themselves!)&lt;/li&gt;
&lt;li&gt;The miscommunication (You are obviously &amp;quot;wrong&amp;quot; about XYZ which I won't address but rather suggest you stop!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To me, the fix is simple. Do the most practical thing and split the lists into: Membership-announce and Membership-discuss (note: discussions with the board list are a different matter.) This says nothing about the health of the community (which is strong), it just means: announce is for important information like &amp;quot;please renew your foundation membership&amp;quot; and discuss is for hashing out issues that foundation members care about.&lt;/p&gt;
&lt;p&gt;As someone who volunteers to help maintain the lists for the community, I don't take this suggestion lightly but I think it's the right thing to do to move forward and make the most number of people happy. That said, if a vote decides otherwise I am OK with that, but I'll be curbing the amount of discussion I would actually like to do on the membership list.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Review of Aspeli's Professional Plone 4 Development</title><link href="http://aclark.net/blog/2012/10/20/review-of-aspelis-professional-plone-4-development/" rel="alternate"></link><updated>2012-10-20T19:15:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-20:2012/10/20/review-of-aspelis-professional-plone-4-development/</id><summary type="html">&lt;p&gt;&lt;em&gt;I owe PACKT a review of this book, so here it is.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First: I liked it. Second: I appreciate Aspeli writing it. Third: Like many others, I couldn't wait for it to come out. Fourth: I know that it was a &lt;strong&gt;TON OF WORK&lt;/strong&gt; and &lt;strong&gt;PROBABLY NOT WORTH THE MONEY&lt;/strong&gt; to write it. So why write a Plone book? A few reasons (other than money):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's good for you&lt;/li&gt;
&lt;li&gt;It's good for the community&lt;/li&gt;
&lt;li&gt;It's good for Plone&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you care about Plone: please go buy both an electronic and paper version of this book &lt;strong&gt;RIGHT NOW&lt;/strong&gt; &lt;a class="footnote-reference" href="#id5" id="id1"&gt;[0]&lt;/a&gt;. While you are at it, please pick up a copy of &lt;strong&gt;Plone 3.3 Site Administration&lt;/strong&gt;. It's quite good, and I hear the author is a &lt;strong&gt;swell guy&lt;/strong&gt; who would appreciate your generosity &lt;a class="footnote-reference" href="#id6" id="id2"&gt;[1]&lt;/a&gt; &lt;a class="footnote-reference" href="#id7" id="id3"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="what-i-like"&gt;
&lt;h2&gt;What I like&lt;/h2&gt;
&lt;p&gt;First let me cover what I &lt;strong&gt;ABSOLUTELY LOVE&lt;/strong&gt; about this book.&lt;/p&gt;
&lt;div class="section" id="buildout-eggs"&gt;
&lt;h3&gt;buildout:eggs&lt;/h3&gt;
&lt;img alt="images/buildout.png" src="images/buildout.png" /&gt;
&lt;p&gt;Aspeli correctly addresses one of my biggest pet peeves (concerns) about what I believe to be an &lt;strong&gt;ANTI-PATTERN&lt;/strong&gt; in almost every Plone buildout: buildout:eggs (referring to the eggs parameter of the buildout section; it does not exist, other than as a convenient variable setting).&lt;/p&gt;
&lt;p&gt;If you know me, you know I've spoken about this before and whilst I've moved on from harping on it I will say this: with most software that uses ini-style configuration files when you set a parameter you expect something to happen. But since Buildout is more complicated than the average software that uses ini-style configuration, that expectation is not always met.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-ons"&gt;
&lt;h3&gt;Add-ons&lt;/h3&gt;
&lt;img alt="images/addons.png" src="images/addons.png" /&gt;
&lt;p&gt;Did you see? You might have missed it. No mention of &lt;strong&gt;Products&lt;/strong&gt; WHAT-SO-EVER. &amp;quot;Product&amp;quot; was a term that Zope2 used for Python libraries that enhanced the functionality of Zope2, and it stuck. Now, it should die in favor of a term everyone else in the world is familiar with (in this context): add-on. Well played, Aspeli. Well played.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-review"&gt;
&lt;h2&gt;The Review&lt;/h2&gt;
&lt;p&gt;I will now talk about each chapter briefly. This will be TL;DR-style, but I hope you'll get a nice idea for why this book is so great. Every imaginable detail for each section is covered in the book in painstaking detail by Aspeli. If you have any questions, please don't hesitate to ask them in the comments.&lt;/p&gt;
&lt;div class="section" id="chapter-1-plone-in-context"&gt;
&lt;h3&gt;Chapter 1: Plone in Context&lt;/h3&gt;
&lt;p&gt;In which we learn what, why &amp;amp; when Plone is, plus a bit more. My favorite sub-section is: Plone-the-application and Plone-the-framework, in which Aspeli describes the phenomenon of Plone the application being used by some folks as a generic Python web framework. Plone's strengh and indeed its raison d'etre (reason to exist) is to provide a fully-featured CMS web application suitable for immediate use, or use immediately after a few simple customizations. So if you try to use it as a web framework, you may not get exactly what you expect (because it was not designed to be used that way).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-2-introduction-to-the-case-study"&gt;
&lt;h3&gt;Chapter 2: Introduction to the Case Study&lt;/h3&gt;
&lt;p&gt;In which we learn how a professional may execute a typical website project with Plone. This is a nice little chapter with some great details about the fictional project that will be executed throughout the remainder of the book: requirements, mockups, and information architecture are the highlights here; as well as the necessary CMS details like users, groups, and content types.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-3-the-development-environment"&gt;
&lt;h3&gt;Chapter 3: The Development Environment&lt;/h3&gt;
&lt;p&gt;In which we learn about how to setup an environment in which you can customize Plone to suit your needs. TL;DR: fairly typical Python development environment &lt;a class="footnote-reference" href="#id8" id="id4"&gt;[3]&lt;/a&gt; with additional Plone details covered: Buildout recipes, development libraries, and more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-4-basics-of-customization"&gt;
&lt;h3&gt;Chapter 4: Basics of Customization&lt;/h3&gt;
&lt;p&gt;In which we learn about the technical architecture of Plone: ZODB, GenericSetup, Zope2 CMF, Zope Component Architecture, and more (!). And the best way to implement your requirements within that architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-5-developing-a-site-strategy"&gt;
&lt;h3&gt;Chapter 5: Developing a Site Strategy&lt;/h3&gt;
&lt;p&gt;In which we learn about how to bundle your customizations into a Python package for general use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-6-security-and-workflow"&gt;
&lt;h3&gt;Chapter 6: Security and Workflow&lt;/h3&gt;
&lt;p&gt;In which we learn about how Plone implements generic web application features and how you can customize that implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-7-using-add-ons"&gt;
&lt;h3&gt;Chapter 7: Using Add-ons&lt;/h3&gt;
&lt;p&gt;In which we learn about how to add additional Python libraries to Plone to provide additional features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-8-creating-a-custom-theme"&gt;
&lt;h3&gt;Chapter 8: Creating a Custom Theme&lt;/h3&gt;
&lt;p&gt;In which we learn about Plone's new theming engine: Diazo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-9-nine-core-concepts-of-zope-programming"&gt;
&lt;h3&gt;Chapter 9: Nine Core Concepts of Zope Programming&lt;/h3&gt;
&lt;p&gt;In which learn a bit more about the technical architecture of Plone. If you love this chapter (as many do), you might also enjoy: &lt;a class="reference external" href="http://developer.plone.org/reference_manuals/old/zope_secrets/index.html"&gt;http://developer.plone.org/reference_manuals/old/zope_secrets/index.html&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-10-custom-content-types"&gt;
&lt;h3&gt;Chapter 10: Custom Content Types&lt;/h3&gt;
&lt;p&gt;In which we learn about Plone's new content type framework: Dexterity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-11-standalone-views-and-forms"&gt;
&lt;h3&gt;Chapter 11: Standalone Views and Forms&lt;/h3&gt;
&lt;p&gt;In which we learn about a topic that would be first, if Plone were a generic website framework: how to build forms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-12-relational-databases"&gt;
&lt;h3&gt;Chapter 12: Relational Databases&lt;/h3&gt;
&lt;p&gt;In which we learn about how to integrate a relational database into your CMS application. Since Plone relies heavily on the ZODB, none is included by default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-13-users-and-their-permissions"&gt;
&lt;h3&gt;Chapter 13: Users and their Permissions&lt;/h3&gt;
&lt;p&gt;In which we learn about another topic that would be covered first if Plone were a generic website framework: authentication and authorization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-14-dynamic-user-interfaces-with-jquery"&gt;
&lt;h3&gt;Chapter 14: Dynamic User Interfaces with jQuery&lt;/h3&gt;
&lt;p&gt;In which we learn about using jQuery in Plone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-15-summary-and-potential-enhancements"&gt;
&lt;h3&gt;Chapter 15: Summary and Potential Enhancements&lt;/h3&gt;
&lt;p&gt;In which we learn about next steps. You've just built and delivered a CMS application for your client. What will they ask you for next? And how will you implement it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope you have enjoyed this review; and I hope you'll consider purchasing a copy of Aspeli's book for your next Plone project.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Like this article? Consider a&lt;/em&gt; &lt;a class="reference external" href="http://gittip.com/aclark4life"&gt;gittip&lt;/a&gt;. &lt;em&gt;You may also want to follow me on&lt;/em&gt; &lt;a class="reference external" href="http://twitter.com/aclark4life"&gt;twitter&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[0]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Disclaimer: I was given a copy of both versions in exchange for this review.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Seriously though, whilst PACKT literally forces you to include a software version number in your title, &lt;strong&gt;Plone 3.3 Site Administration&lt;/strong&gt; is still relevant to today's Plone. I expect it will be relevant through at least Plone 5.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The financial details of (at least) my contract for writing a book with PACKT &lt;strong&gt;CLEARLY FAVORED PACKT&lt;/strong&gt;. That said, I think they are a great organization and I am proud to be a PACKT author. But according to my statements, I still need to earn about $1K more in royalties before I have paid back my advance. Notice what I just said there: &lt;strong&gt;earn in royalties&lt;/strong&gt; i.e. I have to sell enough books in order to get PACKT to pay out enough money to meet the terms of the contract. I won't pretend to have any idea why PACKT does what it does with its contracts, except to say that I assume they expect to make money. I'll also assume everything is on the up and up. But unfortunately sometimes the &amp;quot;up and up&amp;quot; can look like this: &lt;a class="reference external" href="http://www.techdirt.com/articles/20121018/01054720744/hollywood-accounting-how-19-million-movie-makes-150-million-still-isnt-profitable.shtml"&gt;http://www.techdirt.com/articles/20121018/01054720744/hollywood-accounting-how-19-million-movie-makes-150-million-still-isnt-profitable.shtml&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;tt class="docutils literal"&gt;$ pip install Plone&lt;/tt&gt; support may be available soon which may blow the lid off the Python popularity shack (raise the level of interest from generic Python developers interested in Python CMS applications).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Mailing List Etiquette</title><link href="http://aclark.net/blog/2012/10/20/mailing-list-etiquette/" rel="alternate"></link><updated>2012-10-20T03:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-20:2012/10/20/mailing-list-etiquette/</id><summary type="html">&lt;p&gt;I read a lot of mailing lists:&lt;/p&gt;
&lt;img alt="images/unison.png" src="images/unison.png" /&gt;
&lt;p&gt;Also, I've been subscribing to, reading, and participating in discussions on mailing lists since about the time Mailman 1.0 was released circa 1999 &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;. And I have fond memories of interacting administratively with MajorDomo and ListServ software. And by administratively, I mean sending the software commands and getting back a response. In fact, you might say I get along better with the software and machines than I do with the humans that use them. Which is not to say that I'm not a people person: I love people. But I do struggle with striking the right balance between hacking machines and communicating with humans.&lt;/p&gt;
&lt;p&gt;Anyway, as you can imagine: I have &lt;strong&gt;VERY STRONG OPINIONS&lt;/strong&gt; about how folks should conduct themselves on mailing lists: call it a code of conduct. And regardless of what you might expect from a self-described &amp;quot;hack&amp;quot;: I work &lt;strong&gt;VERY HARD&lt;/strong&gt; to enforce that code of conduct on my own behavior. Do I occasionally step outside the lines? Of course. But make no mistake: I do not communicate in a vacuum. You can be as polite and courteous as The Pope and &lt;strong&gt;STILL GET THE SMACKDOWN&lt;/strong&gt; through no fault of your own. Why? Because humans make mistakes. Context gets lost. Do you think you know what's going on enough to make a comment? You might be wrong &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;The single biggest problem in communication is the illusion that it has taken place.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
—  George Bernard Shaw quotes (Irish literary Critic, Playwright and Essayist. 1925 Nobel Prize for Literature, 1856-1950)&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="netiquette"&gt;
&lt;h2&gt;Netiquette&lt;/h2&gt;
&lt;p&gt;So what is a human to do? Well, guess what! There's actually a set of rules or, code of conduct, for humans to follow. Someone wrote it all down. And it's commonly referred to today as &amp;quot;netiquette&amp;quot;. A quick glance at &lt;a class="reference external" href="http://www.albion.com/netiquette/corerules.html"&gt;The Core Rules of Netiquette&lt;/a&gt; and you'll be well on your way to being a better electronic human than you were the day before. I say this as someone familiar with netiquette, but not as someone who has actually studied up on the concepts recently. One of my favorites:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From Rule #1: Remember The Human:&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;&amp;quot;When you're holding a conversation online -- whether it's an email exchange or a response to a discussion group posting -- it's easy to misinterpret your correspondent's meaning. And it's frighteningly easy to forget that your correspondent is a person with feelings more or less like your own.&lt;/p&gt;
&lt;p&gt;It's ironic, really. Computer networks bring people together who'd otherwise never meet. But the impersonality of the medium changes that meeting to something less -- well, less personal. Humans exchanging email often behave the way some people behind the wheel of a car do: They curse at other drivers, make obscene gestures, and generally behave like savages. Most of them would never act that way at work or at home. But the interposition of the machine seems to make it acceptable.&lt;/p&gt;
&lt;p&gt;The message of Netiquette is that it's not acceptable. Yes, use your network connections to express yourself freely, explore strange new worlds, and boldly go where you've never gone before. But remember the Prime Directive of Netiquette: Those are real people out there.&lt;/p&gt;
&lt;p&gt;Would you say it to the person's face?&lt;/p&gt;
&lt;p&gt;Writer and Macintosh evangelist Guy Kawasaki tells a story about getting email from some fellow he's never met. Online, this fellow tells Guy that he's a bad writer with nothing interesting to say.&lt;/p&gt;
&lt;p&gt;Unbelievably rude? Yes, but unfortunately, it happens all the time in cyberspace.&amp;quot;&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One belief that I've held for almost as long as I have been communicating electronically is: &lt;strong&gt;IF I SAY SOMETHING ELECTRONICALLY I PROBABLY MEAN IT&lt;/strong&gt;. That means you can expect to hear the same information from me in person, as you would in an email or other electronic corresponence. That also means that I rarely look back and &lt;strong&gt;CRINGE&lt;/strong&gt; and think to myself: &amp;quot;Oh my gosh I can't believe I wrote that.&amp;quot; Do I make mistakes? Of course. But less and less as I get older and older. More frequently than not, I stand 100% behind my electronic correspondence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="is-netiquette-enough"&gt;
&lt;h2&gt;Is netiquette enough?&lt;/h2&gt;
&lt;p&gt;Netiquette covers almost everything you can think of. From trying to be sensitive to the context of the list (RULE #3 and #4) to helping guide the discussion the right way (RULE #7) to giving everyone the benefit of the doubt all the time (RULE #10).&lt;/p&gt;
&lt;p&gt;Still, sometimes &lt;strong&gt;CRAZY THINGS HAPPEN&lt;/strong&gt; like someone forgets to mail the list directly and the direction of the membership &amp;quot;forks&amp;quot;. Follow &lt;a class="reference external" href="http://lists.plone.org/pipermail/plone-com/Week-of-Mon-20120903/000039.html"&gt;this thread&lt;/a&gt; to see me both issue a &lt;strong&gt;SMACKDOWN&lt;/strong&gt; then &lt;strong&gt;APOLOGIZE&lt;/strong&gt; when I realized I'd acted upon information only I and one other person was privy to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="policy-makes-perfect"&gt;
&lt;h2&gt;Policy makes perfect&lt;/h2&gt;
&lt;p&gt;Sometimes, people will pop on to a list and say &amp;quot;Is this the right place to ask about XYZ?&amp;quot; Other times, they'll just ask it: &amp;quot;I have an XYZ that I'm looking to sell…&amp;quot; If the primary topic of the list is &amp;quot;ABC&amp;quot; and if the popping in happens frequently enough, you may want to define a policy e.g. my non-profit organization DC Python has a &lt;a class="reference external" href="http://dcpython.org/#job-postings"&gt;policy for job postings&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;DC Python helps Python programmers get jobs. We allow job postings on our meetup.dcpython.org mailing list provided the following criteria are met:&lt;/p&gt;
&lt;p&gt;You are posting for a Python job in Washington, DC or the surrounding metro area — please don't try to recruit PHP or Ruby or .NET developers here, and please don't try to recruit for other cities.&lt;/p&gt;
&lt;p&gt;You will put [JOB] in the subject line of the email and include a description of the job (including duties and location) in the body of the email.&lt;/p&gt;
&lt;p&gt;You are an active member of DC Python or you are willing to contribute financially either through a sponsorship or by providing food/drink at one of our meetings.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That way whenever someone posts to the list or emails me personally about job postings, I can point them to the link:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dcpython.org/#job-postings"&gt;http://dcpython.org/#job-postings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pointing them at netiquette may help too, but that would require them to read through the archives to discover things like &amp;quot;Wow, that recruiter got the smackdown when they identified themselves as a recruiter.&amp;quot; So, a policy of netiquette plus an additional set of rules can go along way toward making communication better for everyone involved.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Like this article? Consider a&lt;/em&gt; &lt;a class="reference external" href="http://gittip.com/aclark4life"&gt;gittip&lt;/a&gt;. &lt;em&gt;You may also&lt;/em&gt; &lt;a class="reference external" href="http://twitter.com/aclark4life"&gt;follow me on Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://mail.python.org/pipermail/mailman-announce/1999-July/000004.html"&gt;http://mail.python.org/pipermail/mailman-announce/1999-July/000004.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://thinkexist.com/quotation/the_single_biggest_problem_in_communication_is/155222.html"&gt;http://thinkexist.com/quotation/the_single_biggest_problem_in_communication_is/155222.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Gittip, Misunderstood</title><link href="http://aclark.net/blog/2012/10/19/gittip-misunderstood/" rel="alternate"></link><updated>2012-10-19T03:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-19:2012/10/19/gittip-misunderstood/</id><summary type="html">&lt;p&gt;People do not understand gittip. Or, they do not understand how I use it. Worse, they &lt;strong&gt;think&lt;/strong&gt; they understand it &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;. So much so, some choose to comment about it publicly.&lt;/p&gt;
&lt;img alt="images/condescend.jpg" src="images/condescend.jpg" /&gt;
&lt;p&gt;Remember &lt;a class="reference external" href="http://blog.aclark.net/gittip-is-the-future.html"&gt;gittip is the future&lt;/a&gt;? Someone commented:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Nobody likes a beggar.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
— &lt;a class="reference external" href="mailto:fuckoff&amp;#64;dfgd.com"&gt;fuckoff&amp;#64;dfgd.com&lt;/a&gt;&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;Really? Well, I have to agree. I &lt;strong&gt;don't like seeing panhandlers&lt;/strong&gt; on the street. But I'd never yell &amp;quot;Nobody likes a beggar!&amp;quot; at them. Why? Because: I don't care what they do. Does their presence sometimes annoy me? Sure, because I have to read the sign. And then I have to nod, like &amp;quot;What's up&amp;quot; and &amp;quot;Nah, sorry&amp;quot; at the same time (an acquired skill).&lt;/p&gt;
&lt;p&gt;But that is not what bothers me the most about my friend &amp;#64;dfgd.com's comment. What bothers me the most is: I don't claim to know or understand why people do what they do. And short of a loitering law being broken somewhere, I think they have every right to do it (as long as they are not harming me or others). I'd even like to see a pandhandler use Square to accept payments. It sounds ridiculous, but I'd actually pay a panhandler that was accepting credit cards (I have no idea why this amuses me, but it does; of course, you may think twice about what is happening when they swipe but could a panhandler really figure out how to…&amp;nbsp;I digress, back to the story.)&lt;/p&gt;
&lt;p&gt;Anyway, pro tip: &lt;strong&gt;the people who use gittip are not begging&lt;/strong&gt;. Some (most?) never ask for a dime. I choose to promote my gittip link and I am now going to tell you why, so if anyone ever asks? Or condescends? Here it is:&lt;/p&gt;
&lt;div class="section" id="i-like-the-project"&gt;
&lt;h2&gt;I like the project&lt;/h2&gt;
&lt;p&gt;I like what Chad Whitacre is doing. I think it's a cool idea. I want to do everything I can to help him promote his service. I also like that people I know and like are being gittip'ed. It gives me a warm fuzzy inside. Hell, the entire &amp;quot;top 10&amp;quot; gives me a warm fuzzy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-like-money"&gt;
&lt;h2&gt;I like money&lt;/h2&gt;
&lt;p&gt;I have a funny story I like tell to… well, to you, now: I've done AdSense in the past. For YEARS. One time one of my blog entries got about 40+ upvotes on Hacker News and my revenue went up as quickly as it ever had. This, after years of adsensing, tipped the scales to… YUP, you guessed it! $100. I got my check, and a copy of it is sitting nearby ready for framing. Was that the hardest $100 I ever made? Probably. But it felt damn good to make it. Similarly, with $2 per week in support, I stand to make another $100 much quicker than I ever did with AdSense. This, my friends, is progress. It may not seem like much to random people on the internet. In fact, it may even be laughable, disgusting, or any number of things to other people. But guess what: it's none of their business.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="money-is-not-my-boss"&gt;
&lt;h2&gt;Money is not my boss&lt;/h2&gt;
&lt;p&gt;Some people go &lt;strong&gt;APE SHIT&lt;/strong&gt; and get &lt;strong&gt;REALLY UNCOMFORTABLE&lt;/strong&gt; in certain situations involving money. I am not one of them. Are you concerned that I'm not volunteering enough and getting paid too much? Don't be. I assure you, I can figure it out. If you have any questions, just ask me: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;. Are you concerned that because I get paid, someone else may get the wrong impression about volunteering and why do some people get paid and some don't and don't you worry this may give the wrong…? No. I trust that if someone wants to volunteer, that's exactly what they are going to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-have-vision"&gt;
&lt;h2&gt;I have vision&lt;/h2&gt;
&lt;p&gt;I picture any number of scenarios with gittip. Here are some:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Do you like that I've spent years pouring my heart and soul into the Plone software and community, and perhaps, made your life better in some small way? Gittip me.&lt;/li&gt;
&lt;li&gt;Did you notice I forked the Python Imaging Library so that thousands of people could have a working PIL release? Gittip me.&lt;/li&gt;
&lt;li&gt;Did you also notice the new zc.buildout release that's much faster than the old release? Gittip me. (And a few others too, most especially: iElectric and zenwryly… you could also gittip Jim Fulton too, I guess :-)).&lt;/li&gt;
&lt;li&gt;Do you want me to handle your Python package releases on a regular basis for you, but you don't want to sign a contract with my consulting business or use pythonpackages.com? Gittip me.&lt;/li&gt;
&lt;li&gt;Do you want me to handle some other task on a regular basis, but you don't want to sign a contract with my consulting business? Gittip me.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are you aware of all those things and don't want to gittip me? That's fine too. I'm not entirely sure I'm making myself clear, but I will leave you with this: I will always donate my time freely to good causes, especially those near and dear to my heart. My non-profit organization DC Python has been working with the PyLadies to teach &amp;quot;Introduction to Python Classes&amp;quot; in DC. And I'm so grateful, because I want to grow the organization (as big as Mozilla?) and I need all the help I can get. But, I need to make a living too. And this is precisely where, as the old saying goes: &amp;quot;the rubber meets the road&amp;quot;.&lt;/p&gt;
&lt;p&gt;I (like so many others before me and along with me in the Plone, Python, and Mozilla communities) have become an entrepreneur. In addition to thinking about &amp;quot;what consulting projects am I going to work to pay my bills&amp;quot;, I like thinking about &amp;quot;what services can I build to pay my bills&amp;quot;. And I'm so lucky I get the chance to do it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You know what to do or not to do because you have just read this article:&lt;/em&gt; &lt;a class="reference external" href="http://gittip.com/aclark4life"&gt;http://gittip.com/aclark4life&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You may also want to follow me on Twitter:&lt;/em&gt; &lt;a class="reference external" href="http://twitter.com/aclark4life"&gt;http://twitter.com/aclark4life&lt;/a&gt;&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://blogs.hbr.org/ashkenas/2011/02/your-communications-may-not-be.html"&gt;http://blogs.hbr.org/ashkenas/2011/02/your-communications-may-not-be.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Why I Criticize The Plone Foundation Board</title><link href="http://aclark.net/blog/2012/10/17/why-i-criticize-the-plone-foundation-board/" rel="alternate"></link><updated>2012-10-17T20:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-17:2012/10/17/why-i-criticize-the-plone-foundation-board/</id><summary type="html">&lt;img alt="images/aclark-conf.jpg" src="images/aclark-conf.jpg" /&gt;
&lt;p&gt;TL;DR: Because I care.&lt;/p&gt;
&lt;p&gt;As some of you can probably relate to, I've had my fair share of disagreements with the Plone Foundation Board over the years. The good news is, for the most part, it (just like the community) is staffed with &lt;strong&gt;very reasonable people&lt;/strong&gt; who if you push them on an issue, will acknowledge that there are always competing viewpoints to any issue you can think of.&lt;/p&gt;
&lt;div class="section" id="the-fallacy-of-false-cause"&gt;
&lt;h2&gt;The Fallacy Of False Cause&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;I don't like what you have to say, therefore you must be quiet.&lt;/em&gt; &lt;strong&gt;Not necessarily. You may choose not to listen.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As long as you are polite, respectful, and on topic: you can have a civil discussion with almost any human individual or group in today's world. The challenge is in &lt;a class="reference external" href="http://blog.aclark.net/2012/10/17/top-3-favorite-logical-fallacies/"&gt;sticking to those criteria&lt;/a&gt;. Conversations often become heated and stray outside of respectful lines, because we are human.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="issues"&gt;
&lt;h2&gt;Issues&lt;/h2&gt;
&lt;p&gt;From the famous (?) pricing scrap of 2010 (i wanted a more expensive server with VM capability, they didn't) to various financially sensitive issues: i.e. I occasionally want to be financially compensated as a &amp;quot;volunteer&amp;quot;. And while the Board does compensate volunteers in many ways, they frequently don't agree with the ways I've suggested. And who could forget &lt;a class="reference external" href="http://plone.org/2008"&gt;Plone Conference 2008&lt;/a&gt;? This was the first year that the Foundation received a percentage of the ticket sales. Now if I recall correctly there were certainly some heated debates, but none were too taxing or unreasonable (unless you count the ones we collectively had with The Ronald Reagan Building ;-)).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="success"&gt;
&lt;h2&gt;Success&lt;/h2&gt;
&lt;p&gt;Plone's success &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; is my success and vice versa. I do a lot of different things in life, so I'm not going to say that Plone must succeed for me to succeed. But I must succeed, and if I can help Plone succeed too, I'm going to do everything within my power to make it happen. Let me be clear: Plone does not need me to be successful. But if you've seen the &amp;quot;Plone: I wish I could quit you.&amp;quot; T-Shirt by Tarek Ziadé (shown above), you may know why I keep struggling to make Plone as good as it can be, albeit by my excessively high and overly strict (but not unrealistic) standards; which some, I am sure, do not like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope, after reading this, you may have some better idea of who I am and why I do what I do. I've made a commitment in my life to open source software, helping people, and being the best human I can be. I hope you will join me in my quest. If not, at the very least I hope you will respect my right to undertake it. If you have any questions or concerns, please do not hesitate to contact me to express them. Either in the comments below, or here: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's to you, Plone. And to the next 10 years of success.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Success means different things to different people.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Python"></category><category term="Plone"></category></entry><entry><title>Top 3 "favorite" logical fallacies</title><link href="http://aclark.net/blog/2012/10/17/top-3-favorite-logical-fallacies/" rel="alternate"></link><updated>2012-10-17T02:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-17:2012/10/17/top-3-favorite-logical-fallacies/</id><summary type="html">&lt;img alt="images/y-u-no-agree.jpg" src="images/y-u-no-agree.jpg" /&gt;
&lt;p&gt;I love to debate issues. The more complex, the better. I have no formal training in &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Debate"&gt;debate&lt;/a&gt;, but I wish I did. It may have better prepared me to face different personality types with varying degree of communication skill. You don't have to watch the 2012 U.S. Presidential Debates to know that people will say things that are &lt;strong&gt;BATSHIT CRAZY&lt;/strong&gt; to make their point. I've done it myself. That's why we need rules to formalize our discussions, because it's hard to stay on point.&lt;/p&gt;
&lt;div class="section" id="fallacy"&gt;
&lt;h2&gt;Fallacy&lt;/h2&gt;
&lt;p&gt;In the course of debate, you may encounter a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Fallacy"&gt;fallacy&lt;/a&gt; or &amp;quot;faulty reasoning&amp;quot;. Discussion of fallacy is my favorite part of debate. So without further ado, my top 3 &amp;quot;favorite&amp;quot; &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[1]&lt;/a&gt; logical fallacies; of all those I've encountered since I begun to debate in electronic form in the mid-1990s. &lt;em&gt;Disclaimer: I have been on both sides of all three, I'm human. My goal in writing this blog entry is to facilitate better conversations within the communities I care about: Mozilla, Python, and Plone.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="you-will-regret-your-comments"&gt;
&lt;h3&gt;1. &amp;quot;You will regret your comments!&amp;quot;&lt;/h3&gt;
&lt;p&gt;This may be true, but it's probably not the point. And it's probably better to stay on topic then it is to stray into personal attacks, or what you may feel is &amp;quot;helping&amp;quot; &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[2]&lt;/a&gt; the other person.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-are-out-of-line"&gt;
&lt;h3&gt;2. &amp;quot;You are out of line!&amp;quot;&lt;/h3&gt;
&lt;p&gt;This may be true too, but it may take both sides to acknowledge the lines. When discussing a point, even though it's tempting to cry foul, it's probably better to stay on point. Sometimes you need a break, in which case it's OK to say &amp;quot;let's take a break and pick this up again later&amp;quot; &lt;a class="footnote-reference" href="#id8" id="id3"&gt;[3]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="you-are-wrong"&gt;
&lt;h3&gt;3. &amp;quot;You are wrong!&amp;quot;&lt;/h3&gt;
&lt;p&gt;Perhaps. But it is likely that you may never agree with your debate counterparts. It's much better to focus on the core issues, and how you can compromise, then it is to focus attention on what is &amp;quot;right&amp;quot; and &amp;quot;wrong&amp;quot; (and who is right and wrong) &lt;a class="footnote-reference" href="#id9" id="id4"&gt;[4]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;It feels great to get those out. If anyone reading this has formal training in debate, I would love to hear your comments. Either below, or: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Like this blog entry? Consider supporting me on&lt;/em&gt; &lt;a class="reference external" href="http://gittip.com/aclark4life"&gt;gittip&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I say &amp;quot;favorite&amp;quot; because these fallacies have crystallized in my brain over the years to the point where I feel I can categorize and discuss them.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I say &amp;quot;helping&amp;quot; because it's probably hurting the intended recipient (whether it's true or not). Sorry, it's not up to you to decide whether or not someone else will regret their comments.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I am married. And there is no better place in the world, than within the institution of marriage, to learn how to debate. :-)&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id9" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;There may be no tangible right or wrong, just preference. Discuss your preferences, then what you need from the other side to be happy. Then ask the other side to do the same.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Python"></category><category term="Plone"></category></entry><entry><title>Hello, Django!</title><link href="http://aclark.net/blog/2012/10/15/hello-django/" rel="alternate"></link><updated>2012-10-15T18:40:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-15:2012/10/15/hello-django/</id><summary type="html">&lt;div class="section" id="test-post"&gt;
&lt;h2&gt;Test post&lt;/h2&gt;
&lt;p&gt;This is a test post to create a Django tag feed. Hello, Django planet!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Django"></category></entry><entry><title>Looking for projects</title><link href="http://aclark.net/blog/2012/10/04/looking-for-projects/" rel="alternate"></link><updated>2012-10-04T10:30:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-04:2012/10/04/looking-for-projects/</id><summary type="html">&lt;img alt="images/use_python.jpg" src="images/use_python.jpg" /&gt;
&lt;p&gt;With &lt;a class="reference external" href="http://blog.aclark.net/2012/09/28/pythonpackages-com-one-year-later/"&gt;pythonpackages.com winding down&lt;/a&gt;, I am now actively seeking projects for Q4 2012 and beyond. I am good at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deploying Plone sites: &lt;a class="reference external" href="http://blog.aclark.net/2012/10/03/plone-4-3-alpha-1-in-production/"&gt;http://blog.aclark.net/2012/10/03/plone-4-3-alpha-1-in-production/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Maintaining and releasing Python packages: &lt;a class="reference external" href="http://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=aclark&amp;amp;submit=search"&gt;http://pypi.python.org/pypi?%3Aaction=search&amp;amp;term=aclark&amp;amp;submit=search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cat herding volunteers: &lt;a class="reference external" href="http://lists.plone.org/pipermail/plone-com/Week-of-Mon-20120903/000039.html"&gt;http://lists.plone.org/pipermail/plone-com/Week-of-Mon-20120903/000039.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing documentation: &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/index.html"&gt;http://docs.pythonpackages.com/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing narrative text: &lt;a class="reference external" href="http://www.packtpub.com/plone-33-site-administration/book"&gt;http://www.packtpub.com/plone-33-site-administration/book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Writing Python code: &lt;a class="reference external" href="https://github.com/aclark4life"&gt;https://github.com/aclark4life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, I've put together a list of projects I am involved in (or have been involved in): &lt;a class="reference external" href="http://resume.aclark.net/projects/"&gt;http://resume.aclark.net/projects/&lt;/a&gt;, and please feel free to check out my résumé: &lt;a class="reference external" href="http://resume.aclark.net/"&gt;http://resume.aclark.net/&lt;/a&gt;. If you'd like to discuss how I can help you or your team, please get in touch: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;.&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category><category term="Mozilla"></category></entry><entry><title>Plone 4-3 Alpha 1 In Production</title><link href="http://aclark.net/blog/2012/10/03/plone-4-3-alpha-1-in-production/" rel="alternate"></link><updated>2012-10-03T13:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-10-03:2012/10/03/plone-4-3-alpha-1-in-production/</id><summary type="html">&lt;p&gt;I love upgrading Plone. Given the choice between an afternoon in the sun and upgrading Plone… OK I'd probably pick the sun, but it'd be close.&lt;/p&gt;
&lt;div class="section" id="always-upgrading"&gt;
&lt;h2&gt;Always upgrading?&lt;/h2&gt;
&lt;p&gt;I would love to see the trend of continuous integration make its way all the way to deployment, so that one day our Plone sites are getting new code as soon as it's released. Until then, it's nice to know that Plone's upgrade procedure is fairly predictable and stable, if not entirely straightforward &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-i-upgrade"&gt;
&lt;h2&gt;How do I upgrade?&lt;/h2&gt;
&lt;p&gt;Unfortunately we &lt;em&gt;still&lt;/em&gt; get asked this question in IRC. The TLDR (short) explanation is as follows. Got an old Plone? Here's what you should do:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't touch it! Leave it alone. It's probably doing something important.&lt;/li&gt;
&lt;li&gt;Install the latest Plone somewhere that is not the location of your current site. Maybe not even on the same machine.&lt;/li&gt;
&lt;li&gt;Copy the production Data.fs file (usually in var/ somewhere) and any blobs you may have (Plone 4 or greater) to the new installation.&lt;/li&gt;
&lt;li&gt;Restart Plone in the foreground (bin/instance fg). If it starts, great! If it doesn't, look for missing add-ons and add their newest-Plone counterparts (this is usually where all the real work happens). Can't find the latest version? Try contacting the author. Stuck? Try Plone support (&lt;a class="reference external" href="http://plone.org/support"&gt;http://plone.org/support&lt;/a&gt;) or hire a consultant (e.g. &lt;a class="reference external" href="http://aclark.net"&gt;http://aclark.net&lt;/a&gt;). Otherwise, continue.&lt;/li&gt;
&lt;li&gt;Once your add-ons are in place, start the site in the foreground and give the ZMI a poke (stay out of Plone). Look for broken objects. If you find some, repeat the previous step. Otherwise, continue.&lt;/li&gt;
&lt;li&gt;Once the ZMI looks good, trigger the migration with the Dry Run checkbox selected. See what you get. If it completes, do it for real. If it doesn't, open a ticket on &lt;a class="reference external" href="http://dev.plone.org"&gt;http://dev.plone.org&lt;/a&gt; so we can track the kinds of issues that folks are encountering in the wild. At this point if you are stuck, try to get help from the support forums (&lt;a class="reference external" href="http://plone.org/support"&gt;http://plone.org/support&lt;/a&gt;) or hire a consultant (e.g. &lt;a class="reference external" href="http://aclark.net"&gt;http://aclark.net&lt;/a&gt;). Otherwise, you are almost done!&lt;/li&gt;
&lt;li&gt;Run the upgrade for real i.e. with the Dry Run checkbox unselected. When it finishes (it could take a while depending on the size of your site) check Plone. If everything looks OK, rejoice! If not, don't worry. Check: &lt;tt class="docutils literal"&gt;Site Setup &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; ZMI &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; portal_skins &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; custom&lt;/tt&gt;. If there is anything inside the custom folder, rename the custom folder to &lt;tt class="docutils literal"&gt;custom_X_X&lt;/tt&gt; where &lt;tt class="docutils literal"&gt;X_X&lt;/tt&gt; equals the previous Plone version e.g. &lt;tt class="docutils literal"&gt;custom_3_3&lt;/tt&gt;. Or, rename it to whatever you like. Or delete it if you don't care about any in-database customizations that have been made. You probably should care, but maybe you don't. Now check Plone again. If everything looks OK, you are done! If not… well you really should be done by now. So if not, please email me: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt; and I will try to help.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's still a lot to swallow for a summary. The key point is this: &lt;strong&gt;test the upgrade away from the production site. Don't put yourself in an unpleasant situation you can easily avoid&lt;/strong&gt;. Once everything works as expected, make a copy of your Data.fs and perform the upgrade on the production site (by editing the buildout.cfg if you know how, or just make the new Plone installation the production site. Need help? Please feel free to email me: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt; to discuss professional assistance.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-did-i-upgrade"&gt;
&lt;h2&gt;How did I upgrade?&lt;/h2&gt;
&lt;p&gt;Anyway, the point of this blog entry is to cover the recent upgrade of &lt;a class="reference external" href="http://aclark.net"&gt;http://aclark.net&lt;/a&gt; to Plone 4.3a1, and the bliss that ensued. Plone 4.3 has lots of goodness in it, most notably the new theme editor from Martin Aspeli. Whilst I haven't fully explored its possibilites, I definitely liked seeing it in place; it's an impressive piece of work and I suspect will be very useful to lots of folks. So here is a brief summary of my upgrade steps, which took about 2-3 days.&lt;/p&gt;
&lt;div class="section" id="create-a-new-empty-repo"&gt;
&lt;h3&gt;Create a new empty repo&lt;/h3&gt;
&lt;p&gt;I started with a public repo in my personal GitHub account, then forked it to my organization for showcasing:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/new_style"&gt;https://github.com/ACLARKNET/new_style&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="add-the-buildout"&gt;
&lt;h3&gt;Add the buildout&lt;/h3&gt;
&lt;p&gt;Yes, we are still married to Buildout for even the simplest deployments :-/. So in order to make this easy for myself and others, I maintain buildouts for every version of Plone under the &lt;a class="reference external" href="http://pythonpackages.com"&gt;http://pythonpackages.com&lt;/a&gt; umbrella. I typically start like this from within the checked out repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv .
&lt;span class="nv"&gt;$ &lt;/span&gt;bin/pip install zc.buildout
&lt;span class="nv"&gt;$ &lt;/span&gt;bin/buildout init
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I then &lt;tt class="docutils literal"&gt;extend&lt;/tt&gt; the desired base configuration (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;4.3.x-dev&lt;/span&gt;&lt;/tt&gt; in this case) and add additional customizations as needed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[buildout]&lt;/span&gt;
&lt;span class="na"&gt;extends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http://pythonpackages.com/buildout/plone/4.3.x-dev&lt;/span&gt;

&lt;span class="k"&gt;[plone]&lt;/span&gt;
&lt;span class="na"&gt;eggs +&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    z3c.jbot&lt;/span&gt;
&lt;span class="s"&gt;    ZODB3&lt;/span&gt;
&lt;span class="na"&gt;scripts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;ZODB3&lt;/span&gt;
&lt;span class="na"&gt;resources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;${buildout:directory}/resources&lt;/span&gt;
&lt;span class="na"&gt;zcml-additional&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="c1"&gt;# XXX Can this be done with p.r.zope2instance yet?&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;configure&lt;/span&gt;
        &lt;span class="na"&gt;xmlns:browser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://namespaces.zope.org/browser&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;        &amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;        &amp;lt;include package=&amp;quot;z3c.jbot&amp;quot; file=&amp;quot;meta.zcml&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;        &amp;lt;browser:jbot directory=&amp;quot;${buildout:directory}/templates&amp;quot; /&amp;gt;&lt;/span&gt;
&lt;span class="s"&gt;    &amp;lt;/configure&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;[versions]&lt;/span&gt;
&lt;span class="na"&gt;Cheetah&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2.2.1&lt;/span&gt;
&lt;span class="na"&gt;Pillow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1.7.7&lt;/span&gt;
&lt;span class="na"&gt;Products.DocFinderTab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1.0.5&lt;/span&gt;
&lt;span class="na"&gt;Products.FSDump&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.9.5&lt;/span&gt;
&lt;span class="na"&gt;collective.recipe.supervisor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.17&lt;/span&gt;
&lt;span class="na"&gt;gdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2.0.17&lt;/span&gt;
&lt;span class="na"&gt;meld3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.6.9&lt;/span&gt;
&lt;span class="na"&gt;plone.app.debugtoolbar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1.0a2&lt;/span&gt;
&lt;span class="na"&gt;supervisor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3.0b1&lt;/span&gt;
&lt;span class="na"&gt;z3c.jbot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.7.1&lt;/span&gt;
&lt;span class="na"&gt;zope2-bootstrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0.0.7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="develop-the-diazo-theme"&gt;
&lt;h3&gt;Develop the Diazo theme&lt;/h3&gt;
&lt;p&gt;With Diazo, Python packaging is optional. And the &lt;tt class="docutils literal"&gt;resources&lt;/tt&gt; parameter available from &lt;tt class="docutils literal"&gt;plone.recipe.zope2instance&lt;/tt&gt; makes it easy to start theming without a Python package. I started with a bootstrap template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Bootstrap, from Twitter&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;viewport&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;author&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Le styles --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/++theme++static/css/bootstrap.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/++theme++static/css/new_style.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;http://fonts.googleapis.com/css?family=Oswald&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text/css&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;padding-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;padding-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Le HTML5 shim, for IE6-8 support of HTML5 elements --&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;      &amp;lt;script src=&amp;quot;http://html5shim.googlecode.com/svn/trunk/html5.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;    &amp;lt;![endif]--&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Le fav and touch icons --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;shortcut icon&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/++theme++static/img/favicon.ico&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apple-touch-icon-precomposed&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;144x144&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/++theme++static/ico/apple-touch-icon-144-precomposed.png&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apple-touch-icon-precomposed&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;114x114&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/++theme++static/ico/apple-touch-icon-114-precomposed.png&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apple-touch-icon-precomposed&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;72x72&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/++theme++static/ico/apple-touch-icon-72-precomposed.png&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;apple-touch-icon-precomposed&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/++theme++static/ico/apple-touch-icon-57-precomposed.png&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_gaq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;_gaq&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
      &lt;span class="nx"&gt;_gaq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_setAccount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;UA-35125830-1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="nx"&gt;_gaq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_trackPageview&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ga&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;ga&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;ga&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;async&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;ga&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https:&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://ssl&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://www&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.google-analytics.com/ga.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ga&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})();&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar navbar-inverse navbar-fixed-top&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navbar-inner&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-navbar&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;collapse&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.nav-collapse&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;icon-bar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;brand&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Project name&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav-collapse collapse&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#about&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#contact&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dropdown&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dropdown-toggle&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-toggle=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dropdown&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dropdown &lt;span class="nt"&gt;&amp;lt;b&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;caret&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/b&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;dropdown-menu&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Action&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Another action&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Something else here&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;divider&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nav-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Nav header&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Separated link&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;One more separated link&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!--/.nav-collapse --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="c"&gt;&amp;lt;!-- Main hero unit for a primary marketing message or call to action --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hero-unit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello, world!&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a template for a simple marketing or informational website. It includes a large callout called the hero unit and three supporting pieces of content. Use it as a starting point to create something more unique.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-primary btn-large&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Learn more &lt;span class="ni"&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

      &lt;span class="c"&gt;&amp;lt;!-- Example row of columns --&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;span6 col1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Heading&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui. &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;View details &lt;span class="ni"&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;span6 col2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Heading&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Donec id elit non mi porta gravida at eget metus. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Etiam porta sem malesuada magna mollis euismod. Donec sed odio dui. &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;View details &lt;span class="ni"&gt;&amp;amp;raquo;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt; Company 2012&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;&amp;lt;!-- /container --&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- Le javascript&lt;/span&gt;
&lt;span class="c"&gt;    ================================================== --&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Placed at the end of the document so the pages load faster --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/++theme++static/js/jquery.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/++theme++static/js/bootstrap.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://platform.twitter.com/widgets.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.lightbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;lightBox&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.client&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.carousel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then added some Diazo rules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;rules&lt;/span&gt;
    &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://namespaces.plone.org/diazo&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:css=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://namespaces.plone.org/diazo/css&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:xsl=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/1999/XSL/Transform&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;append&lt;/span&gt; &lt;span class="na"&gt;css:content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#category&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;css:theme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.hero-unit&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;before&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/html/head/title&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;theme=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/html/head/title&amp;#39;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;theme&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;replace&lt;/span&gt; &lt;span class="na"&gt;css:content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.nav&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;css:theme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.nav&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;replace&lt;/span&gt; &lt;span class="na"&gt;css:content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#content&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;css:theme-children=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.hero-unit&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;replace&lt;/span&gt; &lt;span class="na"&gt;css:content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#portal-column-one&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;css:theme-children=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.col1&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;replace&lt;/span&gt; &lt;span class="na"&gt;css:content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#portal-column-two&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;css:theme-children=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.col2&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;replace&lt;/span&gt; &lt;span class="na"&gt;css:content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;css:theme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;replace&lt;/span&gt; &lt;span class="na"&gt;css:content=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#portal-logo&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;css:theme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.brand&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/rules&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then styled to fit with CSS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#about&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;padding-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.alex&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#FAFAFA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(&amp;quot;/++theme++static/img/aclark-net-background.png&amp;quot;)&lt;/span&gt; &lt;span class="k"&gt;repeat-x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.brand&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FAFAFA&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Georgia&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.brand&lt;/span&gt; &lt;span class="nc"&gt;.alpha&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;360&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;italic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.brand&lt;/span&gt; &lt;span class="nc"&gt;.name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.carousel-inner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#CCC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FAFAFA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.documentDescription&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;dt&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#facebook&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;padding-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#999999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;list-style-type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.hero-unit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#CCC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#CCC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.image-left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.navbar-inner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#AA001F&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.portletHeader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#portal-column-one&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FAFAFA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#portal-column-two&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FAFAFA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.team-member&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#FAFAFA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.service&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#twitter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;padding-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="customize-templates"&gt;
&lt;h2&gt;Customize templates&lt;/h2&gt;
&lt;p&gt;As you may have noticed above I use &lt;tt class="docutils literal"&gt;z3c.jbot&lt;/tt&gt; to customize various Plone templates.&lt;/p&gt;
&lt;img alt="images/custom-templates.png" src="images/custom-templates.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="add-content"&gt;
&lt;h2&gt;Add content&lt;/h2&gt;
&lt;p&gt;I then cut/pasted all my content from the old site to the new site. This is a lot of work, but I like mimicking the experience of someone non-tech-savvy using Plone for the first time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-left"&gt;
&lt;h2&gt;What's left?&lt;/h2&gt;
&lt;p&gt;I am very happy with this upgrade, but of course it's not perfect.&lt;/p&gt;
&lt;div class="section" id="use-sunburst-theme-for-content-editing"&gt;
&lt;h3&gt;Use Sunburst theme for content editing&lt;/h3&gt;
&lt;p&gt;If you are Diazo-savvy, you may notice I completely ignore styling the content editing interface. Instead I rely on the unthemed &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt; site for content editing.&lt;/p&gt;
&lt;img alt="images/edit-ui.png" src="images/edit-ui.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="use-diazo-theme-for-public-facing-view"&gt;
&lt;h3&gt;Use Diazo theme for public facing view&lt;/h3&gt;
&lt;p&gt;Of course, visitors to &lt;a class="reference external" href="http://aclark.net"&gt;http://aclark.net&lt;/a&gt; see the Diazo theme.&lt;/p&gt;
&lt;img alt="images/diazo-theme.png" src="images/diazo-theme.png" /&gt;
&lt;p&gt;I'm hoping that the Plone team can unify the content editing experience again in Plone 5, possibly via simplifying the &amp;quot;old style&amp;quot; templates such that it's easier to map them to custom Diazo themes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hightlights"&gt;
&lt;h2&gt;Hightlights&lt;/h2&gt;
&lt;p&gt;Lastly, I'll cover some of the remaining highlights.&lt;/p&gt;
&lt;div class="section" id="it-works"&gt;
&lt;h3&gt;It works!&lt;/h3&gt;
&lt;p&gt;Plone 4.3a1 is remarkably stable. The TinyMCE UI is a bit rough, and the sitemap is broken &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[3]&lt;/a&gt;, but it works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-all-content-view-is-awesome"&gt;
&lt;h3&gt;The &lt;tt class="docutils literal"&gt;All content&lt;/tt&gt; view is awesome&lt;/h3&gt;
&lt;img alt="images/all-content.png" src="images/all-content.png" /&gt;
&lt;p&gt;Contributed by Laurence Rowe for Plone 4, I use the &lt;tt class="docutils literal"&gt;All content&lt;/tt&gt; view in two places:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://aclark.net/services"&gt;http://aclark.net/services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://aclark.net/team"&gt;http://aclark.net/team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I love the ability to easily aggregate the contents of pages within a folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-deployment-is-awesome"&gt;
&lt;h3&gt;My deployment is awesome&lt;/h3&gt;
&lt;p&gt;I'm really happy with the following trick I used this time around:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Content is stored in Data.fs (of course) which I've checked into a private repo on bitbucket, and save nightly with an automated commit and push. I'm able to present the site buildout and theme to the public but keep the Data.fs private via git submodules.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prior to this, the entire site was stored in a private repo on bitbucket. And finally:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If you load the site, you'll notice the images (configured as static resources) are a bit laggy. I'm a big fan of of CloudFlare and current user via pythonpackages.com, so I'll probably be configuring aclark.net to use it soon too. Once that is done, the site should be lightning fast instead of just really fast.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Like this article and/or my open source work in general? Please &lt;a class="reference external" href="http://gittip.com/aclark4life"&gt;consider supporting me on gittip&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Some ideas for improving upgrades: 1.) optionally rename portal_skins/custom during the upgrade process. 2.) Include suggestions in the form copy to stage the upgrade away from the current production site. 3.) Report on availability of add-ons compatible with latest version of Plone.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Unthemed meaning un-diazo-themed. The content UI is themed with the Sunburst theme &amp;quot;the old way&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://dev.plone.org/ticket/13178"&gt;https://dev.plone.org/ticket/13178&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>pythonpackages-com one year later</title><link href="http://aclark.net/blog/2012/09/28/pythonpackages-com-one-year-later/" rel="alternate"></link><updated>2012-09-28T10:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-09-28:2012/09/28/pythonpackages-com-one-year-later/</id><summary type="html">&lt;p&gt;We are rolling up on the &lt;strong&gt;one year anniversary&lt;/strong&gt; of pythonpackages.com (in October). This is an exciting milestone (for me at least) because I've had a tremendous amount of fun building the site, not to mention how much I learned about GitHub, PyPI, Pyramid, Stripe, Redis, Bootstrap, and more.&lt;/p&gt;
&lt;p&gt;We are hovering around 200 signups which I'm quite proud of. But in terms of &lt;strong&gt;possible-financial-success&lt;/strong&gt; i.e. the potential of converting some of those sign ups in to actual customers I'd feel better if we were at 2,000 or higher.&lt;/p&gt;
&lt;div class="section" id="what-happened"&gt;
&lt;h2&gt;What happened?&lt;/h2&gt;
&lt;p&gt;As of the launch of the beta site 3 months ago, there are some actually-useful features available:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/introduction.html#introduction"&gt;ability to release a package from GitHub to PyPI&lt;/a&gt; without a terminal (i.e. in the web browser).&lt;/li&gt;
&lt;li&gt;The ability to release a package with &lt;cite&gt;git push&lt;/cite&gt; (by adding the service: &lt;a class="reference external" href="https://github.com/github/github-services/blob/master/services/pythonpackages.rb"&gt;https://github.com/github/github-services/blob/master/services/pythonpackages.rb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The ability to &amp;quot;manage packages&amp;quot; (see image below)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/manage-packages.png" src="images/manage-packages.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ability to &amp;quot;manage organizations&amp;quot; (see image below)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/manage-organizations.png" src="images/manage-organizations.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/create-package.html#create-packages"&gt;ability to create packages through the web&lt;/a&gt; (i.e. from the web browser to GitHub, whereas normally you'd run PasteScript in your Terminal).&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/create-new-package.png" src="images/create-new-package.png" /&gt;
&lt;p&gt;And a few more logistical features that are cool:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ability to pay with a credit card (via Stripe)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/pay-with-stripe.png" src="images/pay-with-stripe.png" /&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ability to oauth against PyPI:&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="images/pypi-oauth.png" src="images/pypi-oauth.png" /&gt;
&lt;p&gt;Still, we have only scratched the surface of what could potentially be provided to the Python community. Future plans include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The ability to easily &lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issue/28/build-windows-installers"&gt;build Windows installers&lt;/a&gt; for your Python software.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issue/27/support-bitbucket-and-other-dvcs-services"&gt;Support for other services&lt;/a&gt; e.g. bitbucket.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issue/29/add-git-branch-support"&gt;Support git branches&lt;/a&gt; i.e. for releasing from a branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, this is a great start to building &amp;quot;github style&amp;quot; automation for Python packaging but there is much more work to be done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-now"&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;I am in the process of winding down the 3 month &amp;quot;beta 1&amp;quot; period. The &amp;quot;beta 2&amp;quot; period (from now until the end of the year) will likely include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Adding MailChimp integration to make it easier to email subscribers.&lt;/li&gt;
&lt;li&gt;Turn off SSL to save $20/month.&lt;/li&gt;
&lt;li&gt;Write tests and open source the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-can-you-do-to-help"&gt;
&lt;h2&gt;What can you do to help?&lt;/h2&gt;
&lt;p&gt;If you believe in the ideas behind pythonpackages.com (primarily: eliminating the need to think about packaging at all; e.g. through task automation, and process improvement behind the scenes; i.e. supporting new technology like distutils2/packaging, wheel, et al.; in order to present a seemless packaging story to developer-consumers.) then the best thing you can do is to purchase a paid plan:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pythonpackages.com/plans"&gt;http://pythonpackages.com/plans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second best thing you can do is support me on gittip:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://gittip.com/aclark4life"&gt;https://gittip.com/aclark4life&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These funds will go towards covering hosting costs until such time as the service can pay for itself. I am also asking folks who appreciate my open source work in general to consider a gittip donation. If you cannot help financially, you can still use the free plan to release packages! Please try it out and &lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new"&gt;give feedback&lt;/a&gt;. (The paid plans get you access to more package slots, so you don't have to swap out the free slot, and organizations, so you can release packages from organization repos).&lt;/p&gt;
&lt;p&gt;Thanks for considering!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Diazo themes revisited</title><link href="http://aclark.net/blog/2012/09/24/diazo-themes-revisited/" rel="alternate"></link><updated>2012-09-24T12:15:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-09-24:2012/09/24/diazo-themes-revisited/</id><summary type="html">&lt;p&gt;With Diazo theming on the rise (going in to 4.3 core) I'd like to take a look at the Diazo theming ecosystem again. For that matter, since I know that some folks will never commit to Diazo, I'd like to take a look at the entire Plone theming ecosystem.&lt;/p&gt;
&lt;div class="section" id="what-are-themes"&gt;
&lt;h2&gt;What are themes?&lt;/h2&gt;
&lt;p&gt;Themes control the way the site looks. For the scope of this post, at least, I don't care about &amp;quot;views&amp;quot;, &amp;quot;viewlets&amp;quot;, &amp;quot;portlets&amp;quot;, &amp;quot;tiles&amp;quot;, etc. In fact, I'm not sure I ever want to mix &amp;quot;templating&amp;quot; (for lack of a better word) with theming. There is a bit of discussion going on right now amongst the core developers regarding how to make it easier for themers to associate their template code with application code. And while I fully support this discussion, at present the bottom line is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Old style&amp;quot;&lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt; theming is still a valid way to control the look and feel of a Plone system.&lt;/li&gt;
&lt;li&gt;&amp;quot;New style&amp;quot; (Diazo) theming is a great way to isolote the complexity of the stack and get HTML/CSS/JavaScript folks going quickly (especially in 4.3a1 with the new theme editor!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="where-are-themes"&gt;
&lt;h2&gt;Where are themes?&lt;/h2&gt;
&lt;p&gt;In short: all over the place. Why is that? Because we are in the middle of several fluctuating &amp;quot;best practice&amp;quot; approaches that have fluctuated over the past half decade or so:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Plone developers should release their Plone add-ons &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt; to PyPI!&lt;/li&gt;
&lt;li&gt;Plone developers should release their Plone add-ons to plone.org (in addition to PyPI)!&lt;/li&gt;
&lt;li&gt;Plone developers should release their Diazo themes as zip archives (i.e. no Python package)!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hence, the need for this post to clarify the status quo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-should-i-do"&gt;
&lt;h2&gt;What should I do?&lt;/h2&gt;
&lt;p&gt;Everyone should form their own opinion based on the information in this post and act accordingly or however they see fit. If we can all agree on an approach, great! If not, here's what I'm doing.&lt;/p&gt;
&lt;div class="section" id="what-am-i-doing"&gt;
&lt;h3&gt;What am I doing?&lt;/h3&gt;
&lt;p&gt;While I have a large interest in seeing plone.org work well (and am also in the middle of helping to cat herd a plone.com marketing site effort), I have given up on plone.org as a reliable, consistent source for add-ons (in favor of PyPI). This abandonment is perhaps only temporary, but in any event for now: if it's on PyPI, it's good enough for me. Also to close the loop on Diazo zip themes, while I fully support this approach I don't use it myself much.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-is-the-point"&gt;
&lt;h3&gt;What is the point?&lt;/h3&gt;
&lt;p&gt;All of this brings me to the actual point of this post which is to take a quick look at the Plone themeing landscape in order to spur more Diazo theme development (or old style theming, if that is your thing). Quickly, using pip to search PyPI by package namespace I see:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;88 plonetheme themes&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
plonetheme.Bangalore      - An installable theme for Plone 3
plonetheme.GreenEarthTheme3_0 - An installable theme for Plone 3
plonetheme.ReOrg          - Theme that reorganizes screen real-estate abd gives plone a fresh look
plonetheme.aclark_twitter - Complete silliness: make your Plone site look like Alex Clark's Twitter profile.
plonetheme.andreas01      - An installable theme for Plone 3.0.
plonetheme.andreas02      -
plonetheme.aqueouslight   - An installable Diazo theme for Plone 4.1
plonetheme.bananaleaf     - An installable Diazo theme for Plone 4.1
plonetheme.basic          - An easily customizable theme for Plone 4
plonetheme.blueblog       - An installable theme for Plone 3.0
plonetheme.bluegray       - An installable theme for Plone
plonetheme.bootstrap      - bootstrap css integration
plonetheme.broadcaster    - An installable theme for Plone 3.0
plonetheme.bronzecube     - An installable theme for Plone 3
plonetheme.burned         - An installable Diazo theme for Plone 4.1
plonetheme.classic        - The classic Plone 3 default theme.
plonetheme.cleantheme     - An installable theme for Plone 3.0
plonetheme.codapress      - An installable Diazo theme for Plone 4.1
plonetheme.colorcontext   - Total CSS rebuild and color themed sections
plonetheme.colorfulworld  - An installable theme for Plone 4
plonetheme.coolblue       - An installable Diazo theme for Plone 4.1
plonetheme.corporatemale  - An elastic layout presentation suitable for a corporate business.
plonetheme.criticas       - An installable theme for Plone 3.0
plonetheme.cultureCab     - An installable theme for Plone 3
plonetheme.darkened       - An installable Diazo theme for Plone 4.1
plonetheme.delicious2     - An installable theme for Plone 3.0
plonetheme.discovery      - An installable Diazo theme for Plone 4.1
plonetheme.drupal         - Get all the power of Drupal for Plone ;)
plonetheme.earthlingtwo   - An installable Diazo theme for Plone 4.1
plonetheme.elemental      - Elemental Plone 4 Theme
plonetheme.equipoteih     - An installable theme for Plone 3.0
plonetheme.essay          -
plonetheme.evergreen      - An installable Diazo theme for Plone 4.1
plonetheme.ewb_case       - A Plone 4 theme for EWB Case
plonetheme.flowerbuds     - UNKNOWN
plonetheme.freshpick      - An installable Diazo theme for Plone 4.1
plonetheme.fui            - A Plone 3.0 theme for FUI
plonetheme.gemstone       - Arcsin's Gemstone web design for Plone4
plonetheme.gov            - An installable theme for Plone 4
plonetheme.greencommunity - An installable theme for Plone 3.0.
plonetheme.grungeera      - An installable Diazo theme for Plone 4.1
plonetheme.hamnavoe       - An installable theme for Plone 3.0
plonetheme.html5_hotpink  - Diazo theme for Plone
plonetheme.inbusiness     - An installable theme for Plone 3.0
plonetheme.intk           - An installable theme for Plone 3
plonetheme.intkBase       - An installable theme for Plone 4
plonetheme.jsjamba        - An installable theme for Plone 4
plonetheme.keepitsimple   - An installable theme for Plone 4, fluid 3-column theme, minimalistic and light colored design
plonetheme.laboral        - An installable theme for Plone 4
plonetheme.labs           - An installable theme for Plone
plonetheme.leavesdew      - An installable Diazo theme for Plone 4.1
plonetheme.level2         - An installable theme for Plone 3.0
plonetheme.lithium        - An installable theme for Plone 3.0
plonetheme.mimbo          - An installable theme for Plone 3.0 based on the Mimbo theme by Darren Hoyt
plonetheme.minimalist     - An installable theme for Plone 3.0
plonetheme.mvob           - An installable Plone4 theme
plonetheme.nautica05      - An installable theme for Plone 3.x
plonetheme.netsightintranet - A clean, intranet theme for Plone 3.0
plonetheme.nonzero        - A theme for Plone 3 based on the Nonzero design by NodeThirtyThree
plonetheme.notredame      - Theme for Plone 3 with color scheme based on new Plone Logo
plonetheme.overlappedtabs - A theme for plone 3.x with overlapping tabs
plonetheme.p2             - An installable theme for Plone 3.0
plonetheme.peerstheme     - An installable theme for Plone 3.0
plonetheme.ploneorg       - Plone.org theme
plonetheme.pollination    - Pollination Theme
plonetheme.porseleinplaats - An installable theme for Plone 3
plonetheme.portaltwodotoh - An elastic lounded corners.
plonetheme.pyar           - A PyAr theme for Plone 3.x
plonetheme.python         -
plonetheme.rcom           - An installable theme for Plone 3.0.
plonetheme.redmusic       - An installable Diazo theme for Plone 4.1
plonetheme.relic          - An installable theme for Plone 3.0.
plonetheme.responsive1140 - A responsive theme for Plone
plonetheme.responsivetheme - An installable theme for Plone 4 that uses a fluid grid system
plonetheme.sait2009       - SAIT-2009 installable Plone theme
plonetheme.simplicity     - An installable theme for Plone 3.0
plonetheme.solemnity      - An installable theme for Plone 3.0 based on the solemnity theme by Six Shooter Media.
plonetheme.stylized       - An installable theme for Plone 3.0 based on the stylized theme by NodeThirtyThree.
plonetheme.subordinate    - An installable theme for Plone 3.0
plonetheme.sunburst       - The default theme for Plone 4.
plonetheme.terrafirma     - An installable theme for Plone 3.0
plonetheme.tidyblog       - An installable theme for Plone 3.0
plonetheme.transition     - An installable Diazo theme for Plone 4.1
plonetheme.twinapex       - Twinapex Theme is a theming product for Plone to give your site a professional corporate look
plonetheme.unilluminated  - An installable Diazo theme for Plone 4.1
plonetheme.wmoWonen       - An installable theme for Plone 4
plonetheme.woodexperience - An installable Diazo theme for Plone 4.1
plonetheme.xtheme         - An installable theme for Plone
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1 diazotheme theme&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
diazotheme.bootstrap      - Plone theme based on Twitter's Bootstrap CSS
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;5 Products themes&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Products.Andreas09Theme   - An example theme for Plone 3.0
Products.HSCustom         - The HSCustom theme was originally created for my band's website.
Products.naked_plone      - An installable theme for Plone 3.0 that does little but override default public stylesheets with empty ones.
Products.NuPlone          - A new theme for Plone 3.0
Products.PloneTableless   - Plone Tableless provides a completly tableless version of the Plone Default theme
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;60 other themes (WTF?!)&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
alterootheme.busycity     - Free City Plone 3.0 Theme
alterootheme.intensesimplicity - A Plone 3.0 Theme based on a free template by David Uliana
alterootheme.lazydays     - A Theme for Plone 3.0 based on OpenWebDesign.org Lazy Days theme
atrealtheme.algol         - An installable theme for Plone 3.0
atrealtheme.gienah        - An installable theme for Plone 3.0
beyondskins.ploneday.site - Installable Plone 3 theme for World Plone Day
beyondskins.ploneday.site2009 - Installable Plone 3 theme developed to promote World Plone Day 2009 (April 22nd)
beyondskins.ploneday.site2010 - World Plone Day 2010 theme.
beyondskins.ploneday.site2011 - World Plone Day 2011 theme.
beyondskins.pyconbrasil2008 - Plone Theme developed by Simples Consultoria
beyondskins.pythonbrasil.site - This product is a installable Plone 3 Theme developed by Simples Consultoria for use in Python Brasil [7] Conference web site.
collective.fastview       - View and viewlet helper modules for Plone theme and five.grok developers
collective.jqueryuithememanager - JQueryUI theme manager for Plone
collective.lesscss        - This package allow theme developers to add LESS stylesheets into a Plone site.
collective.phantasy       - dynamic theme for Plone
collective.responsivetheme - A responsive theme based on sunburst for Plone 4
collective.shinythings    - Jazz up your Plone theme
collective.threecolorstheme - A Phantasy theme variation for Plone, with 3 dynamic colors
cooking.theme             - This is plone theme created from css/html ready design.
dgsanco.plone3theme       - Plone3 Theme for DG Sanco
freearch.theme            - Free Arch Theme for Plone
gameprog.theme            - An installable theme for Plone 3.0
gomobile.templates        - Project templates creating Web and Mobile themes for Plone
heddex.cityportal         - Installable theme for Plone
heddex.greenfield         - An installable theme for Plone 4
heddex.tranquility        - An installable visual theme for Plone 3
ilrt.migrationtool        - A site migration tool for Plone that uses the site's theme egg version releases
iscorpio.themes.redmaple  - iscorpio readmaple Plone 3 theme
ityou.bluetheme           - An installable theme for Plone 4
jalon.theme               - An installable theme for Plone 3
jalonedit.theme           - JalonEdit Theme for PLONE 4
medialog.kuliadentheme    - An installable theme for Plone 3.0
medialog.roundskin        - An installable theme for Plone 3
medialog.subskins         - An installable theme and theming tool for Plone 4
medialog.subskinsiii      - An installable theme for Plone 3.0
plone.app.themeeditor     - Theme Editor for Plone, Customize your theme resources
plone.theme               - Tools for managing themes in CMF and Plone sites
quintagroup.sunrain.policy - extension for SunRain Plone theme
quintagroup.theme.estatelite - Free Diazo Theme for Plone 4.1
quintagroup.theme.lite    - Free Diazo Theme for Plone 4.1
quintagroup.theme.schools - Free Diazo theme for Plone 4.2
quintagroup.theme.sunrain - Free Diazo Theme for Plone 4.2
quintagroup.theme.techlight - Free diazo theme for Plone 4.1
quintagroup.theme.whiteblack - Free Diazo Theme for Plone 4.1
quintagroup.themetemplate - Quintagroup theme template for Plone 3 with nested namespace
raptus.theme.plonebartop  - move the plone-bar on the top
raptus.theme.ploneformgen - set standard theme for ploneformgen
redomino.css3theme        - A responsive (and mobile) theme for Plone 4 (based on sunburst)
sc.paster.theme           - Produto de tema para o portal Plone (skin).
semicinternet.theme.cambrils - A free Plone theme from SEMIC Internet for Plone 4
soniatheme                - An installable theme for Plone 3.0
themetweaker.themeswitcher - A product for switching themes in Plone.
uofl.dztheme.simplesite   - A Diazo theme for Plone 4 and UofL Simple Left-Nav Sites
uvsq.theme                - An installable theme for Plone 3
v2.theme                  - An installable theme for Plone 4
webcouturier.city.theme   - Plone visual theme
webcouturier.icompany.theme - Plone theme in blue/green colors
xdvtheme.inventions       - A xdvtheme for Plone
xdvtheme.sparkling        - An xdv Theme for Plone
zettwerk.ui               - Adding jquery.ui's themeroller to plone 4 for easy theme customization.
&lt;/pre&gt;
&lt;p&gt;That last one is a surprise, and that's a total of &lt;strong&gt;154 themes for Plone on PyPI&lt;/strong&gt; (assuming I didn't miss any which I probably did). If we had the man power, all of these themes could be made to work with the latest Plone and work with either old style or new style technology. So if we can't do that (which is a hugely ambitious goal) let's at least try to come close!&lt;/p&gt;
&lt;p&gt;Do you like this post, and/or appreciate my open source work? Help build the commons by gittiping me: &lt;a class="reference external" href="https://www.gittip.com/aclark4life/"&gt;https://www.gittip.com/aclark4life/&lt;/a&gt;.&lt;/p&gt;
&lt;iframe style="border: 0; margin: 0; padding: 0;"
    src="https://www.gittip.com/aclark4life/widget.html"
    width="48pt" height="20pt"&gt;&lt;/iframe&gt;&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's getting harder to define what &amp;quot;old style&amp;quot; theming is. For this blog entry, old style theming is some form of customizing the main_template in Plone (I'm ignoring the fact that macros called by main_template are customizable, for now). If we could (consistently, in a core supported way) get newer ways to do that (e.g. browser views instead of CMF skin layers) then &amp;quot;old style&amp;quot; would become &amp;quot;newer style&amp;quot;. It wouldn't become &amp;quot;new style&amp;quot; because Diazo technology is &amp;quot;newer&amp;quot; than browser view technology. Get it? I think my point is this: in addition to seeing Diazo help with isolating the complexity of the stack, I'd like to see the underlying technology modernized. Give me something that looks and feels like &amp;quot;old style&amp;quot; theming (i.e. putting templates in CMF skin layers) but that is built on modern technology (i.e. the ZCA).&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&amp;lt;rant&amp;gt; Have I mentioned today yet that I hate the term &amp;quot;product&amp;quot;? when it's used to refer to a Plone add-on? It's 2012 people. Zope 2 products died last decade. :-p :-) &amp;lt;/rant&amp;gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Sorry for the blog spam</title><link href="http://aclark.net/blog/2012/09/22/sorry-for-the-blog-spam/" rel="alternate"></link><updated>2012-09-22T21:45:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-09-22:2012/09/22/sorry-for-the-blog-spam/</id><summary type="html">&lt;p&gt;As I'm just learning &lt;a class="reference external" href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;, &lt;a class="reference external" href="http://blog.aclark.net/2012/09/21/yes-this-blog-is-now-powered-by-pelican/#comment-658707601"&gt;Dirkjan Ochtman pointed out&lt;/a&gt; that I can have &amp;quot;fancy&amp;quot; URLs via the &lt;cite&gt;ARTICLE_PERMALINK_STRUCTURE&lt;/cite&gt; setting. So the blog spam you are seeing is a result of my publishing the same two articles with two different URLs (fancy and non-fancy). My apologies for the noise.&lt;/p&gt;
&lt;div class="section" id="publishconf-py"&gt;
&lt;h2&gt;publishconf.py&lt;/h2&gt;
&lt;p&gt;And actually, I found &lt;cite&gt;ARTICLE_URL&lt;/cite&gt; and &lt;cite&gt;ARTICLE_SAVE_AS&lt;/cite&gt; to be the settings I wanted to use instead &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[1]&lt;/a&gt;. My &lt;a class="reference external" href="https://github.com/ACLARKNET/aclarknet.github.com/blob/master/publishconf.py"&gt;publishconf.py&lt;/a&gt; now looks like this &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[2]&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ARTICLE_SAVE_AS = '/{date:%Y}/{date:%m}/{date:%d}/{slug}/index.html'
ARTICLE_URL = '/{date:%Y}/{date:%m}/{date:%d}/{slug}/'
AUTHOR = u'Alex Clark'
CATEGORY_FEED_ATOM = None
CATEGORY_FEED_RSS = None
DEFAULT_CATEGORY = 'Blog'
DEFAULT_LANG = 'en'
DEFAULT_PAGINATION = 10
DELETE_OUTPUT_DIRECTORY = True
DISQUS_SITENAME = 'aclark-blog'
GITHUB_URL = 'https://github.com/ACLARKNET/aclarknet.github.com'
GOOGLE_ANALYTICS = 'UA-34988446-1'
SITENAME = u'Alex Clark'
SITEURL = 'http://blog.aclark.net'
SOCIAL = (
    ('GitHub', 'http://github.com/aclark4life'),
    ('Gittip', 'https://www.gittip.com/aclark4life'),
    ('PythonPackages', 'https://pythonpackages.com/user/aclark4life'),
    ('Twitter', 'http://twitter.com/aclark4life'),
    ('atom feed (Mozilla)', 'http://blog.aclark.net/Mozilla.atom.xml'),
    ('atom feed (Plone)', 'http://blog.aclark.net/Plone.atom.xml'),
    ('atom feed (Python)', 'http://blog.aclark.net/Python.atom.xml'),
)
TAG_FEED_ATOM = 'feeds/%s.atom.xml'
TAG_FEED_RSS = None
TWITTER_USERNAME = 'aclark4life'
&lt;/pre&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://pelican.notmyidea.org/en/3.0/settings.html#url-settings"&gt;http://pelican.notmyidea.org/en/3.0/settings.html#url-settings&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I removed the extraneous pelicanconf.py and put everything in one file&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Gittip is the future</title><link href="http://aclark.net/blog/2012/09/21/gittip-is-the-future/" rel="alternate"></link><updated>2012-09-21T21:45:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-09-21:2012/09/21/gittip-is-the-future/</id><summary type="html">&lt;p&gt;Heard of Gittip? If not, you should know: it has a lot of people (including me) excited about the potential to make a living doing what they love. From the Gittip blog &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Gittip is a system for funding people who build free culture. The core is small weekly gifts. The idea is that if 1,000 people give $1 a week to a great programmer, musician, scientist, teacher, etc., then that frees them up to pursue their vision even further for making the world better.&lt;/blockquote&gt;
&lt;p&gt;I love this idea! In particular, because it speaks to me more than other similar offerings:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chipin&lt;/li&gt;
&lt;li&gt;Flattr&lt;/li&gt;
&lt;li&gt;Kickstarter&lt;/li&gt;
&lt;li&gt;Paypal&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why? If for no other reason, because it comes from a member of the Python community: Chad Whitacre of &lt;a class="reference external" href="http://aspen.io"&gt;http://aspen.io&lt;/a&gt; fame. And the Python community has become near and dear to me, second only to my-one-true-open-source-love: Plone. So I want to see open source developers, particularly Python developers, succeed.&lt;/p&gt;
&lt;img alt="images/gittip.png" src="images/gittip.png" /&gt;
&lt;p&gt;And succeed they will, with gittip. Some particularly impressive results so far:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Chad Whitacre, the founder, is making almost $160 per week: &lt;a class="reference external" href="https://www.gittip.com/whit537/"&gt;https://www.gittip.com/whit537/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;David Glick, a newly independent Plone developer, is making over $100 per week: &lt;a class="reference external" href="https://www.gittip.com/davisagli/"&gt;https://www.gittip.com/davisagli/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read The Docs, everyone's favorite documentation hosting site, is making almost $100 per week: &lt;a class="reference external" href="https://www.gittip.com/readthedocs/"&gt;https://www.gittip.com/readthedocs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whilst no one is making a living off of gittip yet, with enough support and momentum it's only a matter of time before they do. Toward that end, I have written a blog entry for the &lt;a class="reference external" href="http://blog.gittip.com"&gt;gittip blog&lt;/a&gt; describing among other things: how I'd like to make a living with gittip. Here is an excerpt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Chad’s vision for Gittip really speaks to me. All over the world there are thousands of open source developers writing code, managing projects, and moving the world of open source technology forward. This helps millions of individuals, companies and the entire world with a variety of its endeavours.&lt;/p&gt;
&lt;p&gt;What if those folks could easily show their appreciation to individuals known to make open source happen? What if these volunteer developers didn’t need to go get “day jobs” to make a living because the world has taken care of them? What if companies didn’t need to hire employees in the traditional sense because their needs have already been met by open source?&lt;/p&gt;
&lt;p&gt;There is a lot to think about and strive for here, and I’m really excited to help Chad with his mission. On a daily basis I’m involved with, and influential to the following open source projects: Plone (Python-based CMS), Pillow (Python Imaging Library fork), Buildout (Python-based build system), and more. I hope Gittip can help me help you, the open source community and the world.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can read the rest of the article here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.gittip.com/post/31960853095/back-the-stack-pythonpackages-com"&gt;http://blog.gittip.com/post/31960853095/back-the-stack-pythonpackages-com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you'd like to help me, I'm attempting to cover the hosting costs for my startup business: &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;, so I can keep developing it for another year. I truly believe in my vision of a &amp;quot;hosted packaging service&amp;quot;, and I really want to help the Python community fix its packaging story in any way that I can. If in no other way, than by making it so you don't have to think about Python packaging at all (i.e. I'll worry about the various complexities, so you don't have to). You can find me on gittip here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.gittip.com/aclark4life/"&gt;https://www.gittip.com/aclark4life/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, go be generous and help build the commons!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://blog.gittip.com/post/30116848405/with-payouts-gittip-is-minimally-viable"&gt;http://blog.gittip.com/post/30116848405/with-payouts-gittip-is-minimally-viable&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Yes, this blog is now powered by Pelican</title><link href="http://aclark.net/blog/2012/09/21/yes-this-blog-is-now-powered-by-pelican/" rel="alternate"></link><updated>2012-09-21T15:30:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-09-21:2012/09/21/yes-this-blog-is-now-powered-by-pelican/</id><summary type="html">&lt;p&gt;As an open source &amp;quot;Plone guy&amp;quot;, I'm always prepared to defend and explain my choice to &lt;strong&gt;not&lt;/strong&gt; use Plone for blogging. A couple years ago, I started using Wordpress in order to learn its feature set. I enjoyed my time with it, but after moving to wordpress.com for &amp;quot;trouble free&amp;quot; hosting, I found I couldn't control my category feeds the way I wanted; the honeymoon was over.&lt;/p&gt;
&lt;p&gt;This was a giant let down, because I was hoping to avoid putting any time in to my blogging infrastructure. For weeks I did nothing. I poked at various options: Pelican, Plone, Tumblr, others. Eventually, I found my way back to Pelican and now I'm happy again.&lt;/p&gt;
&lt;img alt="images/pelican.png" src="images/pelican.png" /&gt;
&lt;p&gt;Pelican is a static blog generator, as you may have heard. So &lt;strong&gt;one big advantage&lt;/strong&gt; is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You can host it for free, or close to free on any number of free or cheap static website hosting services! (I'm using GitHub Pages)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="other-advantages"&gt;
&lt;h2&gt;Other advantages&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It does feeds right (I need 3 &amp;quot;full body&amp;quot; feeds for: Mozilla, Plone, Python) &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It's fun to configure (edit pelicanconf.py or publishconf.py).&lt;/li&gt;
&lt;li&gt;The &amp;quot;cool kids&amp;quot; use it: e.g. Tarek Ziadé, Kenneth Reitz, Daniel Greenfeld, many others.&lt;/li&gt;
&lt;li&gt;It grows with you: this is huge. You can start using it and feel comfortable right away, but there is always more to learn. This is how all software should be. Unfortunately, it's tough to get it right (I think this is formally called UX).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="some-disadvantages"&gt;
&lt;h2&gt;Some disadvantages&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't like typing in the terminal? Pelican is not for you.&lt;/li&gt;
&lt;li&gt;No &amp;quot;nested&amp;quot; entries e.g. 2012/09/21/entry.html. I don't know if there is a formal name for this feature, but I miss it (if for no other reason than &amp;quot;cool URLS never change&amp;quot; i.e. I've broken links with this move.)&lt;/li&gt;
&lt;li&gt;The pelican-import has some bugs, so I'm doing a lot of manual cleanup (I don't mind this though.)&lt;/li&gt;
&lt;li&gt;Tags are categories and categories are tags (or something). I had to convert all my categories to tags, and then turn on tag feeds and turn off category feeds. Category feeds are on by default and tag feeds are off by default. Also ATOM is on and RSS is off, if that is of interest to you. (Since this is really just configuration change and not a disadvantage per sé, it probably belongs more in the next section where I discuss my setup.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are curious about my setup, here are the details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;Getting started with Pelican was easy, basically:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ virtualenv .
$ bin/pip install pelican BeautifulSoup Markdown
$ bin/pelican-quickstart
&lt;/pre&gt;
&lt;p&gt;At this point, after I answer the quickstart questions I:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ source bin/activate
$ make html
&lt;/pre&gt;
&lt;p&gt;Now the content is ready to host (which for me just involves a git push).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tweaks"&gt;
&lt;h2&gt;Tweaks&lt;/h2&gt;
&lt;p&gt;A few things were tricky.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I wanted to host my articles at the top level of the repo for serving on GitHub Pages, so I modified the Makefile to make it so &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[2]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Categories control what links are available in the header, so I disabled them all but one called &amp;quot;Blog&amp;quot;. Not ideal, but it works.&lt;/li&gt;
&lt;li&gt;The &amp;quot;social&amp;quot; links, and my disqus and analytics API keys were all a pleasure to configure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;Now I write articles in restructured text in the &lt;cite&gt;content/&lt;/cite&gt; directory and publish them like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ make publish; git commit -a -m &amp;quot;Publish&amp;quot;; git push
&lt;/pre&gt;
&lt;p&gt;All the details are here if you'd like to take a look:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclarknet.github.com/commits/master"&gt;https://github.com/ACLARKNET/aclarknet.github.com/commits/master&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comments from more knowledgable Pelican users welcome. Like this article? Tip me on Gittip!&lt;/p&gt;
&lt;iframe style="border: 0; margin: 0; padding: 0;"
    src="https://www.gittip.com/aclark4life/widget.html"
    width="48pt" height="20pt"&gt;&lt;/iframe&gt;&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is actually my first &amp;quot;test&amp;quot; post with Pelican so I will get a chance to see how the feeds perform. But they looked good in testing.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I think I broke &amp;quot;make html&amp;quot;, actually. Primarily I just needed to make it not &amp;quot;clean&amp;quot; the entire repo.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Bootstrapping a Buildout 1-6 release</title><link href="http://aclark.net/blog/2012/08/13/bootstrapping-a-buildout-1-6-release/" rel="alternate"></link><updated>2012-08-13T21:10:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-13:2012/08/13/bootstrapping-a-buildout-1-6-release/</id><summary type="html">&lt;p&gt;A lot of work has been done on Buildout lately, most notably:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Jim Fulton is &lt;a class="reference external" href="https://github.com/buildout/buildout/commits/master"&gt;working on Buildout 2&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ross Patterson has greatly &lt;a class="reference external" href="http://rpatterson.net/blog/buildout-performance-improvements"&gt;improved Buildout performance&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Domen Kožar has &lt;a class="reference external" href="http://zope3.pov.lt/trac/changeset/127507"&gt;provided a patch&lt;/a&gt; that takes a conservative
approach to Ross's performance improvements.&lt;/li&gt;
&lt;li&gt;I have offered to do a release.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And there are a &lt;a class="reference external" href="http://mail.python.org/pipermail/distutils-sig/2012-July/018779.html"&gt;handful of other changes&lt;/a&gt; in &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/zc.buildout/trunk/CHANGES.txt?rev=127507#L4"&gt;trunk on svn.zope.org&lt;/a&gt;,
of which my favorite is:&lt;/p&gt;
&lt;blockquote&gt;
The buildout init command now accepts distribution requirements and
paths to set up a custom interpreter part that has the distributions
or parts in the path. For example:: $ python bootstrap.py init
BeautifulSoup&lt;/blockquote&gt;
&lt;p&gt;So with that, I am &lt;strong&gt;planning to do a zc.buildout 1.6 release within 24
hours&lt;/strong&gt; or so of now. Please add a comment or weigh in on
&lt;a class="reference external" href="http://mail.python.org/mailman/listinfo/distutils-sig"&gt;distutils-sig&lt;/a&gt; if you object. We have run the tests on Windows, and
discovered only pre-existing failures. We are also preparing to do
&amp;quot;Buildout 2 prophylactic releases&amp;quot; (i.e. releases that make 1.x continue
to work when 2.x is released) in the 1.6.x series.&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>pythonpackages.com: pyformance 0.2</title><link href="http://aclark.net/blog/2012/08/13/pythonpackagescom-pyformance-02/" rel="alternate"></link><updated>2012-08-13T13:15:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-13:2012/08/13/pythonpackagescom-pyformance-02/</id><summary type="html">&lt;p&gt;&lt;em&gt;pythonpackages.com helps Python programmers package and release their
software with just a few clicks.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="pyformance-0-2"&gt;
&lt;h2&gt;pyformance 0.2&lt;/h2&gt;
&lt;p&gt;pythonpackages.com recently processed it's first official release via the &lt;a class="reference external" href="http://blog.aclark.net/pythonpackagescom-new-github-service-quotgit-push-to-releasequot.html"&gt;new GitHub Service&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As such, we are celebrating the release of &lt;a class="reference external" href="https://github.com/omergertel/pyformance"&gt;pyformance&lt;/a&gt; 0.2! According to the author &lt;a class="reference external" href="https://twitter.com/omergertel"&gt;Omer Gertel&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
It's a straight forward port of Coda Hale's fantastic metrics
package (originally for java). I don't have all of it ported yet,
and it's not tested as much as it should be, but it's a good start.

(BTW, if you do blog about PyFormance, you may also want to mention
this&amp;nbsp;talk by Coda Hale about metrics: http://www.youtube.com/watch?v=czes-oa0yik
He explains some of the math behind the package.)
&lt;/pre&gt;
&lt;p&gt;Done! :-) Thanks Omer for using our service. Check out pyformance on GitHub:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/omergertel/pyformance"&gt;https://github.com/omergertel/pyformance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the &lt;a class="reference external" href="http://www.youtube.com/watch?v=czes-oa0yik"&gt;talk by Coda Hale&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>All My Python Packages Are Belong To GitHub</title><link href="http://aclark.net/blog/2012/08/10/all-my-python-packages-are-belong-to-github/" rel="alternate"></link><updated>2012-08-10T20:44:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-10:2012/08/10/all-my-python-packages-are-belong-to-github/</id><summary type="html">&lt;p&gt;&lt;em&gt;Including many Plone add-ons&lt;/em&gt; Hi. My name is Alex &amp;quot;please don't call
them products&amp;quot; Clark. But you may call me aclark or aclark4life. In the
spirit of continuing the &lt;a class="reference external" href="http://plone.293351.n2.nabble.com/DVCS-options-for-Plone-Core-tt6295582.html"&gt;great git migration&lt;/a&gt;, and in order to &lt;a class="reference external" href="http://pythonpackages.com/signup"&gt;beta
test pythonpackages.com&lt;/a&gt;, I've just moved the last of my Subversion
repositories to GitHub. This means &lt;a class="reference external" href="https://gist.github.com/3317288"&gt;any package I have Owner or
Maintainer permission for on PyPI&lt;/a&gt; now lives in one of 8 GitHub
organizations, or my personal GitHub account on github.com. Great
Success!&lt;/p&gt;
&lt;div class="section" id="plone-devs-y-u-no-move-repos"&gt;
&lt;h2&gt;PLONE DEVS: Y U NO MOVE REPOS?&lt;/h2&gt;
&lt;p&gt;The Plone AI team has tentatively scheduled the end-of-2012 as the time
to flip &lt;a class="reference external" href="http://svn.plone.org/svn/collective/"&gt;svn.plone.org/svn/collective&lt;/a&gt; to read only (/plone and
/archetypes are already read only). So if you are still using the old
collective, please take a minute to start thinking about migrating. As
always, I'm happy to provide assistance to anyone that needs it to move
their code. (I'm in #plone on irc.freenode.net or you can email
&lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;.)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>pythonpackages.com: New GitHub Service "push to release"</title><link href="http://aclark.net/blog/2012/08/10/pythonpackagescom-new-github-service-push-to-release/" rel="alternate"></link><updated>2012-08-10T05:50:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-10:2012/08/10/pythonpackagescom-new-github-service-push-to-release/</id><summary type="html">&lt;p&gt;&lt;em&gt;pythonpackages.com helps Python programmers package and release their
software with just a few clicks.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="pythonpackages-github-service"&gt;
&lt;h2&gt;PythonPackages GitHub Service&lt;/h2&gt;
&lt;p&gt;There is a new &lt;a class="reference external" href="https://github.com/github/github-services"&gt;GitHub Service&lt;/a&gt; available for pythonpackages.com that&amp;nbsp;allows you to release Python packages from GitHub to the Python Package Index, simply by pushing a commit message that begins with &amp;quot;Release&amp;quot; e.g.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git commit -a -m &amp;quot;Release 1.0&amp;quot;; git push
&lt;/pre&gt;
&lt;p&gt;(The release creates a tag with the appropriate version number, extracted from setup.py) To use the service, please follow the instructions below.&lt;/p&gt;
&lt;div class="section" id="instructions"&gt;
&lt;h3&gt;Instructions&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sign up for the pythonpackages.com beta: &lt;a class="reference external" href="http://pythonpackages.com/signup"&gt;http://pythonpackages.com/signup&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Follow the &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/introduction.html"&gt;Introduction&lt;/a&gt; instructions.&lt;/li&gt;
&lt;li&gt;On the Python Package Index, authorize pythonpackages.com to act on your behalf, as explained here:&amp;nbsp;&lt;a class="reference external" href="http://blog.aclark.net/pythonpackagescom-using-pypi039s-oauth1-support-to-register-and-upload-packages.html"&gt;http://blog.aclark.net/pythonpackagescom-using-pypi039s-oauth1-support-to-register-and-upload-packages.html&lt;/a&gt; (&lt;strong&gt;pythonpackages.com -&amp;gt; Dashboard -&amp;gt; Manage accounts -&amp;gt; PyPI -&amp;gt; Authorize&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;On GitHub, configure the PythonPackages service to be Active on any repository that contains a Python package you want to release (&lt;strong&gt;Repo -&amp;gt; Admin -&amp;gt; Service Hooks -&amp;gt; PythonPackages -&amp;gt; [*] Active&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can git push to release! If you have any trouble, please &lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new"&gt;open a ticket&lt;/a&gt;. These instructions will live permanently here:&amp;nbsp;&lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/github-service.html"&gt;http://docs.pythonpackages.com/en/latest/github-service.html&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>pythonpackages.com: Using PyPI&amp;#039;s OAuth1 support to register and upload packages</title><link href="http://aclark.net/blog/2012/08/07/pythonpackagescom-using-pypi039s-oauth1-support-to-register-and-upload-packages/" rel="alternate"></link><updated>2012-08-07T05:16:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-07:2012/08/07/pythonpackagescom-using-pypi039s-oauth1-support-to-register-and-upload-packages/</id><summary type="html">&lt;p&gt;&lt;strong&gt;*TL;DR&lt;/strong&gt; PyPI has OAuth1 support; pythonpackages.com uses it to send your GitHub repos to PyPI.* Thanks in very large part to &lt;a class="reference external" href="https://twitter.com/r1chardj0n3s"&gt;Richard Jones&lt;/a&gt;, the Python Package Index now has support for registering and uploading packages via OAuth1. And using his &lt;a class="reference external" href="https://gist.github.com/0d46c48b230e61e18479"&gt;sample code&lt;/a&gt; I was able to take advantage of it on pythonpackages.com. The result is a fairly &lt;strong&gt;elegant approach to releasing packages&lt;/strong&gt; sans dirty hacks (I had been asking users for their username and password, then storing them in an encrypted session cookies so I could send them to PyPI.) Here's how it works now.&lt;/p&gt;
&lt;div class="section" id="sign-in-with-github"&gt;
&lt;h2&gt;Sign In With GitHub&lt;/h2&gt;
&lt;p&gt;GitHub provides an easy way to let folks sign in to pythonpackages.com with their APIv3. I was able to code the OAuth dance using only the requests library (HT Kenneth Reitz). This was working as of late 2011.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="select-a-package"&gt;
&lt;h2&gt;Select a package&lt;/h2&gt;
&lt;p&gt;Once you are signed in, you can select a package. Selected packages can perform various actions, one of which is &lt;strong&gt;Tag and Release&lt;/strong&gt;.  As soon as you select Tag and Release, you are required to authenticate with PyPI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="strikeout-enter-your-pypi-credentials"&gt;
&lt;h2&gt;[STRIKEOUT:Enter your PyPI credentials]&lt;/h2&gt;
&lt;p&gt;In order to get the beta out the door, a dirty hack was added to allow users to enter their PyPI credentials. Credentials were saved in an encrypted session cookie, then written out to .pypirc before calling `python setup.py upload`. Really terrible. This was shipped in early July 2012 and is thankfully no longer necessary (though it is &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/security.html#github-credentials"&gt;still necessary to push the initial commit to GitHub.&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="authorize-pythonpackages-com"&gt;
&lt;h2&gt;Authorize pythonpackages.com&lt;/h2&gt;
&lt;p&gt;Now authorization can happen elegantly via OAuth1. First, sign in to PyPI. Then authorize pythonpackages.com to act on your behalf. Lastly, profit (register and upload your package).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="register-and-upload-your-package"&gt;
&lt;h2&gt;Register and upload your package&lt;/h2&gt;
&lt;p&gt;At this point you are free to tag and release. I am really excited about this. I began fantasizing about it almost a year ago and after several false starts (pypissh, openid, avoidance) it is now a reality. If you have a minute, please &lt;a class="reference external" href="https://pythonpackages.com/signup"&gt;give it a try&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Building Windows Installers In The Cloud</title><link href="http://aclark.net/blog/2012/08/01/building-windows-installers-in-the-cloud/" rel="alternate"></link><updated>2012-08-01T22:19:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-08-01:2012/08/01/building-windows-installers-in-the-cloud/</id><summary type="html">&lt;p&gt;With pythonpackages.com, I want to solve real problems for people today. So here's a proof of concept for building Windows installers quickly and easily &amp;quot;in the cloud&amp;quot; (i.e. without a Windows machine local). This article is mostly about the back end, as the front end is &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/introduction.html"&gt;already documented&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TL;DR: We're moving from proof-of-concept phase to useful-service phase. If you find the demo interesting and want to help build something great, please consider purchasing one of&lt;/em&gt; &lt;a class="reference external" href="http://pythonpackages.com/plans"&gt;our current plans&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="step-1-to-the-clouds"&gt;
&lt;h2&gt;Step 1: To The Clouds&lt;/h2&gt;
&lt;p&gt;For the purpose of the demo, I booted up a Windows server on Rackspace Cloud and started installing things. On the short list of things to install was:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.7 from python.org.&lt;/li&gt;
&lt;li&gt;GitHub for Windows from github.com (mainly for git.)&lt;/li&gt;
&lt;li&gt;pythonpackages.com from bitbucket.org (free private repos!)&lt;/li&gt;
&lt;li&gt;Microsoft compiler (free version, make sure to use the same one used to compile Python.)&lt;/li&gt;
&lt;li&gt;Redis for Windows (Hell froze over, you can find this in Microsoft's GitHub account: &lt;a class="reference external" href="https://github.com/MSOpenTech/Redis"&gt;https://github.com/MSOpenTech/Redis&lt;/a&gt;.)&lt;/li&gt;
&lt;li&gt;Vim.exe (which I copy to vi.exe because I hate typing vim.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once I had all these things in place, I was able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install pythonpackages.com (pip install -r requirements.txt.)&lt;/li&gt;
&lt;li&gt;Compile and run Redis (Several projects bundled together in Visual
Studio is apparently called a &amp;quot;solution&amp;quot;, how quaint!)&lt;/li&gt;
&lt;li&gt;Start the site.&lt;/li&gt;
&lt;li&gt;Start testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-fix-all-the-bugs"&gt;
&lt;h2&gt;Step 2: Fix all the bugs&lt;/h2&gt;
&lt;p&gt;This step involved a lot of cursing:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Backslashes.&lt;/li&gt;
&lt;li&gt;Lack of vi key bindings.&lt;/li&gt;
&lt;li&gt;Other Windows-isms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I also praised my &lt;a class="reference external" href="http://cord.sourceforge.net/"&gt;CoRD Remote Desktop Client&lt;/a&gt; because it worked awesome. Anyway, the bugs/issues I fixed (and didn't fix) were roughly:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create new application on GitHub and configured keys accordingly.&lt;/li&gt;
&lt;li&gt;Switch Stripe keys to testing.&lt;/li&gt;
&lt;li&gt;Fix Python paths and other trivial changes, so the application can run `python setup.py bdist_wininst`.&lt;/li&gt;
&lt;li&gt;JavaScript is completely broken for some reason I've yet to determine (haven't looked yet, but guessing Windows path related).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-profit"&gt;
&lt;h2&gt;Step 3: Profit!&lt;/h2&gt;
&lt;p&gt;I have to admit: I was giddy when it started working, and I was able to create a Windows Installer for Pillow (Python Imaging Library fork). I was even happier when I ran the installer and it worked. That's it. Next I hope to &lt;a class="reference external" href="http://pythonpackages.com/plans"&gt;get some customers&lt;/a&gt; so I can keep the Windows box running, and make it available to the public.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="big-picture"&gt;
&lt;h2&gt;Big Picture&lt;/h2&gt;
&lt;p&gt;In case you are interested, the &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/roadmap.html"&gt;roadmap for beta Q3 is here&lt;/a&gt;. I will also mention that I recently used &lt;a class="reference external" href="http://dia-installer.de/"&gt;Dia&lt;/a&gt; (&amp;lt;3) to create this info-graphic, in hopes of better communicating what I'm trying to build. Check it out!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Pillow moved to python-imaging organization</title><link href="http://aclark.net/blog/2012/07/25/pillow-moved-to-python-imaging-organization/" rel="alternate"></link><updated>2012-07-25T02:19:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-07-25:2012/07/25/pillow-moved-to-python-imaging-organization/</id><summary type="html">&lt;p&gt;On 7/30/2010 Pillow, the &amp;quot;friendly&amp;quot; PIL fork, was released. Since then,
there have been a number of releases:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vanity Pillow
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.0.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-07-31&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 800
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-08-01&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 652
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-08-02&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,987
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 589
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 587
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 876
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.6.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-01&amp;nbsp;&amp;nbsp;&amp;nbsp; 6,706
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.0.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-05-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 678
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-05-31&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 663
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-02&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,460
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 569
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,156
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-07&amp;nbsp;&amp;nbsp; 17,429
Pillow-1.7.5-py2.7-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 917
Pillow-1.7.5-py2.6-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 918
Pillow-1.7.5-py2.5-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 516
Pillow-1.7.5-py2.4-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 477
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.6.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 7,401
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp; 10,540
Pillow-1.7.6-py2.7-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 632
Pillow-1.7.6-py2.6-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 439
Pillow-1.7.6-py2.5-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 332
Pillow-1.7.6-py2.4-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 336
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pillow-1.7.7.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-04-05&amp;nbsp;&amp;nbsp; 28,704
Pillow-1.7.7-py2.7-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 716
Pillow-1.7.7-py2.6-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 354
Pillow-1.7.7-py2.5-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 198
Pillow-1.7.7-py2.4-win32.egg&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 201
----------------------------------------------------
Pillow has been downloaded 91,833 times!
&lt;/pre&gt;
&lt;p&gt;Originally, I thought if the fork went nowhere, at least the Plone
community could maintain it for its own needs. However since then, a
number of folks outside the Plone community have taken an interest, so
I've decided to move the repository from the &lt;a class="reference external" href="http://github.com/collective"&gt;Plone collective&lt;/a&gt; to a
new organization called &lt;a class="reference external" href="http://github.com/python-imaging"&gt;python-imaging&lt;/a&gt;. With this change, I hope to
gather folks to help develop a Python 3-compat release before PyCon
2013. (There are various PIL forks with Python 3-compat already in
existence, as well as the official PIL 1.2-dev tarball available from
bitbucket, which has some Python 3-compat if I understand correctly.)
The new home for Pillow is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/python-imaging/Pillow"&gt;https://github.com/python-imaging/Pillow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>The Plones Templer</title><link href="http://aclark.net/blog/2012/07/12/the-plones-templer/" rel="alternate"></link><updated>2012-07-12T20:48:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-07-12:2012/07/12/the-plones-templer/</id><summary type="html">&lt;p&gt;(c.f. Knights Templar) I think we have a situation that could use the
help of the Plone and Python communities at large. It goes something
like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;About 6 years ago, &lt;a class="reference external" href="http://danielnouri.org/blog/devel/zope/quickstart-with-pastescript.html"&gt;Daniel Nouri started the ZopeSkel project&lt;/a&gt; to
provide a Zope project template to &lt;a class="reference external" href="http://pypi.python.org/pypi/PasteScript/1.7.5"&gt;PasteScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sometime between then and now, the Plone community latched on to the
ZopeSkel project to include templates for its projects.&lt;/li&gt;
&lt;li&gt;About 3 years ago, as part of the ZopeSkel project, &lt;a class="reference external" href="http://www.coactivate.org/projects/zopeskel-bbq-sprint/project-home"&gt;some folks at
the BBQ&lt;/a&gt; sprint built a more user friendly UI on top of PasteScript.
And some refactoring of the project was planned or occurred, during
which time the entire project was renamed to &amp;quot;Templer&amp;quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At present, if you install the latest ZopeSkel (3.0b3) you get:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/paster create --list-templates
Available templates:
&amp;nbsp; archetype:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A Plone project that uses Archetypes content types
&amp;nbsp; basic_buildout:&amp;nbsp;&amp;nbsp;&amp;nbsp; A basic buildout skeleton
&amp;nbsp; basic_namespace:&amp;nbsp;&amp;nbsp; A basic Python project with a namespace package
&amp;nbsp; basic_package:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A basic setuptools-enabled package
&amp;nbsp; nested_namespace:&amp;nbsp; A basic Python project with a nested namespace (2 dots in name)
&amp;nbsp; paste_deploy:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A web application deployed through paste.deploy
&amp;nbsp; plone_basic:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A package for Plone add-ons
&amp;nbsp; plone_nested:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A package for Plone add-ons with a nested namespace
&amp;nbsp; recipe:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A recipe project for zc.buildout
&amp;nbsp; zope2_basic:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A Zope project
&amp;nbsp; zope2_nested:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A nested-namespace Zope package
&lt;/pre&gt;
&lt;p&gt;Looks nice, but some templates are missing. If you install the previous
stable version (2.21.2), you get this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/paster create --list-templates
Available templates:
&amp;nbsp; archetype:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A Plone project that uses Archetypes content types
&amp;nbsp; basic_namespace:&amp;nbsp;&amp;nbsp;&amp;nbsp; A basic Python project with a namespace package
&amp;nbsp; basic_package:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A basic setuptools-enabled package
&amp;nbsp; basic_zope:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A Zope project
&amp;nbsp; kss_plugin:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A project for a KSS plugin
&amp;nbsp; nested_namespace:&amp;nbsp;&amp;nbsp; A basic Python project with a nested namespace (2 dots in name)
&amp;nbsp; paste_deploy:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A web application deployed through paste.deploy
&amp;nbsp; plone:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A project for Plone add-ons
&amp;nbsp; plone2.5_buildout:&amp;nbsp; A buildout for Plone 2.5 projects
&amp;nbsp; plone2.5_theme:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A theme for Plone 2.5
&amp;nbsp; plone2_theme:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A theme for Plone 2.1
&amp;nbsp; plone3_buildout:&amp;nbsp;&amp;nbsp;&amp;nbsp; A buildout for Plone 3 installation
&amp;nbsp; plone3_portlet:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A Plone 3 portlet
&amp;nbsp; plone3_theme:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A theme for Plone 3
&amp;nbsp; plone4_buildout:&amp;nbsp;&amp;nbsp;&amp;nbsp; A buildout for Plone 4 developer installation
&amp;nbsp; plone_app:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A project for Plone add-ons with a nested namespace (2 dots in name)
&amp;nbsp; plone_hosting:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Plone hosting: buildout with ZEO and Plone versions below 3.2
&amp;nbsp; plone_pas:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A project for a Plone PAS plugin
&amp;nbsp; recipe:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A recipe project for zc.buildout
&amp;nbsp; silva_buildout:&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; A buildout for Silva projects
&lt;/pre&gt;
&lt;p&gt;Looks a lot better. Additionally, with the previous release (2.21.2) you
can install zopeskel.dexterity, and &amp;quot;dexterity&amp;quot; will show up in the list
of available templates (but not so with 3.0b3). So what's left to finish
the move from ZopeSkel to Templer? I'm told by Chris Ewing (the current
project lead) that it's mostly a matter of missing imports in various
Python packages that provide templates to PasteScript. Let's. Finish.
This. This frustrates me because Paster is a nice system (that provides
pluggable commands, and code gen from templates). And ZopeSkel was a
nice system (that provided additional templates and a friendly UI). And
Templer will be a great system, but it's not there yet. So we need to
help Chris et. al. get it there ASAP. In addition to the code
refactoring, they have produced some &lt;a class="reference external" href="http://templer-manual.readthedocs.org/en/latest/index.html"&gt;nice documentation available on
readthedocs.org&lt;/a&gt;. If you are interested in helping, please gather
around the #plone on irc.freenode.net to discuss options (I am aclark on
IRC).&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>pythonpackages.com beta launch</title><link href="http://aclark.net/blog/2012/07/04/pythonpackagescom-beta-launch/" rel="alternate"></link><updated>2012-07-04T05:19:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-07-04:2012/07/04/pythonpackagescom-beta-launch/</id><summary type="html">&lt;p&gt;After 9 months of development, pythonpackages.com has grand-ceremoniously flipped the switch from alpha to beta. Here is an overview of the beta release features.&lt;/p&gt;
&lt;div class="section" id="killer-github-integration"&gt;
&lt;h2&gt;&lt;strong&gt;Killer GitHub integration&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The workflow you may now enjoy is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Login with your GitHub account&lt;/li&gt;
&lt;li&gt;Select a repository that contains a Python package&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="one-click-release"&gt;
&lt;h2&gt;One-click release&lt;/h2&gt;
&lt;p&gt;More sweet workflow:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Click a button to release to a test index, PyPI&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="create-packages-through-the-web-with-pastescript"&gt;
&lt;h2&gt;Create packages through-the-web (with PasteScript)&lt;/h2&gt;
&lt;p&gt;There's a lot of room for growth, but this feature is exciting even in its simplest form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dashboard-o-releases"&gt;
&lt;h2&gt;Dashboard o releases&lt;/h2&gt;
&lt;p&gt;pythonpackages.com keeps track of your releases, using the same technology that powers the alpha release &amp;quot;package featuring&amp;quot; feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github-organization-support"&gt;
&lt;h2&gt;GitHub Organization support&lt;/h2&gt;
&lt;p&gt;But wait, there's more. Paid plans (which have not been deployed yet) get access to GitHub organizations, whose repositories can then be &amp;quot;slotted&amp;quot; like normal. If you'd like to get started using the site, check out the &lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/crashcourse.html"&gt;crash course&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Zope2 Bootstrap</title><link href="http://aclark.net/blog/2012/06/12/zope2-bootstrap/" rel="alternate"></link><updated>2012-06-12T10:27:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-06-12:2012/06/12/zope2-bootstrap/</id><summary type="html">&lt;p&gt;&lt;em&gt;Bootstrap all the things, including Zope2.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/zope2_bootstrap"&gt;zope2_bootstrap&lt;/a&gt; is a new Python package that &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.monkeypatcher"&gt;monkey patches&lt;/a&gt; Zope2 in order to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Replace &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/Zope/trunk/src/App/dtml/manage_page_style.css.dtml"&gt;manage_page_styles.css.dtml&lt;/a&gt; styles with &lt;a class="reference external" href="http://twitter.github.com/bootstrap/base-css.html"&gt;Twitter Bootstrap&lt;/a&gt; styles.&lt;/li&gt;
&lt;li&gt;Adds CSS classes to &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/Zope/trunk/src/OFS/dtml/main.dtml"&gt;main&lt;/a&gt; and/or &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/Products.ExternalEditor/trunk/Products/ExternalEditor/manage_main.dtml"&gt;manage_main&lt;/a&gt; tables.&lt;/li&gt;
&lt;li&gt;Inserts a Plone logo (if Plone is installed) above &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/Products.ExternalEditor/trunk/Products/ExternalEditor/manage_tabs.dtml"&gt;manage_tabs.dtml&lt;/a&gt; tabs (h/t: &lt;a class="reference external" href="https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/patches/addzmiplonesite.py"&gt;https://github.com/plone/Products.CMFPlone/blob/master/Products/CMFPlone/patches/addzmiplonesite.py&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Inserts a ZMI warning (if Plone is installed) below &lt;a class="reference external" href="http://zope3.pov.lt/trac/browser/Products.ExternalEditor/trunk/Products/ExternalEditor/manage_tabs.dtml"&gt;manage_tabs.dtml&lt;/a&gt; tabs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next version, I'll try to import &lt;a class="reference external" href="http://twitter.github.com/bootstrap/javascript.html"&gt;Twitter Bootstrap JavaScript&lt;/a&gt; for even more goodness. Enjoy, and give feedback in the comments, or &lt;a class="reference external" href="https://github.com/aclark4life/zope2_bootstrap/issues"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>A simple printer of nested lists</title><link href="http://aclark.net/blog/2012/05/23/a-simple-printer-of-nested-lists/" rel="alternate"></link><updated>2012-05-23T22:58:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-05-23:2012/05/23/a-simple-printer-of-nested-lists/</id><summary type="html">&lt;p&gt;&lt;em&gt;A rant&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Do you ever get the urge to kill? How many of us cringe whenever we see these words? Lately I've been spending a lot of time developing &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;, (now running on heroku!) during which time I see a lot of these kinds of packages being released.&lt;/p&gt;
&lt;p&gt;I kid about the killing part, but seriously: &lt;strong&gt;this is a problem&lt;/strong&gt;.  Fortunately for us, our PyPI overloads see fit to occasionally remove these packages, and for this I am grateful.&lt;/p&gt;
&lt;p&gt;I mean it makes me &lt;em&gt;dance-around-the-room&lt;/em&gt; happy! Ahem. But are they really all gone? Close enough. A quick &lt;a class="reference external" href="https://crate.io/?q=a+simple+printer+of+nested+lists"&gt;crate.io search&lt;/a&gt; now shows only 2 packages instead of 4 pages of results.&lt;/p&gt;
&lt;p&gt;Hallelujah! But is this the best we can do? I know that some well-meaning person wrote a book containing the example that is leading some poor, misguided souls to spam PyPI (if only the author listed the test site instead: &lt;a class="reference external" href="http://testpypi.python.org/pypi"&gt;http://testpypi.python.org/pypi&lt;/a&gt;). And I have to assume that this was just some terrible mistake. But do we all have to live with this mistake?&lt;/p&gt;
&lt;p&gt;I'm asking because I honestly don't know the answer. I remember when I started pythonpackages.com, the &lt;a class="reference external" href="http://pythonpackages.com/package/deliverance"&gt;Deliverance&lt;/a&gt; documentation was being updated something like every 5 minutes (kidding again, but it was frequent enough to be annoying). After grousing about it in public, it stopped happening!&lt;/p&gt;
&lt;p&gt;I wonder if some good natured grousing about our friends (read: enemies) the &lt;em&gt;simple printers of nested lists&lt;/em&gt; will do the same?&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Adam Yauch has passed</title><link href="http://aclark.net/blog/2012/05/11/adam-yauch-has-passed/" rel="alternate"></link><updated>2012-05-11T09:58:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-05-11:2012/05/11/adam-yauch-has-passed/</id><summary type="html">&lt;p&gt;&lt;em&gt;And why it matters to tech people, like me&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(I hope my tech colleagues will indulge my thoughts on the recent passing of Beastie Boy Adam Yauch.)&lt;/p&gt;
&lt;p&gt;TL;DR: I &amp;lt;3 the Beastie Boys and will miss Adam Yauch; and I suspect many others in the tech world do, and will, too&lt;/p&gt;
&lt;div class="section" id="where-i-came-from"&gt;
&lt;h2&gt;Where I came from&lt;/h2&gt;
&lt;p&gt;For as long as I can remember, I've been trying to emulate my heroes. It started with pop music in the 80s and artists like Michael Jackson, Madonna, and of course the Beastie Boys. While I was obsessed with Michael Jackson back then, I don't recall trying too hard to emulate the Beastie Boys… until the 90s.&lt;/p&gt;
&lt;p&gt;In the early 90s, I was just out of high school (where I discovered Led Zeppelin, Pink Floyd, Beatles, Stones etc), was working full time at Chili's, and had no serious plans for college. I was really into music, but didn't have the social skills required to participate in any meaningful activities, like playing in a band.&lt;/p&gt;
&lt;p&gt;But I loved music.&lt;/p&gt;
&lt;p&gt;I listened to Nirvana, Beastie Boys, and any number of other pop, rock and rap acts of the 90s. I went to rock shows at the 8x10 in Baltimore and 9:30 club in DC. I went to festivals like the HFSistival and Lollapalooza. Throughout the decade, I formulated my thoughts on how I would, one day, start a band.&lt;/p&gt;
&lt;p&gt;To say the Beastie Boys were inspirational to me during this time period would be a colossal understatement (remember the first time you saw the &amp;quot;So Watcha Want?&amp;quot; video?) While I wholly identified with the angst-ridden music of Nirvana, I also equally identified with the good natured spirit of, and dope-ass-jams from, the Beastie Boys: three guys producing kick ass music with, among other instruments, a &amp;quot;bullshit mic, made out of plastic&amp;quot;. Most importantly: they never took themselves too seriously. They made great music, but they were also just like you and me. They made you feel like you could do it, too.&lt;/p&gt;
&lt;p&gt;In the late 90s and early to mid 2000s, I finally got a chance to play music. I started a band, played some shows, recorded a few albums, and had a lot of fun. Most importantly: I proved to myself I could do it.  The shows I put on with my band were awesome; they were true rock shows: those in which the audience responded positively, viscerally. There is no better feeling in the world than that type of self-expression.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-i-am-now"&gt;
&lt;h2&gt;Who I am now&lt;/h2&gt;
&lt;p&gt;Eventually the band imploded, and I found a new obsession: technology. I have always been obsessed with tech, but never focused on it exclusively until the mid to late 2000s. Now I have a new set of heroes to emulate, and many new things to prove to myself I can do. Maybe I'll even play music again one day, but if I don't, I know that I accomplished, on some level, what I set out to do. And that is a great feeling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-we-are-all-headed"&gt;
&lt;h2&gt;Where we are all headed&lt;/h2&gt;
&lt;p&gt;We are all headed forward, now, without Adam Yauch to inspire us anew.  This sucks more than words can express; but it is, alas, a part of life.  Without death to make life precious, there would be no joy in living. We all only have a short period of time in life to accomplish our goals, so it is important that we spend time trying to do so. (And if your goals include helping other people, bonus points from Adam.)&lt;/p&gt;
&lt;p&gt;I cannot thank Adam Yauch (MCA), Adam Horovitz (Ad-Rock), and Mike D enough; for providing me with all the inspiration I needed, when I needed it, to live my life; it has made all the difference. I know that Ad-Rock and Mike D will continue to live their lives; and whether that includes performing as &amp;quot;Beastie Boys&amp;quot; or not, does not matter to me; I will still be watching, waiting to be inspired again. And to Adam Yauch who has rapped, joked, snowboarded, and philanthropized his way through all our lives: thank you for the inspiration; I use it every day, and I'll never forget it was &lt;em&gt;you&lt;/em&gt; and your closest two brothers Ad-Rock and Mike D who gave it to me.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>test-plone tmp</title><link href="http://aclark.net/blog/2012/04/04/test-plone-tmp/" rel="alternate"></link><updated>2012-04-04T14:14:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-04-04:2012/04/04/test-plone-tmp/</id><summary type="html">&lt;p&gt;Since Day 1 with Plone circa 2004, I've always taken pride in and greatly enjoyed refining my development environment. It's been stable for a while now (&amp;gt; 1 year or so) so I thought I'd share.&lt;/p&gt;
&lt;div class="section" id="operating-system"&gt;
&lt;h2&gt;Operating system&lt;/h2&gt;
&lt;p&gt;Mac OS X Latest (Lion, at the time of this writing)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="terminal"&gt;
&lt;h2&gt;Terminal&lt;/h2&gt;
&lt;p&gt;Mac OS X Terminal&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="editor"&gt;
&lt;h2&gt;Editor&lt;/h2&gt;
&lt;p&gt;Vim&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;p&gt;Yes. All versions, via the collective Python buildout:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/collective/buildout.python"&gt;https://github.com/collective/buildout.python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="plone"&gt;
&lt;h2&gt;Plone&lt;/h2&gt;
&lt;p&gt;Yes. All versions, via pythonpackages.com:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.pythonpackages.com/en/latest/advanced.html"&gt;http://docs.pythonpackages.com/en/latest/advanced.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-tools"&gt;
&lt;h2&gt;Additional tools&lt;/h2&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://github.com/aclark4life/binfiles/blob/master/test-plone"&gt;shell script to run virtualenv, buildout, etc&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[bash] #!/bin/sh if ! [ -n &amp;quot;$1&amp;quot; ] then echo &amp;quot;Usage:nn$0 &amp;lt;dir&amp;gt;n&amp;quot; exit 1
fi if ! [ -d $1 ] then mkdir $1 fi cd $1 virtualenv-2.7 . bin/pip
install zc.buildout bin/buildout init cat &amp;lt;&amp;lt; EOF &amp;gt; buildout.cfg
[buildout] extends =
http://build.pythonpackages.com/buildout/plone/4.2.x-dev EOF
bin/buildout bin/plone start sleep 4 echo &amp;quot;Adding Plone site...&amp;quot; curl -d
form.submitted:boolean=&amp;quot;True&amp;quot;
http://admin:admin&amp;#64;localhost:8080/&amp;#64;&amp;#64;plone-addsite?site\_id=Plone
bin/plone stop bin/plone fg [/bash]
&lt;/pre&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://github.com/aclark4life/binfiles/blob/master/tmp"&gt;Python script to create temporary directories&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[python] #!/usr/bin/env python

import os import tempfile print os.path.abspath(tempfile.mkdtemp())
[/python]
&lt;/pre&gt;
&lt;p&gt;A default buildout config file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
eggs-directory = /Users/aclark/Developer/eggs-directory
download-cache = /Users/aclark/Developer/download-cache
extends-cache = /Users/aclark/Developer/extends-cache
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="workflow"&gt;
&lt;h2&gt;Workflow&lt;/h2&gt;
&lt;p&gt;My typical workflow looks like this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hang in #plone on irc.freenode.net and wait for questions&lt;/li&gt;
&lt;li&gt;Hear question and get inspired to run Plone&lt;/li&gt;
&lt;li&gt;Run: &lt;strong&gt;$ test-plone `tmp`&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gist.github.com/2304317"&gt;~ 1 minute later&lt;/a&gt; I'm browsing &lt;strong&gt;http://localhost:8080/Plone&lt;/strong&gt; and can install add-ons, check ZMI settings, etc.&lt;/p&gt;
&lt;p&gt;Enjoy.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>New vanity release</title><link href="http://aclark.net/blog/2012/01/30/new-vanity-release/" rel="alternate"></link><updated>2012-01-30T09:52:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-01-30:2012/01/30/new-vanity-release/</id><summary type="html">&lt;p&gt;With all the Python &lt;a class="reference external" href="http://crate.io/"&gt;stats&lt;/a&gt; &lt;a class="reference external" href="http://python3wos.appspot.com/"&gt;goodness&lt;/a&gt; going on recently, I got
inspired to make a new &lt;a class="reference external" href="http://pythonpackages.com/info/vanity"&gt;vanity&lt;/a&gt; release. This release features the
ability to display per package download statistics via the `-v` or
`--verbose` command line argument.&lt;/p&gt;
&lt;p&gt;Here are some of my favorite results.&lt;/p&gt;
&lt;div class="section" id="vanity"&gt;
&lt;h2&gt;Vanity&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ vanity vanity -v
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; vanity-1.0.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-04-14&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 352
&amp;nbsp;&amp;nbsp; vanity-1.1.0.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-10-26&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 139
&amp;nbsp;&amp;nbsp; vanity-1.1.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-10-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 114
&amp;nbsp;&amp;nbsp; vanity-1.1.2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-10-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 145
vanity-1.2.0.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-30&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0
-------------------------------------------
Package `vanity` has been downloaded 750 times!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="django"&gt;
&lt;h2&gt;Django&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ vanity django -v
Django-1.1.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-23&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,618
Django-1.1.4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-02-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,476
&amp;nbsp; Django-1.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-05-17&amp;nbsp;&amp;nbsp; 15,876
Django-1.2.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-05-24&amp;nbsp;&amp;nbsp; 65,120
Django-1.2.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-09-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,467
Django-1.2.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-09-11&amp;nbsp;&amp;nbsp; 73,984
Django-1.2.4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-23&amp;nbsp;&amp;nbsp; 49,904
Django-1.2.5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-02-09&amp;nbsp;&amp;nbsp; 63,977
Django-1.2.6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 427
Django-1.2.7.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-11&amp;nbsp;&amp;nbsp;&amp;nbsp; 6,825
&amp;nbsp; Django-1.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-03-23&amp;nbsp; 238,504
Django-1.3.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-10&amp;nbsp; 176,054
-------------------------------------------
Package `Django` has been downloaded 700,232 times!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="plone"&gt;
&lt;h2&gt;Plone&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ vanity plone -v
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Plone-3.2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2008-12-31&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,690
&amp;nbsp;&amp;nbsp; Plone-3.2.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-02-04&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,466
&amp;nbsp;&amp;nbsp; Plone-3.2.2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-03-03&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,893
&amp;nbsp;&amp;nbsp; Plone-3.2.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-06-20&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,731
&amp;nbsp;&amp;nbsp; Plone-3.2a1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2008-10-10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 976
&amp;nbsp; Plone-3.2rc1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2008-12-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 758
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Plone-3.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-08-19&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,611
&amp;nbsp;&amp;nbsp; Plone-3.3.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-09-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,148
Plone-3.3.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-11-03&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,043
&amp;nbsp;&amp;nbsp; Plone-3.3.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-12-08&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,733
&amp;nbsp;&amp;nbsp; Plone-3.3.4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-01-14&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,906
&amp;nbsp;&amp;nbsp; Plone-3.3.5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-03-03&amp;nbsp;&amp;nbsp; 12,131
Plone-3.3.6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-19&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 787
&amp;nbsp;&amp;nbsp; Plone-3.3b1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-03-12&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 940
&amp;nbsp; Plone-3.3rc1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-03-30&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 743
&amp;nbsp; Plone-3.3rc2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-04-05&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,822
&amp;nbsp; Plone-3.3rc3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-05-23&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,036
&amp;nbsp; Plone-3.3rc4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-07-07&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,163
&amp;nbsp; Plone-3.3rc5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-08-01&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,211
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Plone-4.0.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-08-30&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,659
&amp;nbsp;&amp;nbsp; Plone-4.0.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-10-04&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,224
&amp;nbsp;&amp;nbsp; Plone-4.0.2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-22&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,022
&amp;nbsp;&amp;nbsp; Plone-4.0.3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,339
&amp;nbsp;&amp;nbsp; Plone-4.0.4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-03-01&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,711
&amp;nbsp;&amp;nbsp; Plone-4.0.5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,152
&amp;nbsp;&amp;nbsp; Plone-4.0.6.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-05-22&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,469
&amp;nbsp;&amp;nbsp; Plone-4.0.7.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-06&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,192
&amp;nbsp;&amp;nbsp; Plone-4.0.8.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-17&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 509
&amp;nbsp;&amp;nbsp; Plone-4.0.9.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-29&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 958
&amp;nbsp; Plone-4.0.10.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-10-12&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 495
&amp;nbsp;&amp;nbsp; Plone-4.0a1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-11-19&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 946
&amp;nbsp;&amp;nbsp; Plone-4.0a2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-12-04&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 921
&amp;nbsp;&amp;nbsp; Plone-4.0a3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2009-12-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,272
&amp;nbsp;&amp;nbsp; Plone-4.0a4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-02-01&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,121
&amp;nbsp;&amp;nbsp; Plone-4.0a5.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-02-19&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 850
&amp;nbsp;&amp;nbsp; Plone-4.0b1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-03-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,308
&amp;nbsp;&amp;nbsp; Plone-4.0b2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-04-10&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,028
&amp;nbsp;&amp;nbsp; Plone-4.0b3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-05-04&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,722
&amp;nbsp;&amp;nbsp; Plone-4.0b4.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-06-13&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,642
Plone-4.0b5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-07-08&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,995
&amp;nbsp; Plone-4.0rc1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-08-06&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,598
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Plone-4.1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-17&amp;nbsp;&amp;nbsp;&amp;nbsp; 4,479
Plone-4.1.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 429
Plone-4.1.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-10-08&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,187
Plone-4.1.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-11-29&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,883
&amp;nbsp;&amp;nbsp; Plone-4.1a1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-21&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 699
&amp;nbsp;&amp;nbsp; Plone-4.1a2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-02-11&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 451
&amp;nbsp;&amp;nbsp; Plone-4.1a3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-02-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 680
&amp;nbsp;&amp;nbsp; Plone-4.1b1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-03-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 958
&amp;nbsp;&amp;nbsp; Plone-4.1b2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-04-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,040
&amp;nbsp; Plone-4.1rc2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-05-22&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 797
&amp;nbsp; Plone-4.1rc3.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-06&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,329
&amp;nbsp;&amp;nbsp; Plone-4.2a1.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 521
&amp;nbsp;&amp;nbsp; Plone-4.2a2.zip&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-16&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 884
Plone-4.2b1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-06&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 619
------------------------------------------
Package `Plone` has been downloaded 111,877 times!
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pyramid"&gt;
&lt;h2&gt;Pyramid&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
$ vanity pyramid -v
&amp;nbsp;&amp;nbsp; pyramid-1.0.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-31&amp;nbsp;&amp;nbsp; 24,055
&amp;nbsp;pyramid-1.0.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-13&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 460
&amp;nbsp;pyramid-1.0.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 185
&amp;nbsp;pyramid-1.0a1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-05&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,128
&amp;nbsp;pyramid-1.0a2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-09&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 952
&amp;nbsp;pyramid-1.0a3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-16&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 803
&amp;nbsp;pyramid-1.0a4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-11-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,732
&amp;nbsp;pyramid-1.0a5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 639
&amp;nbsp;pyramid-1.0a6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-16&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 834
&amp;nbsp;pyramid-1.0a7.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 912
&amp;nbsp;pyramid-1.0a8.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2010-12-27&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,233
&amp;nbsp;pyramid-1.0a9.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-08&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,313
pyramid-1.0a10.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-18&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 960
&amp;nbsp;pyramid-1.0b1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-22&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 871
&amp;nbsp;pyramid-1.0b2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-25&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,003
&amp;nbsp;pyramid-1.0b3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-01-28&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 816
&amp;nbsp;&amp;nbsp; pyramid-1.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-22&amp;nbsp;&amp;nbsp;&amp;nbsp; 5,674
&amp;nbsp;pyramid-1.1.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-13&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,057
&amp;nbsp;pyramid-1.1.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-17&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,560
&amp;nbsp;pyramid-1.1.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 160
&amp;nbsp;pyramid-1.1a1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-20&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,146
&amp;nbsp;pyramid-1.1a2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-23&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,003
&amp;nbsp;pyramid-1.1a3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-06-26&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,252
&amp;nbsp;pyramid-1.1a4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-01&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,517
&amp;nbsp;pyramid-1.1b1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-10&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 981
&amp;nbsp;pyramid-1.1b2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-13&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 844
&amp;nbsp;pyramid-1.1b3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 742
&amp;nbsp;pyramid-1.1b4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-07-18&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,094
&amp;nbsp;&amp;nbsp; pyramid-1.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-13&amp;nbsp;&amp;nbsp;&amp;nbsp; 6,450
&amp;nbsp;pyramid-1.2.1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-28&amp;nbsp;&amp;nbsp; 10,357
&amp;nbsp;pyramid-1.2.2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-11-20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 322
&amp;nbsp;pyramid-1.2.3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-11-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,078
&amp;nbsp;pyramid-1.2.4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-06&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,193
&amp;nbsp;pyramid-1.2.5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-15&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 555
&amp;nbsp;pyramid-1.2.6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-05&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 514
&amp;nbsp;pyramid-1.2.7.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-20&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 472
&amp;nbsp;pyramid-1.2a1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-24&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 907
&amp;nbsp;pyramid-1.2a2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-27&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 696
&amp;nbsp;pyramid-1.2a3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-08-29&amp;nbsp;&amp;nbsp;&amp;nbsp; 3,268
&amp;nbsp;pyramid-1.2a4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-02&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 593
&amp;nbsp;pyramid-1.2a5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-04&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 840
&amp;nbsp;pyramid-1.2a6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-07&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 602
&amp;nbsp;pyramid-1.2b1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 493
&amp;nbsp;pyramid-1.2b2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-08&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 700
&amp;nbsp;pyramid-1.2b3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-09-11&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 674
&amp;nbsp;pyramid-1.3a1.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,264
&amp;nbsp;pyramid-1.3a2.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-14&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,641
&amp;nbsp;pyramid-1.3a3.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2011-12-21&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,716
&amp;nbsp;pyramid-1.3a4.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-05&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 675
&amp;nbsp;pyramid-1.3a5.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-09&amp;nbsp;&amp;nbsp;&amp;nbsp; 2,369
&amp;nbsp;pyramid-1.3a6.tar.gz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 2012-01-20&amp;nbsp;&amp;nbsp;&amp;nbsp; 1,917
---------------------------------------------
Package `pyramid` has been downloaded 97,222 times!
&lt;/pre&gt;
&lt;p&gt;Enjoy the new release.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Hello Plone theming</title><link href="http://aclark.net/blog/2012/01/25/hello-plone-theming/" rel="alternate"></link><updated>2012-01-25T00:15:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2012-01-25:2012/01/25/hello-plone-theming/</id><summary type="html">&lt;p&gt;In this post, we introduce a new tutorial aimed at bridging the gap between the &lt;strong&gt;incredibly easy to use and enormously powerful Diazo theming engine for Plone&lt;/strong&gt;, and bootstrapping your first new theme. You do not need to have any Python skills whatsoever to perform these tasks. New Plone themes are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;HTML/CSS/JavaScript/images (Sound familiar? You don't need to know any Plone to understand this part.)&lt;/li&gt;
&lt;li&gt;A set of rules that map your HTML/CSS/JavaScript/images to Plone content. (This part is Diazo-specific; and while Diazo is not part of Plone, integration is provided by a Python package called plone.app.theming.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Diazo rules can get complex, but it's very easy to get your first rule done and working and then off you go. You may find this &lt;a class="reference external" href="http://readthedocs.org/docs/pythonpackages-docs/en/latest/features/examples/ex8-diazo.html"&gt;new tutorial on pythonpackages.com&lt;/a&gt;. Enjoy, and get busy theming Plone.&lt;/p&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>New Year's Python Meme 2011</title><link href="http://aclark.net/blog/2011/12/21/new-years-python-meme-2011/" rel="alternate"></link><updated>2011-12-21T13:11:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-12-21:2011/12/21/new-years-python-meme-2011/</id><summary type="html">&lt;p&gt;My response to &lt;a class="reference external" href="http://blog.ziade.org/2011/12/20/new-year039s-python-meme-2011/"&gt;http://blog.ziade.org/2011/12/20/new-year039s-python-meme-2011/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was fun &lt;a class="reference external" href="http://blog.aclark.net/2009/12/31/new-years-python-meme/"&gt;answering in 2009&lt;/a&gt;, so I thought I'd play again.&lt;/p&gt;
&lt;div class="section" id="whats-the-coolest-python-application-framework-or-library-you-have-discovered-in-2011"&gt;
&lt;h2&gt;What’s the coolest Python application, framework or library you have discovered in 2011?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.pylonsproject.org/"&gt;Pyramid&lt;/a&gt;. In early 2011 I released &lt;a class="reference external" href="http://pythonpackages.com/info/vanity"&gt;vanity&lt;/a&gt;, which later became &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;(more or less). I used building the site as an excuse to learn Pyramid, and it was well worth it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What new programming technique did you learn in 2011?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I learned to &lt;strong&gt;not&lt;/strong&gt; reinvent the wheel, and to collaborate with others on solving hard problems (which in and of itself is hard). Long story short, I took a little bit of heat within the Plone CMS community for creating a &amp;quot;one off&amp;quot; migration script:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pythonpackages.com/info/parse2plone"&gt;http://pythonpackages.com/info/parse2plone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've since learned my lesson and have been collaborating meaningfully with &lt;a class="reference external" href="https://twitter.com/#!/djay75"&gt;Dylan Jay&lt;/a&gt;on the more widely-supported &lt;a class="reference external" href="http://pythonpackages.com/info/mr.migrator"&gt;mr.migrator&lt;/a&gt; and friends.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s the name of the open source project you contributed to the most in 2011? What did you do?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I contributed to the &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt; project quite a bit (as I have been doing for years now), but I also fell in love with &lt;a class="reference external" href="http://mozilla.org"&gt;Mozilla&lt;/a&gt; (and their mission) and began working on various things, including a virtual machine to help with the development of &lt;a class="reference external" href="http://support.mozilla.com"&gt;support.mozilla.com&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aclark4life/kitsune-vagrant"&gt;https://github.com/aclark4life/kitsune-vagrant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What was the Python blog or website you read the most in 2011?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://news.ycombinator.com/"&gt;Hacker news&lt;/a&gt;. I have the start-up bug.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What are the three top things you want to learn in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript, JavaScript, and JavaScript. I first heard the term 15 years ago and have been avoiding it ever since. Time to jump in.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is the top software, application or library you wish someone would write in 2012?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope someone (me) writes a &amp;quot;secret&amp;quot; feature for &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt; and launches it in first quarter of 2012; and I hope folks find it useful.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Introducing pythonpackages.com</title><link href="http://aclark.net/blog/2011/11/29/introducing-pythonpackagescom/" rel="alternate"></link><updated>2011-11-29T02:24:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-11-29:2011/11/29/introducing-pythonpackagescom/</id><summary type="html">&lt;div class="section" id="the-website-for-python-egoists"&gt;
&lt;h2&gt;The website for Python egoists™&lt;/h2&gt;
&lt;p&gt;I have this overwhelming desire to know how many times my favorite Python packages have been downloaded. Don't you? If so, look no further than &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="count-downloads"&gt;
&lt;h2&gt;Count downloads&lt;/h2&gt;
&lt;p&gt;Where you can enter a package like &lt;a class="reference external" href="http://pythonpackages.com/info/django"&gt;Django&lt;/a&gt; and find out the number of downloads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="count-favorites"&gt;
&lt;h2&gt;Count favorites&lt;/h2&gt;
&lt;p&gt;Or click on &lt;strong&gt;Count favorites&lt;/strong&gt; to reveal how many times it has been favorited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="find-trash"&gt;
&lt;h2&gt;Find trash&lt;/h2&gt;
&lt;p&gt;Or even poke some good natured fun at it, for its &lt;a class="reference external" href="http://pythonpackages.com/trash/django"&gt;failure to provide adequate package metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="discuss-packages"&gt;
&lt;h2&gt;Discuss packages&lt;/h2&gt;
&lt;p&gt;You can even &lt;em&gt;discuss&lt;/em&gt;packages on &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recent-activity"&gt;
&lt;h2&gt;Recent activity&lt;/h2&gt;
&lt;p&gt;But wait there is more! You can also browse the &lt;a class="reference external" href="http://pythonpackages.com/pypi"&gt;latest changelog activity&lt;/a&gt; from PyPi right on the site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="package-info"&gt;
&lt;h2&gt;Package info&lt;/h2&gt;
&lt;p&gt;Lastly, if you get bored counting package downloads and favorites you can look at the &lt;em&gt;actual&lt;/em&gt; &lt;a class="reference external" href="http://pythonpackages.com/info/django"&gt;package metadata&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Sound interesting? Or utterly silly, perhaps? I think &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt; is the best of both. It started off as a front end to the command line utility &lt;a class="reference external" href="http://pythonpackages.com/info/vanity"&gt;vanity&lt;/a&gt;, but has taken on a life of it's own.&lt;/p&gt;
&lt;p&gt;After a small run on Python reddit and Hacker News, I'm looking forward to seeing what Python Planet folks think. So please check out &lt;a class="reference external" href="http://pythonpackages.com"&gt;pythonpackages.com&lt;/a&gt; and let me know. You can leave comments about the site here.&lt;/p&gt;
&lt;p&gt;Or open a new ticket here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new"&gt;https://bitbucket.org/pythonpackages/pythonpackages.com/issues/new&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>Plone.org maintenance</title><link href="http://aclark.net/blog/2011/11/29/ploneorg-maintenance/" rel="alternate"></link><updated>2011-11-29T00:54:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-11-29:2011/11/29/ploneorg-maintenance/</id><summary type="html">&lt;div class="section" id="plans"&gt;
&lt;h2&gt;Plans&lt;/h2&gt;
&lt;p&gt;I am planning to do some work on the plone.org server and website by the
end of the year, including:&lt;/p&gt;
&lt;p&gt;Upgrade to the latest 4.2.x series&lt;/p&gt;
&lt;p&gt;Switch from xdv to &lt;a class="reference external" href="http://pythonpackages.com/info/plone.app.theming"&gt;plone.app.theming&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reduce the number of NGINXes running on the server by 1 (we currently
have an nginx doing the xdv transform)&lt;/li&gt;
&lt;li&gt;Repackage the current plone.org theme as plonetheme.ploneorg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Clean up the server&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Separate vendor package configs from buildout generated configs&lt;/li&gt;
&lt;li&gt;Remove archived files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prune tickets on &lt;a class="reference external" href="http://dev.plone.org/"&gt;dev.plone.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've done some of this work already, earlier this year:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/plone/Products.PloneOrg/commits/4.1-compat"&gt;https://github.com/plone/Products.PloneOrg/commits/4.1-compat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="pitch"&gt;
&lt;h2&gt;Pitch&lt;/h2&gt;
&lt;p&gt;To ensure it gets done by the end of the year, I would like to add this
project to my calendar as paid work. So if you are able to help out by
donating some portion of the goal, I would appreciate it. Please use the
chip-in below to contribute to this effort.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Plone secrets: Episode 4 - Varnish in front</title><link href="http://aclark.net/blog/2011/11/09/plone-secrets-episode-4-varnish-in-front/" rel="alternate"></link><updated>2011-11-09T12:50:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-11-09:2011/11/09/plone-secrets-episode-4-varnish-in-front/</id><summary type="html">&lt;p&gt;&lt;em&gt;This just in from the production department: use Varnish. (And please forgive the heavily meme-laden approach to describing these techniques :-).)&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="cache-all-the-hosts"&gt;
&lt;h2&gt;Cache ALL the hosts&lt;/h2&gt;
&lt;p&gt;Our ability to use Varnish in production is no secret by now, or at least it shouldn't be. What is often less clear is exactly how to use it. One way I like[1], is to run Varnish on your public IP port 80 and make Apache listen on your private IP port 80. Then proxy from Varnish to Apache and enjoy easy caching goodness on all your virtual hosts in Apache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;This should require less than five minutes of down time to implement. First, configure the appropriate settings. (Well, first install Apache and Varnish if you haven't already: `aptitude install varnish apache2` on Ubuntu Linux[0].)&lt;/p&gt;
&lt;div class="section" id="varnish"&gt;
&lt;h3&gt;Varnish&lt;/h3&gt;
&lt;p&gt;To modify the listen IP address and port, we typically edit a file like &lt;em&gt;/etc/default/varnish&lt;/em&gt; (in Ubuntu). However you do it, configure the equivalent of the following on your system:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
DAEMON_OPTS=&amp;quot;-a 174.143.252.11:80
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; -T localhost:6082
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; -f /etc/varnish/default.vcl
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; -s malloc,256m&amp;quot;
&lt;/pre&gt;
&lt;p&gt;This environment variable is then passed to &lt;em&gt;varnishd&lt;/em&gt; on the command line. Next, pass traffic to Apache like so (in &lt;em&gt;/etc/varnish/default.vcl&lt;/em&gt; on Ubuntu):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
backend default {
 .host = &amp;quot;127.0.0.1&amp;quot;;
 .port = &amp;quot;80&amp;quot;;
 }
&lt;/pre&gt;
&lt;p&gt;Now on to Apache.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*Please note that the syntax above is for Varnish 3.x and the syntax has (annoyingly) changed from 2.x to 3.x.*&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apache"&gt;
&lt;h3&gt;Apache&lt;/h3&gt;
&lt;p&gt;The Apache part is a bit simpler. You just need to change the listen port (on Ubuntu this is done in &lt;em&gt;/etc/apache2/ports.conf&lt;/em&gt;), typically from something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Listen *:80
&lt;/pre&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Listen 127.0.0.1:80
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="restart-all-the-services"&gt;
&lt;h2&gt;Restart ALL the services&lt;/h2&gt;
&lt;p&gt;Now restart both services. If all goes well you shouldn't notice any difference, except better performance, and when you make a website change and need to clear the cache[2]. For this, I rely on telnetting to the varnish port and issuing the `ban.url` command (formerly `url.purge` in 2.x):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ telnet localhost 6082
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.
200 205
-----------------------------
Varnish Cache CLI 1.0
-----------------------------
Linux,2.6.35.4-rscloud,x86_64,-smalloc,-smalloc,-hcritbitType 'help' for command list.
Type 'quit' to close CLI session.ban.url /
200 0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="cache-all-the-disks"&gt;
&lt;h2&gt;Cache ALL the disks&lt;/h2&gt;
&lt;p&gt;This site has Varnish and Apache configured as described in this article. It also has disk caching in Apache enabled, thanks to Elizabeth Leddy's article:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://plonechix.blogspot.com/2011/08/10-minute-caching-with-apache.html"&gt;http://plonechix.blogspot.com/2011/08/10-minute-caching-with-apache.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, it's &lt;strong&gt;PEPPY AS THE DICKENS™&lt;/strong&gt; on a 512MB &amp;quot;slice&amp;quot; (Cloud server) from Rackspace Cloud. And now you know yet another &amp;quot;Plone secret&amp;quot;. Now go make your Plone sites faster, and let me know how it goes in the comments section below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[0] Using the latest distribution, &amp;quot;oneric&amp;quot;.&lt;/p&gt;
&lt;p&gt;[1] I first saw this technique at NASA when NASA Science was powered by
Plone; I found it odd at the time but years later it makes perfect
sense.&lt;/p&gt;
&lt;p&gt;[2] Ideally you'd configure this in p.a.caching, but I've not been able
to stomach this yet.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Plone: First class Python citizen</title><link href="http://aclark.net/blog/2011/10/24/plone-first-class-python-citizen/" rel="alternate"></link><updated>2011-10-24T09:09:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-10-24:2011/10/24/plone-first-class-python-citizen/</id><summary type="html">&lt;p&gt;&lt;em&gt;The Plone community and software fit nicely within the larger Python ecosystem. Here's why.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For almost as long as I have been involved in the &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt; project, I've been interested in Plone's role in the Python ecosystem. Today as I look across the current landscape, I'm proud to announce a new milestone the Plone community can take pride in. But the change didn't happen overnight, so first let's take a quick look back.&lt;/p&gt;
&lt;div class="section" id="pypi-support-in-psc"&gt;
&lt;h2&gt;PyPI support in PSC&lt;/h2&gt;
&lt;p&gt;Circa 2008, Tarek Ziadé and others finished the PyPI integration branch of PloneSoftwareCenter started by Sidnei Da Silva 2 years before.&lt;/p&gt;
&lt;p&gt;This was a big step towards the &amp;quot;Pythonification&amp;quot; of Plone, mainly because Plone packages could now be published on plone.org in the same way Python packages are published to the Python Package Index: via &amp;quot;python setup.py upload&amp;quot;. In fact if you are publishing Plone packages, it is recommended that you release to &lt;em&gt;both&lt;/em&gt; PyPI and plone.org simultaneously. This ensures your package is visible to the most number of potential users. And you can use &lt;a class="reference external" href="http://pypi.python.org/pypi/jarn.mkrelease"&gt;mkrelease&lt;/a&gt; to automate the process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="collective-docs-at-rtd"&gt;
&lt;h2&gt;Collective docs at RTD&lt;/h2&gt;
&lt;p&gt;Just when you thought things couldn't get more exciting in Python land, along came &lt;a class="reference external" href="http://readthedocs.org/"&gt;readthedocs.org&lt;/a&gt; (a Django Dash production, IIRC). And to &lt;a class="reference external" href="https://github.com/collective/collective.developermanual/commit/4dc34d113b1a62064c83f3c431acc7d8deb42f1a"&gt;join the fun in July 2011&lt;/a&gt;, I moved Mikko Ohtamaa's awesome &lt;strong&gt;Plone Community Managed Developer Manual&lt;/strong&gt; to the &lt;a class="reference external" href="http://github.com/collective"&gt;Github collective&lt;/a&gt; and configured the RTD &lt;a class="reference external" href="https://github.com/blog/41-service-integration"&gt;service hook&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This means that whenever anyone commits a change to the developer manual, within a few minutes a new Sphinx build &lt;a class="reference external" href="http://collective-docs.readthedocs.org/en/latest/index.html"&gt;gets published&lt;/a&gt;. It was so easy to set this up, I wish I had done it sooner.&lt;/p&gt;
&lt;p&gt;So you can that see over the years, we have been working ourselves into a frenzy of Python goodness! And last week, it got even better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-plone-packages"&gt;
&lt;h2&gt;Introducing: Plone packages!&lt;/h2&gt;
&lt;p&gt;Thanks to the good folks at &lt;a class="reference external" href="http://www.cartwheelweb.com/"&gt;Cartwheel Web&lt;/a&gt;, makers of the fine &lt;a class="reference external" href="http://opencomparison.org/"&gt;Open Comparison&lt;/a&gt; service, Plone now has its very own &lt;a class="reference external" href="http://plone.opencomparison.org"&gt;grid comparison website&lt;/a&gt;! (&lt;a class="reference external" href="http://djangopackages.com"&gt;Djangopackages.com&lt;/a&gt; was first, followed by &lt;a class="reference external" href="http://pyramid.opencomparison.org"&gt;pyramid.opencomparison.org&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;This is a site where folks can add packages hosted elsewhere (e.g. svn, github, pypi), vote on them, and add grid comparisons to compare similarly-featured add-ons, frameworks, and other related software.  Grids are the killer feature of this site, and personally I've been waiting to use them to answer questions like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Q: What's the best blogging add-on for Plone?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A: http://plone.opencomparison.org/grids/g/weblogs/&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The content is entirely user driven (TTW only) so please head over to &lt;a class="reference external" href="http://plone.opencomparison.org"&gt;plone.opencomparison.org&lt;/a&gt;, login with your github ID, and start adding packages! And while you are at it, please report any issues you find here: &lt;a class="reference external" href="https://github.com/opencomparison/opencomparison/issues"&gt;https://github.com/opencomparison/opencomparison/issues&lt;/a&gt;. Lastly, let's all tweet a big thanks to &lt;a class="reference external" href="https://twitter.com/#!/pydanny"&gt;&amp;#64;pydanny&lt;/a&gt;and &lt;a class="reference external" href="https://twitter.com/#!/audreyr"&gt;&amp;#64;audreyr&lt;/a&gt; for their hard work and generosity!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Pillow: one year later</title><link href="http://aclark.net/blog/2011/10/14/pillow-one-year-later/" rel="alternate"></link><updated>2011-10-14T13:11:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-10-14:2011/10/14/pillow-one-year-later/</id><summary type="html">&lt;p&gt;&lt;em&gt;For anyone unfamiliar with Pillow, it is the &amp;quot;friendly PIL fork&amp;quot;: a fork of PIL that aims to remain a good citizen in the PIL community through its actions.&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="warm-and-fluffy-history"&gt;
&lt;h2&gt;Warm and fluffy history&lt;/h2&gt;
&lt;p&gt;Pillow 1.0 was released on 2010-07-31, a little over a year later came Pillow 1.7.5 which features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Many packaging fixes (mostly to support dependency libraries)&lt;/li&gt;
&lt;li&gt;Windows binaries&lt;/li&gt;
&lt;li&gt;Over 13K downloads&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pillow is used in Plone's &lt;a class="reference external" href="http://launchpad.net/plone/4.1/4.1.2/+download/Plone-4.1.2-UnifiedInstaller.tgz"&gt;UnifiedInstaller&lt;/a&gt;, and I know &lt;a class="reference external" href="https://github.com/collective/Pillow/commit/8a282c9ea4382045822ca4fc15e586ebd2f7ace7"&gt;folks from the Django community&lt;/a&gt;are using it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-creature-comforts"&gt;
&lt;h2&gt;Future creature comforts&lt;/h2&gt;
&lt;p&gt;All in all, a mild success. So what's next? &lt;strong&gt;More of the same&lt;/strong&gt;. To &lt;a class="reference external" href="http://stackoverflow.com/questions/2485295/the-problem-with-installing-pil-using-virtualenv-or-buildout/7770547#7770547"&gt;quote myself from a recent Stack Overflow answer&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
If PIL ever does exactly what Pillow does, then the fork will die. Until that happens, we have Pillow.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="bottom-line-accommodations"&gt;
&lt;h2&gt;Bottom line accommodations&lt;/h2&gt;
&lt;p&gt;This may never happen of course, which is part of the reason for the fork. You can't force someone to maintain software for you. But in the open source world you can grab the bull by the horns (take the lead) and try to make things better. Even better: if your project and community are healthy and functioning properly, your success or failure will be determined by the folks in the community (as it should be). In this case, the Plone and Python communities have spoken clearly.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Vagrant, Puppet and Mozilla, oh my!</title><link href="http://aclark.net/blog/2011/10/03/vagrant-puppet-and-mozilla-oh-my/" rel="alternate"></link><updated>2011-10-03T17:25:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-10-03:2011/10/03/vagrant-puppet-and-mozilla-oh-my/</id><summary type="html">&lt;p&gt;&lt;em&gt;Warning: This post is only loosely Python related and not at all Plone related, but I thought folks might enjoy hearing about Vagrant and Puppet because these tools may help you do your Plone and Python jobs better.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For the past couple weeks I've been working on creating a virtual machine to bootstrap a kitsune environment. Kitsune is the Django site that powers support.mozilla.com. I've now reached what I call the &lt;strong&gt;2nd milestone&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="milestones"&gt;
&lt;h2&gt;Milestones&lt;/h2&gt;
&lt;p&gt;The milestones are as follows:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Get the VM running to the point where one can type &lt;strong&gt;./manage.py&lt;/strong&gt; and receive the help output (and not a traceback). This sounds trivial but there is actually a lot of work involved to get to this point. Namely, figuring out how to make &lt;a class="reference external" href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt; execute each of the required steps successfully, together. (You would expect to be able to just define the steps in order, but those with this expectation will be disappointed. I assume Puppet has their reasons, and they are probably even good ones. :-))&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Get the VM running to the point where one can open http://33.33.33.10:8000 from the host to see kitsune running. Once step #1 is done, this is actually easier than it sounds because I'm &amp;quot;cheating&amp;quot;. Test data has been imported and a syncdb has been run, but I'm using supervisor to manage the runserver process (for now).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Get the VM running like it does in production. This will involve configuring &lt;strong&gt;Apache&lt;/strong&gt;and &lt;strong&gt;mod_wsgi&lt;/strong&gt; as well as resolving any issues that remain with the app. I'll rely on the kitsune team to help with this, as I'm still learning the app. This is the &amp;quot;exciting&amp;quot; part for me because I get to learn something new. While Vagrant and Puppet are also new to me, I consider these technologies part of my &amp;quot;past life&amp;quot; (as a system administrator) and Django sites part of my &amp;quot;future life&amp;quot; (as a web developer).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now about the technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vagrant"&gt;
&lt;h2&gt;Vagrant&lt;/h2&gt;
&lt;p&gt;I had heard of &lt;a class="reference external" href="http://vagrantup.com/"&gt;Vagrant&lt;/a&gt; before, but never tried it. I am now sorry I waited so long because the &amp;quot;cool factor&amp;quot; is very high. It requires that &lt;a class="reference external" href="https://www.virtualbox.org/"&gt;Virtualbox&lt;/a&gt; be installed, which I also danced around for too long before committing (being a former Parallels user).&lt;/p&gt;
&lt;p&gt;On OS X Lion[1], installing Vagrant is simply a matter of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ gem install vagrant
&lt;/pre&gt;
&lt;p&gt;Once you have `vagrant` installed you can do:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vagrant init
&lt;/pre&gt;
&lt;p&gt;inside some revision-controlled directory and you have the beginnings of a virtual machine you can share with the masses. This is how &lt;a class="reference external" href="https://github.com/aclark4life/kitsune-vagrant"&gt;kitsune-vagrant&lt;/a&gt; was born. Hopefully this shared virtual machine will eventually make some new developer's life much easier.&lt;/p&gt;
&lt;p&gt;We now arrive at a fork in the road; though Vagrant makes it easy to follow both paths: Chef or Puppet (it supports both). I don't recall what made me choose Puppet over Chef, but it might have been that the &lt;a class="reference external" href="https://github.com/rhelmer/socorro-vagrant"&gt;Socorro folks were using it already&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you decide on Puppet (and assuming you do), it's pretty easy to figure out that your next move is to create a manifest file for Puppet to apply[2].&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="puppet"&gt;
&lt;h2&gt;Puppet&lt;/h2&gt;
&lt;p&gt;My knowledge of Puppet is currently quite limited. Specifically, I only know how to create a manifest file. (Vagrant does the rest!) I imagine there is much more to Puppet, especially with regard to doing actual configuration management on production servers. But I have not explored any of that yet.&lt;/p&gt;
&lt;p&gt;However, I did learn quite a bit about Puppet just from writing the manifest. The first most important thing I learned is this: &lt;strong&gt;Puppet is in charge&lt;/strong&gt;. It does things the way it wants to and you need to follow its rules. The first and biggest challenge is to achieve a linear execution of tasks.&lt;/p&gt;
&lt;p&gt;You cannot write rules in order and hope for the best. This will fail spectacularly when something executes before something else was supposed to. The way around this is via `require =&amp;gt;` statements.&lt;/p&gt;
&lt;p&gt;A grep through kitsune.pp reveals:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
require =&amp;gt; Exec['git_clone'],
require =&amp;gt; Exec['db_sync'],
require =&amp;gt; Exec['packages_upgrade'],
require =&amp;gt; Exec['packages_update'],
require =&amp;gt; Package[$packages_native],
require =&amp;gt; Exec['git_clone'],
require =&amp;gt; Exec['chown_kitsune'],
require =&amp;gt; Exec['packages_compiled'],
require =&amp;gt; Exec['packages_vendor'],
require =&amp;gt; Exec['db_create'],
require =&amp;gt; Exec['db_import'],
require =&amp;gt; file['/etc/supervisor/supervisord.conf'],
require =&amp;gt; Exec['supervisor_stop'],
&lt;/pre&gt;
&lt;p&gt;This roughly translates to the following workflow logic:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ensure that `aptitude -y update; aptitude -y upgrade` have been run before you try to install the list of packages we require.&lt;/li&gt;
&lt;li&gt;Ensure the list of packages we require is installed before we checkout the code.&lt;/li&gt;
&lt;li&gt;Ensure the code has been checked out (and pip install / git submodule have been run) before you try to syncdb and run the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a bit more to it, but with that knowledge you should be able to &lt;a class="reference external" href="https://github.com/aclark4life/kitsune-vagrant/blob/master/manifests/kitsune.pp"&gt;read and understand kitsune.pp in full&lt;/a&gt;. I learned most of the remaining required puppeteering from this site:&lt;a class="reference external" href="http://www.puppetcookbook.com/"&gt;http://www.puppetcookbook.com/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mozilla"&gt;
&lt;h2&gt;Mozilla&lt;/h2&gt;
&lt;p&gt;Oh my! This Mozilla work is a ton of fun[3]; I attribute this in part due to the structure of their organization: I was invited immediately to collaborate in IRC with the kitsune team and as a result, we all have something to show for it[4]. Next I will be working on the 3rd milestone! Hope to finish by the end
of this week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[1] This did not work on Snow Leopard, because `gem` is too old.  However if you `brew install ruby` and try again, it should work.&lt;/p&gt;
&lt;p&gt;[2] I didn't bother to investigate Chef, but I am curious about it.&lt;/p&gt;
&lt;p&gt;[3] And I hope this is only the beginning.&lt;/p&gt;
&lt;p&gt;[4] I hope to get a Mozilla gig but even if I don't, being able to do this type of work is very rewarding (which is why you will often hear people in open source say that to get paid for the type of work they do is a dream come true :-)).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Mozilla"></category><category term="Plone"></category><category term="Python"></category></entry><entry><title>Mozilla and PyPI</title><link href="http://aclark.net/blog/2011/09/22/mozilla-and-pypi/" rel="alternate"></link><updated>2011-09-22T12:03:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-09-22:2011/09/22/mozilla-and-pypi/</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="http://blog.aclark.net/in-defense-of-pypi"&gt;last time I wrote about PyPI&lt;/a&gt; some folks mistook the subject to be &lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt;, so let me be clear: this article is about the &lt;a class="reference external" href="http://pypi.python.org/pypi"&gt;Python Packaging Index&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recently began doing some volunteer work for Mozilla[1], working on a &lt;a class="reference external" href="https://github.com/aclark4life/kitsune-vagrant"&gt;virtual machine setup&lt;/a&gt; to make kitsune development easier (kitsune is the code name for the Django site that powers &lt;a class="reference external" href="http://support.mozilla.com"&gt;support.mozilla.com&lt;/a&gt;).&lt;/p&gt;
&lt;div class="section" id="git-submodules"&gt;
&lt;h2&gt;Git submodules&lt;/h2&gt;
&lt;p&gt;In doing so, I came across an interesting command from their &lt;a class="reference external" href="https://github.com/jsocol/kitsune/blob/master/docs/installation.rst"&gt;installation docs&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ git submodule update --init --recursive
&lt;/pre&gt;
&lt;p&gt;I can recall some vague rumblings about git submodules prior to this incident, but nothing I'd call &amp;quot;familiarity&amp;quot;. So, I shrugged it off and went about the business of creating the VM (and resisting the urge to use &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout/1.5.2"&gt;zc.buildout&lt;/a&gt; to do it):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;On day 1, I created a &lt;a class="reference external" href="http://virtualbox.org"&gt;VirtualBox&lt;/a&gt; VM using the latest Ubuntu Server and was able to assemble and run the application by following the instructions.&lt;/li&gt;
&lt;li&gt;On day 2, I began to &lt;a class="reference external" href="http://vagrantup.com"&gt;&amp;quot;vagrantize&amp;quot;&lt;/a&gt; the process. Here I ran into a bit of trouble with the git-submodule command[2]. This led me to seek alternative methods to install the various Python packages it was trying to install (when stuck on a problem I often like to pursue the alternatives immediately, so I have them if I need them.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="zamboni"&gt;
&lt;h2&gt;Zamboni&lt;/h2&gt;
&lt;p&gt;Then, in the Mozilla IRC channel #sumodev (&lt;strong&gt;su&lt;/strong&gt;pport &lt;strong&gt;mo&lt;/strong&gt;zilla) some nice Mozillian (willkg) pointed me to this gem:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mozweb.readthedocs.org/en/latest/packaging.html"&gt;http://mozweb.readthedocs.org/en/latest/packaging.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which in turn led me to the following two links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://jbalogh.github.com/zamboni/topics/packages/"&gt;http://jbalogh.github.com/zamboni/topics/packages/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://playdoh.readthedocs.org/en/latest/packages.html#packages"&gt;http://playdoh.readthedocs.org/en/latest/packages.html#packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Again, faint rumblings… this time about zamboni (not THAT Zamboni). I know I've heard of it, but I wouldn't call myself familiar with it. So, I innocently read the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Python projects can incur a number of dependencies. ``pip`` can be handy, but we’ve had better luck with distributing a ``vendor`` library.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;At which point I immediately thought to myself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Yeah… I hear that.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Followed a few seconds later by:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;Wait… what?!?&lt;/strong&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="playdoh"&gt;
&lt;h2&gt;Playdoh&lt;/h2&gt;
&lt;p&gt;Some time/research later[3], I (re)discovered that zamboni is the codename for &lt;a class="reference external" href="https://addons.mozilla.org"&gt;addons.mozilla.org&lt;/a&gt;[4]. And &lt;a class="reference external" href="http://playdoh.readthedocs.org/"&gt;Playdoh&lt;/a&gt; is the code name for Mozilla's base Django project setup. If you aren't familiar with Playdoh, please do give it a whirl[5].&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pypi"&gt;
&lt;h2&gt;PyPI&lt;/h2&gt;
&lt;p&gt;While all of this is very, very interesting to me, I am primarily a &amp;quot;systems and processes&amp;quot; guy; and what ultimately stuck with me after two days of Mozilla-ing is the following blurb from the Playdoh packaging documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;The ``/vendor`` library is supposed to contain all packages and repositories. It enables the project to be deployed as one package onto many machines, without relying on PyPI-based installations on each target machine.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;&amp;quot;Nooooooooooooooo&amp;quot;, I am now saying to myself over and over. &amp;quot;Without relying on PyPI-based installations on each target machine.&amp;quot; Another &amp;quot;noooooooooooooooo!&amp;quot; :-) I certainly don't fault Mozilla for taking this approach, but it makes me sad that large organizations like Mozilla are passing over PyPI in favor of alternative methods of distributing Python software.&lt;/p&gt;
&lt;p&gt;Let us all now hang our heads, for a moment of pause and reflection.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[a minute passes]&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-future"&gt;
&lt;h2&gt;The future&lt;/h2&gt;
&lt;p&gt;I can't speak for anyone else, but I would certainly like to see this change in the future. I would LOVE to see PyPI become a place that Mozilla felt confident it could use to deploy Python software. And this is something I'd love to work on &lt;em&gt;for&lt;/em&gt; Mozilla, if given the opportunity[6].&lt;/p&gt;
&lt;div class="section" id="great-for-python-great-for-mozilla"&gt;
&lt;h3&gt;Great for Python == great for Mozilla?&lt;/h3&gt;
&lt;p&gt;It's obvious what's in it for Python, but what's in for Mozilla?&lt;/p&gt;
&lt;p&gt;Simple.&lt;/p&gt;
&lt;p&gt;I happen to share Mozilla's vision for an open web and open source in general. And it's great to see them embracing &amp;amp; using Python for their web projects! Without a doubt,&amp;nbsp; they are interested in giving back to the Python community (e.g. via Playdoh and the Django community, in this case.) So I suspect they'd be open to helping the Python community fix a long standing issue: the stability and reliability of the Python Package Index. It would certainly benefit them in the long run to simplify their build process to the point where git-submodule was no longer needed[7].&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[1] I am actively courting Mozilla in hopes of landing a gig by the end of the year. So all you Mozillians who know me personally, please put in a good word! And all you Mozillians I have not met yet: nice to meet you! :-)&lt;/p&gt;
&lt;p&gt;[2] The problem turned out to be git-submodule failing to run because things like: grep and sed were missing from the PATH. Easily fixed by modifying the puppet configuration, but not easily discovered because git-submodule itself returned zero! Some guy on #puppet was very helpful in getting me to print out debug info.&lt;/p&gt;
&lt;p&gt;[3] More help from friendly Mozillians in #webdev:&lt;/p&gt;
&lt;blockquote&gt;
11:13 &amp;lt; groovecoder&amp;gt; aclark: yeah, zamboni is amo 11:13 &amp;lt; kumar&amp;gt; playdoh was extracted from zamboni and other apps 11:13 &amp;lt; kumar&amp;gt; but zamboni itself does not eat the playdoh dog food, actually 11:15 &amp;lt; kumar&amp;gt; aclark also, in case you're not steeped in our initialisms, amo is addons.mozilla.org&lt;/blockquote&gt;
&lt;p&gt;[4] There is a great presentation about it here: &lt;a class="reference external" href="http://www.slideshare.net/andymckay/anatomy-of-a-large-django-site-7590098"&gt;http://www.slideshare.net/andymckay/anatomy-of-a-large-django-site-7590098&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;[5] More from kumar (emphasis is my own):&lt;/p&gt;
&lt;blockquote&gt;
11:25 &amp;lt; kumar&amp;gt; &lt;strong&gt;Playdoh is starting to stabilize&lt;/strong&gt; so it would be &lt;strong&gt;good to see some use of it outside Mozilla&lt;/strong&gt;; this would probably help us catch Mozilla-specific things that need extraction&lt;/blockquote&gt;
&lt;p&gt;[6] LARGE HINT ;-)&lt;/p&gt;
&lt;p&gt;[7] Again, not that there is anything wrong with what Mozilla is doing here. As a systems guy, I just happen to gravitate toward simplifying processes by eliminating steps.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Hello mod_wsgi</title><link href="http://aclark.net/blog/2011/08/28/hello-mod_wsgi/" rel="alternate"></link><updated>2011-08-28T20:43:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-08-28:2011/08/28/hello-mod_wsgi/</id><summary type="html">&lt;p&gt;It seems I've inadvertently started another series of blog entry:&amp;nbsp;the &amp;quot;hello world&amp;quot; series, wherein I explain how to easily get started with &lt;a class="reference external" href="http://blog.aclark.net/2011/08/20/hello-plone/"&gt;various exciting Python technologies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This time, in order to familiarize myself with &lt;a class="reference external" href="http://code.google.com/p/modwsgi/"&gt;mod_wsgi&lt;/a&gt;, I've created a buildout to automate some of the processes explained in:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://code.google.com/p/modwsgi/wiki/QuickInstallationGuide"&gt;http://code.google.com/p/modwsgi/wiki/QuickInstallationGuide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(This series also helps me to subtly introduce the zc.buildout &amp;quot;extendables&amp;quot; I have been working on. More on those in a future post.)&lt;/p&gt;
&lt;div class="section" id="the-extendables"&gt;
&lt;h2&gt;The extendables&lt;/h2&gt;
&lt;p&gt;The extendables make it easy to bootstrap a development environment with complex software requirements, via &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout/1.5.2"&gt;zc.buildout&lt;/a&gt;. In this case, I want to be able to type:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ test-apache test-dir
&lt;/pre&gt;
&lt;p&gt;And get a working, &lt;em&gt;disposable&lt;/em&gt; Apache instance minutes later. I also want that Apache to come with a mod_wsgi app installed and working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup"&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;First we use the &lt;a class="reference external" href="https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x"&gt;aforementioned extendable&lt;/a&gt;, like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ virtualenv test-dir
$ cd test-dir
$ bin/pip install zc.buildout
$ bin/buildout init
&lt;/pre&gt;
&lt;p&gt;Edit the buildout.cfg to look like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends = https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x
&lt;/pre&gt;
&lt;p&gt;Run buildout:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/buildout
&lt;/pre&gt;
&lt;p&gt;Assuming successful completion, you should be able to run Apache in the foreground via:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/supervisord -e debug -n
&lt;/pre&gt;
&lt;p&gt;Now check &lt;a class="reference external" href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This works because the &lt;a class="reference external" href="https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x"&gt;&amp;quot;extendable&amp;quot; (buildout configuration file)&lt;/a&gt; contains:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;a class="reference external" href="https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/conf/app.wsgi.in"&gt;little WSGI app&lt;/a&gt; from the QuickInstallationGuide, templatized via &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.recipe.template/1.9"&gt;collective.recipe.template&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a class="reference external" href="https://github.com/ACLARKNET/build/blob/master/apache/2.2.x/httpd.conf.in"&gt;templatized httpd.conf file&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I like to automate the process even further with the &lt;a class="reference external" href="https://github.com/ACLARKNET/binfiles/blob/master/test-apache"&gt;following script&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/shmkdir $1
virtualenv-2.6 $1
cd $1
bin/easy_install zc.buildout
bin/buildout init
cat &amp;lt;&amp;lt; EOF &amp;gt; buildout.cfg
[buildout]
extends = https://raw.github.com/pythonpackages/buildout-apache-modwsgi/master/2.2.x
EOF
bin/buildout
bin/supervisord -e debug -n
&lt;/pre&gt;
&lt;p&gt;Thus closing the loop on this blog entry, and making the following possible:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ test-apache test-dir
&lt;/pre&gt;
&lt;p&gt;I've been using my &lt;a class="reference external" href="https://github.com/ACLARKNET/binfiles/blob/master/test-plone"&gt;test-plone&lt;/a&gt; script for years now, and I'm hoping that the test-apache script proves just as useful (especially as Plone moves closer to a WSGI-supporting stack via &lt;a class="reference external" href="http://pypi.python.org/pypi/Zope2/2.13.9"&gt;Zope 2.13&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Hello Plone</title><link href="http://aclark.net/blog/2011/08/20/hello-plone/" rel="alternate"></link><updated>2011-08-20T20:27:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-08-20:2011/08/20/hello-plone/</id><summary type="html">&lt;p&gt;This is a &amp;quot;hello world&amp;quot; style tutorial/application for Plone, aimed squarely at Python developers. I have created a project on Github too, to hold the code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aclark4life/hello_plone"&gt;https://github.com/aclark4life/hello_plone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="step-1-setup"&gt;
&lt;h2&gt;Step 1 - Setup&lt;/h2&gt;
&lt;p&gt;Everyone in the Python world loves virtualenv, so this step will be a familiar one. Inside the hello_plone repo, I first create a virtualenv:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ virtualenv .
&lt;/pre&gt;
&lt;p&gt;I then install some additional tools:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/pip install zc.buildout
&lt;/pre&gt;
&lt;p&gt;As you see, Plone uses Buildout. One day it may not, but for now it does. Get over it. ;-) (Or better yet, help us figure out how to make Buildout optional in Plone. Many would welcome the improvement, and hail you as their conquering hero!) Until then:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/buildout init
&lt;/pre&gt;
&lt;p&gt;Edit your buildout.cfg and put this in it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends = http://raw.github.com/pythonpackages/buildout-plone/master/4.3.x
&lt;/pre&gt;
&lt;p&gt;That's it. Now run buildout:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/buildout
&lt;/pre&gt;
&lt;p&gt;It will take some time to download all the packages, but you only have to do this once. Afterward, you can configure a global packages directory and share that amongst all your development projects. See the &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout/1.5.2#user-defaults"&gt;zc.buildout 1.5.2 page on PyPI&lt;/a&gt; to find out more. When it finishes, do this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/plone fg
&lt;/pre&gt;
&lt;p&gt;Then open &lt;a class="reference external" href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Click the button and follow the steps. You don't need to select any additional add-ons from the list. Afterward, you should get a Plone site here: &lt;a class="reference external" href="http://localhost:8080/Plone"&gt;http://localhost:8080/Plone&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-develop"&gt;
&lt;h2&gt;Step 2 - Develop&lt;/h2&gt;
&lt;p&gt;There are a ton of things you can do in Plone, but it is primarily a &amp;quot;content management system&amp;quot; meaning, &amp;quot;you put your website in it.&amp;quot;¹ And I don't mean your &amp;quot;crazy cool next gen web app&amp;quot; website. I mean your web. site. The one you use for you or your business or church or band or bridge club or whatever. Since this is a &amp;quot;hello world&amp;quot; demonstration, I am going to show you how to start writing Python code whose results will &amp;quot;show up on the screen&amp;quot; in short order. After that, I'll point you to some next steps. So, to develop we need a Python package. Create your own, or use zopeskel (paster wrapped in some &amp;quot;user friendliness&amp;quot;). Or use paster with the zopeskel templates installed.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/pip install zopeskel
$ bin/zopeskel plone_basic my.app

plone: A project for Plone add-ons

…
&lt;/pre&gt;
&lt;p&gt;Now that we have a Python package, we want to &amp;quot;load it in Plone&amp;quot;. To do that, we need to add the package to our buildout. Fortunately, buildout has a mechanism for this particular use case built in. It's called a &amp;quot;develop egg&amp;quot;, and it is configured via the `develop` parameter available in the `buildout` section. Additionally, we need to &amp;quot;tell Plone&amp;quot; about our develop egg too. But this is done in the same way you tell Plone about any other package. You add it to the `eggs` parameter of the `plone.recipe.zope2instance` section. So now we have:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
develop = ./my.app
extends = http://raw.github.com/pythonpackages/buildout-plone/master/4.3.x

[plone]
eggs += my.app
&lt;/pre&gt;
&lt;p&gt;Now let's write some code. We are going to: &amp;quot;wire up a template to a view&amp;quot;, say &amp;quot;hello world!&amp;quot; then &amp;quot;call it a day&amp;quot;. This is accomplished via some &amp;quot;goo&amp;quot; maintained by the &lt;a class="reference external" href="http://docs.zope.org/zopetoolkit/"&gt;Zope Toolkit project&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from Products.Five.browser.pagetemplatefile import
    ViewPageTemplateFile
from zope.publisher.browser import BrowserPage

class Hello(BrowserPage):
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;&amp;quot;&amp;quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp; Wire up some goo
&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;quot;&amp;quot;&amp;quot;

&amp;nbsp;&amp;nbsp;&amp;nbsp; template = ViewPageTemplateFile('hello.pt')

&amp;nbsp;&amp;nbsp;&amp;nbsp; def __call__(self):
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return self.template()
&lt;/pre&gt;
&lt;p&gt;And it can go in: &lt;strong&gt;*my.app/my/app/hello.py*.&lt;/strong&gt; Now, because Plone uses the &lt;a class="reference external" href="http://pypi.python.org/pypi/zope.component/3.10.0"&gt;Zope component architecture&lt;/a&gt;, we need to &amp;quot;wire up&amp;quot; the &amp;quot;component&amp;quot; we just created. This is done via the &lt;a class="reference external" href="http://pypi.python.org/pypi/zope.configuration/3.7.4"&gt;Zope Configuration Markup Language&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;configure
&amp;nbsp;&amp;nbsp;&amp;nbsp; xmlns:browser=&amp;quot;http://namespaces.zope.org/browser&amp;quot;&amp;gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;browser:page

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for=&amp;quot;*&amp;quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name=&amp;quot;hello&amp;quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; permission=&amp;quot;zope2.View&amp;quot;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /&amp;gt;

&amp;lt;/configure&amp;gt;
&lt;/pre&gt;
&lt;p&gt;And it goes in: &lt;strong&gt;*my.app/my/app/configure.zcml*&lt;/strong&gt;. It &amp;quot;just works&amp;quot; because we include an &lt;a class="reference external" href="http://pypi.python.org/pypi/z3c.autoinclude/0.3.4"&gt;entry point in our setup.py&lt;/a&gt; to make it so (paster took care of that, in this case.) Lastly, create: &lt;strong&gt;*my.app/my/app/hello.pt.*&lt;/strong&gt; And put &amp;quot;Hello world!&amp;quot; in it. Stop and start Plone (i.e. CTRL-C, bin/plone fg) and then open: &lt;a class="reference external" href="http://localhost:8080/Plone/hello"&gt;http://localhost:8080/Plone/hello&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nice, but a little boring. At the very least, let us get our &amp;quot;hello world!&amp;quot; to show up &amp;quot;in Plone&amp;quot;. To do this, we simply invoke Plone's main_template and insert our text into the main content area. Add the following to &lt;strong&gt;*my.app/my/app/hello.pt.*&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;div metal:use-macro=&amp;quot;here/main_template/macros/master&amp;quot;&amp;gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div metal:fill-slot=&amp;quot;main&amp;quot;&amp;gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;p&gt;As you can see, we are using &lt;a class="reference external" href="http://docs.zope.org/zope2/zope2book/ZPT.html"&gt;Zope Page Templates&lt;/a&gt;. ZPTs must be valid XHTML, much to the &lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/templates/#templates"&gt;chagrin of Django's creators&lt;/a&gt;. But in addition to the main con: &amp;quot;making humans edit XML is sadistic!&amp;quot;) there are some pros too e.g. &amp;quot;Play nicely with editing tools.&amp;quot; In other words, get over it.  ;-) (Or better yet, add support for using alternative template languages in Plone. I have no idea what the technical feasibility is, but it might be worth some effort.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-fun-profit"&gt;
&lt;h2&gt;Step 3 - Fun/profit!&lt;/h2&gt;
&lt;p&gt;That's not so bad you say? (That is what I am hoping you will say!) Great. Some good next steps are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Theming with Diazo and &lt;a class="reference external" href="http://pypi.python.org/pypi/plone.app.theming/1.0b8"&gt;plone.app.theming&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Content types with Dexterity and &lt;a class="reference external" href="http://pypi.python.org/pypi/plone.app.dexterity/1.0.1"&gt;plone.app.dexterity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Easy through-the-web form generation with &lt;a class="reference external" href="http://pypi.python.org/pypi/Products.PloneFormGen/1.7b5"&gt;PloneFormGen&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, check out the Plone &lt;a class="reference external" href="http://collective-docs.readthedocs.org"&gt;community managed developer documentation&lt;/a&gt; on readthedocs.org for more! ¹ c.f. SNL skit w/Rob Schnieder and/or Adam Sander too, apparently: &lt;a class="reference external" href="http://www.youtube.com/watch?v=muA5EBmpDhA"&gt;http://www.youtube.com/watch?v=muA5EBmpDhA&lt;/a&gt; I like the Rob Schnieder ones better :-)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Plone secrets: Episode 3 - Collective Recaptcha installation</title><link href="http://aclark.net/blog/2011/08/09/plone-secrets-episode-3-collective-recaptcha-installation/" rel="alternate"></link><updated>2011-08-09T12:19:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-08-09:2011/08/09/plone-secrets-episode-3-collective-recaptcha-installation/</id><summary type="html">&lt;p&gt;&lt;strong&gt;*Another one from the: &amp;quot;wow, this approach is totally and completely non-obvious to beginners&amp;quot; department.*&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="my-kingdom-for-a-custom-contact-form-with-captcha"&gt;
&lt;h2&gt;My kingdom for a (custom) contact form (with captcha)&lt;/h2&gt;
&lt;p&gt;I don't know if I've made written-mention of this anywhere else, but &lt;a class="reference external" href="http://aclark.net"&gt;aclark.net&lt;/a&gt;has a new customized &lt;a class="reference external" href="http://aclark.net/contact-info"&gt;contact form&lt;/a&gt; with captcha. ;-) It is customized via &lt;a class="reference external" href="http://pypi.python.org/pypi/z3c.jbot"&gt;z3c.jbot&lt;/a&gt; which is an awesome tool (more on that later). This in and of itself is not-so-terribly newsworthy. What is interesting, though, is &lt;em&gt;how&lt;/em&gt; this new customized form came to be; and how its features compare to the default contact form.&lt;/p&gt;
&lt;p&gt;So here goes: In Plone, we have a page template called &lt;a class="reference external" href="http://svn.plone.org/svn/plone/Products.CMFPlone/trunk/Products/CMFPlone/skins/plone_templates/contact-info.cpt"&gt;contact-info.cpt&lt;/a&gt;. It's not so special (in that it is pretty feature-&lt;em&gt;less&lt;/em&gt;, though it will send mail if you ask it to) but it does the job for most folks. And it almost has to, because customizing it is beyond the realm of what &lt;em&gt;anyone&lt;/em&gt; would call &amp;quot;straight forward&amp;quot; or &amp;quot;reasonable to expect from TTW customizers, integrators, or even developers&amp;quot;¹.&lt;/p&gt;
&lt;p&gt;Why do I say this?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="been-there-done-that-cmfformcontroller"&gt;
&lt;h2&gt;Been there, done that: CMFFormController&lt;/h2&gt;
&lt;p&gt;First, let me start with the technology that is used to implement the contact form.&amp;nbsp;It's called &lt;a class="reference external" href="http://pypi.python.org/pypi/Products.CMFFormController"&gt;CMFFormController&lt;/a&gt; and it went out of style in the 1970s, along with disco and bell bottoms. Bell bottoms came back, but CMFFormController didn't! Don't get me wrong: CMFFormController is a decent technology/implementation. It works. But it's not very &amp;quot;modern&amp;quot; by today's coding standards. As such, it will simply be dragged along Plone-version-after-Plone-version until either: a.) someone wants to replace it, or b.) it becomes too big of a maintenance burden to support and someone has to replace it. This is the way of many things, and there is nothing inherently wrong with this phenomenon. In fact, there are even good things about it: e.g. the release manager, framework team, and core developers' ability to publish release-after-solid-release under such code-aging circumstances is a testament to their skill and dedication.&lt;/p&gt;
&lt;p&gt;BUT… and this is a BIG BUT.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="we-can-do-better"&gt;
&lt;h2&gt;We can do better&lt;/h2&gt;
&lt;p&gt;Leaving this old stuff laying around, with no new stuff to point new users to does a huge disservice to &lt;em&gt;all&lt;/em&gt; of our users. It flies &lt;em&gt;directly&lt;/em&gt; in the face of one of our core missions: as &lt;a class="reference external" href="https://twitter.com/#!/asigottech"&gt;Wyn Williams&lt;/a&gt; put it once, to be the&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;&amp;quot;best damn enterprise content manage system on the planet&amp;quot;.&lt;/strong&gt;&lt;/blockquote&gt;
&lt;p&gt;Now, I've been around the block, so I am not suggesting we must fix everything at once. Legacy software can be supported for years and years and years (and &lt;a class="reference external" href="http://pypi.python.org/pypi/Zope2"&gt;YEARS&lt;/a&gt;). What I am suggesting is that we need to make a very significant effort to &lt;strong&gt;COMPLETELY HIDE&lt;/strong&gt; these implementation details to newcomers. I don't want to tell people in IRC to go to &lt;strong&gt;portal_skins&lt;/strong&gt; anymore. I want my &amp;quot;OS X Lion release for Plone&amp;quot;, please (sans Vista overtones.) :-)&lt;/p&gt;
&lt;p&gt;So how do we get there? Well, in the case of portal_skins there is talk of decommissioning &lt;strong&gt;portal_view_customizations,&lt;/strong&gt; which was supposed to be the &amp;quot;new portal_skins&amp;quot; as I understand it. But since half of our templates are still in CMF skin layers, &lt;em&gt;and&lt;/em&gt; because this feature was not technically well received (i.e. it needs &lt;em&gt;more&lt;/em&gt; features and development), &lt;em&gt;and&lt;/em&gt; because &lt;strong&gt;portal_resources&lt;/strong&gt; came along around the same time as &lt;a class="reference external" href="http://pypi.python.org/pypi/plone.app.theming"&gt;plone.app.theming&lt;/a&gt;, folks are considering removing portal_view_customizations. I have no strong opinion about it (other than I hate the name, too long) and I trust the Framework Team to handle it. What I do care about is that whatever remains in the ZMI be very clearly designated as either &amp;quot;new style&amp;quot; or &amp;quot;old style&amp;quot;. We can't get away from the ZMI yet, but portal tools do have title attributes so let's use them.&lt;/p&gt;
&lt;p&gt;Now, we can't ditch &lt;strong&gt;portal_skins&lt;/strong&gt; just yet, and who knows what will happen with &lt;strong&gt;portal_view_customizations&lt;/strong&gt;, but the *minute* we know some technology is out of date, we should reveal it in the user interface (even in the ZMI user interface). E.g.:&lt;/p&gt;
&lt;blockquote&gt;
Curiously, the attribute that holds this string is lowercase &amp;quot;title&amp;quot;
(I'd expect camel case Description, though I'm not entirely sure why
I expect that.)&lt;/blockquote&gt;
&lt;p&gt;Hanno Schlichting has made some great progress recently with enhancing the ZMI for Plone users, especially with regard to&lt;em&gt;file-system vs.  through-the-web&lt;/em&gt; development, and &lt;em&gt;through-the-plone vs. through-the-zmi configuration&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I love this trend, and would like to see more of it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="secrets-revealed"&gt;
&lt;h2&gt;Secrets revealed&lt;/h2&gt;
&lt;p&gt;Anyway, I've been dancing around the secrets to be revealed in this blog post because it is fun to play with the future. And it's important to work hard toward achieving it. But enough of that, here is what you need to know today.&lt;/p&gt;
&lt;p&gt;Like I said, I customized the contact form.&lt;/p&gt;
&lt;div class="section" id="old-style-vs-new-style"&gt;
&lt;h3&gt;Old style vs. new style&lt;/h3&gt;
&lt;p&gt;Back in the &amp;quot;old days&amp;quot; you had to create a CMF skin layer and put a copy of the template in a directory on the file system, configured as a File System Directory View. &lt;em&gt;Everything&lt;/em&gt; used to be customized via skin layers.&lt;/p&gt;
&lt;p&gt;Now-a-days, we have z3c.jbot. Though a bit of a hack², it does exactly what you'd expect, almost exactly how you'd expect it to. It &lt;a class="reference external" href="https://github.com/aclark4life/aclark_net_website"&gt;doesn't even require a Python package&lt;/a&gt;. By convention though, folks typically do put z3c.jbot template customizations in Python packages.&lt;/p&gt;
&lt;p&gt;This requires a few steps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-1-create-a-python-package"&gt;
&lt;h3&gt;Step 1: Create a Python package&lt;/h3&gt;
&lt;p&gt;First, a Python package. This is relatively simple, so I'm not going to skip-and-point-you-somewhere-else just yet, I'm going to explain first.
The &lt;a class="reference external" href="https://gist.github.com/1123090"&gt;gist of it&lt;/a&gt; is this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir -p my.package/my/package
$ touch my.package/setup.py
$ touch my.package/my/__init__.py
$ touch my.package/my/package/__init__.py
&lt;/pre&gt;
&lt;p&gt;Now you would edit setup.py and the &amp;quot;middle&amp;quot; __init__.py with code.
Something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#!/bin/sh
mkdir -p my.package/my/package
touch my.package/setup.py
touch my.package/my/__init__.py
touch my.package/my/package/__init__.py
cat &amp;gt; my.package/setup.py &amp;lt;&amp;lt; EOF
from setuptools import setup, find_packages
setup(
&amp;nbsp;&amp;nbsp;&amp;nbsp; name='my.package',
&amp;nbsp;&amp;nbsp;&amp;nbsp; packages=find_packages(),
&amp;nbsp;&amp;nbsp;&amp;nbsp; namespace_packages=[
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 'my',
&amp;nbsp;&amp;nbsp;&amp;nbsp; ]
)
EOF
cat &amp;gt; my.package/my/__init__.py &amp;lt;&amp;lt; EOF
from pkg_resources import declare_namespace
declare_namespace(__name__)
EOF
&lt;/pre&gt;
&lt;p&gt;Alternatively, use &lt;a class="reference external" href="http://pypi.python.org/pypi/ZopeSkel"&gt;ZopeSkel&lt;/a&gt; to generate all this boilerplate code for you. It does a much better, and more complete job than what I have done here. The important thing is that you &lt;em&gt;understand what is going on&lt;/em&gt;. In the case of aclark.net, our Python package is called &lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/tree/master/src/plonetheme.aclarknet"&gt;plonetheme.aclarknet&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-add-template-overrides"&gt;
&lt;h3&gt;Step 2: Add template overrides&lt;/h3&gt;
&lt;p&gt;Now that we have a Python package we can start customizing Plone. By convention, we&amp;nbsp; create a &amp;quot;templates&amp;quot; directory inside the namespaced package e.g.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ mkdir my.package/my/package/templates
&lt;/pre&gt;
&lt;p&gt;Or you can check out aclark.net's &amp;quot;templates&amp;quot; directory here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/tree/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates"&gt;https://github.com/ACLARKNET/aclark_net_website/tree/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because of the way z3c.jbot works, in the &amp;quot;templates&amp;quot; directory, we add files with names that correspond to the Python module we want to customize. E.g.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_templates.contact-info.cpt"&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_templates.contact-info.cpt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(For some reason, github thinks that file is binary, so &lt;a class="reference external" href="http://dpaste.com/589529/"&gt;here are the contents&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Now, this is the amazing part: in addition to templates in views, viewlets and portlets, we can customize any &lt;a class="reference external" href="http://old.zope.org/Products/CMF/"&gt;CMF&lt;/a&gt; object! E.g. the &lt;a class="reference external" href="http://pypi.python.org/pypi/RestrictedPython"&gt;RestrictedPython&lt;/a&gt; (more technology anyone?) CMFFormController validation script used to validate our contact form:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_form_scripts.validate_site_feedback.vpy"&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_form_scripts.validate_site_feedback.vpy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That brings us to adding recaptcha, but first let us finish configuring template overrides.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-configure-template-overrides"&gt;
&lt;h3&gt;Step 3: Configure template overrides&lt;/h3&gt;
&lt;p&gt;Now that we have customized Plone templates, we can configure Plone to use our customizations.&lt;/p&gt;
&lt;p&gt;This is done via a technology you may have heard of: &lt;a class="reference external" href="http://plone.org/documentation/manual/theme-reference/buildingblocks/components/wiring"&gt;ZCML&lt;/a&gt;. Using ZCML, we can tell Plone (or jbot in this case) to use the templates in our &amp;quot;templates&amp;quot; directory.&lt;/p&gt;
&lt;p&gt;The ZCML we are going to use is placed in the &amp;quot;top level&amp;quot; configure.zcml file in our package. That means we need a top level configure.zcml file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ touch my.package/my/package/configure.zcml
&lt;/pre&gt;
&lt;p&gt;Next we add ZCML to &amp;quot;configure our application&amp;quot;. Note in addition to the ZCML used to configure jbot, there is ZCML for Diazo and ZCML to hold our &lt;a class="reference external" href="http://blog.aclark.net/2011/06/20/plone-secrets-episode-1-%e2%80%94-site-actions-contact-link/"&gt;Genericsetup customizations:&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;configure
    xmlns:browser=&amp;quot;http://namespaces.zope.org/browser&amp;quot;
    xmlns:genericsetup=&amp;quot;http://namespaces.zope.org/genericsetup&amp;quot;
    xmlns:plone=&amp;quot;http://namespaces.plone.org/plone&amp;quot;
    xmlns=&amp;quot;http://namespaces.zope.org/zope&amp;quot;&amp;gt;    &amp;lt;plone:static directory=&amp;quot;theme/aclarknet&amp;quot; type=&amp;quot;theme&amp;quot; /&amp;gt;    &amp;lt;include package=&amp;quot;z3c.jbot&amp;quot; file=&amp;quot;meta.zcml&amp;quot; /&amp;gt;
    &amp;lt;browser:jbot directory=&amp;quot;templates&amp;quot; /&amp;gt;    &amp;lt;genericsetup:registerProfile
        name=&amp;quot;default&amp;quot;
        title=&amp;quot;ACLARK.NET, LLC profile&amp;quot;
        description=&amp;quot;Installs ACLARK.NET, LLC site
            customizations&amp;quot;
        directory=&amp;quot;profiles/default&amp;quot;
        provides=&amp;quot;Products.GenericSetup.interfaces.EXTENSION&amp;quot;
        /&amp;gt;&amp;lt;/configure&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This file is located here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml"&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see that everything inside the &amp;lt;configure&amp;gt;&amp;lt;/configure&amp;gt; tag(s) is associated with an XML namespace. If you don't add the appropriate namespace inside the &amp;lt;configure&amp;gt; tag, your configuration will fail spectacularly (because without the proper XML namespace configured, there is no code loaded to handle your configuration.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-add-recaptcha"&gt;
&lt;h3&gt;Step 4: Add recaptcha&lt;/h3&gt;
&lt;p&gt;Now, finally, we get to the exciting part. We have customized our contact form, but we are receiving a fair amount of spam due to spammers' ability to automate form submission. To foil the spammers, we want to add a captcha form that will hopefully require that an actual human to fill out the form.&lt;/p&gt;
&lt;p&gt;Thanks to David Glick and Groundwire, we have &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.recaptcha"&gt;collective.recaptcha&lt;/a&gt; which provides an integration of &lt;a class="reference external" href="http://www.google.com/recaptcha"&gt;Google's Recaptcha service&lt;/a&gt; into Plone.&lt;/p&gt;
&lt;p&gt;In order to use it, first we add the package to our buildout, e.g.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
…
[plone]
# Eggs are Python packages
eggs +=
#   Diazo theming
    plonetheme.aclarknet
#   Add-ons
    collective.portlet.wordpress
    collective.recaptcha# Need zcml for c.recaptcha until 1.1.3 is released
zcml = collective.recaptcha
…
&lt;/pre&gt;
&lt;p&gt;See the rest of the file here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://raw.github.com/ACLARKNET/aclark_net_website/master/buildout.cfg"&gt;https://raw.github.com/ACLARKNET/aclark_net_website/master/buildout.cfg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now run buildout and restart Plone.&lt;/p&gt;
&lt;p&gt;With collective.recaptcha installed via buildout, you should now be able to open &lt;a class="reference external" href="http://yoursite:8080/Plone/&amp;#64;&amp;#64;recaptcha-settings"&gt;http://yoursite:8080/Plone/&amp;#64;&amp;#64;recaptcha-settings&lt;/a&gt; to configure Recaptcha.&lt;/p&gt;
&lt;p&gt;(To get a public and private key, you can sign up for recaptcha here: &lt;a class="reference external" href="http://www.google.com/recaptcha"&gt;http://www.google.com/recaptcha&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Lastly, make the appropriate changes to the contact form and validation script. E.g. &lt;a class="reference external" href="http://dpaste.com/589529/"&gt;include the captcha image:&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
…
&amp;lt;tal:block tal:replace=&amp;quot;structure
    context/&amp;#64;&amp;#64;captcha/image_tag&amp;quot;/&amp;gt;
…
&lt;/pre&gt;
&lt;p&gt;And make sure to &lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/templates/Products.CMFPlone.skins.plone_form_scripts.validate_site_feedback.vpy"&gt;validate the submission&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
…
&amp;nbsp;&amp;nbsp;&amp;nbsp; # Re-captcha validation
&amp;nbsp;&amp;nbsp;&amp;nbsp; if not context.restrictedTraverse('&amp;#64;&amp;#64;captcha').verify():
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; context.plone_utils.addPortalMessage(_(u'You entered
            an invalid captcha.'), 'error')
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return state.set(status='failure')
&amp;nbsp;&amp;nbsp;&amp;nbsp; else:
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return state
…
&lt;/pre&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;¹ I'm pushing &amp;quot;reasonable&amp;quot; limits here for argument's sake. For those who know Plone already, a lot of what might seem impossible to newcomers is &amp;quot;reasonable&amp;quot; for them. No flames please. Unless you absolutely must.  ;-)&lt;/p&gt;
&lt;p&gt;² I hear people call it that, though I don't know the details. I assume it &amp;quot;monkey patches&amp;quot; which template to use at render-time.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Plone secrets: Episode 2 - Collective Python buildout</title><link href="http://aclark.net/blog/2011/07/06/plone-secrets-episode-2-collective-python-buildout/" rel="alternate"></link><updated>2011-07-06T12:45:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-07-06:2011/07/06/plone-secrets-episode-2-collective-python-buildout/</id><summary type="html">&lt;p&gt;You know who uses the (Plone) Collective Python buildout? Me neither, because we don't have any good statistics on its use (that I know of).  If it were a Python package, we could at least &lt;a class="reference external" href="http://blog.aclark.net/2011/06/16/youre-so-vain-so-why-not-use-vanity/"&gt;count the number of times it has been downloaded&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You know who should use it? Everyone.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[dramatic pause…]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;OK maybe not everyone, but at least everyone that regularly develops with &lt;strong&gt;multiple versions of Python&lt;/strong&gt;. Here's why.&lt;/p&gt;
&lt;div class="section" id="actively-maintained"&gt;
&lt;h2&gt;Actively maintained&lt;/h2&gt;
&lt;p&gt;Check out the log. It has been going strong for over 3 years.&lt;/p&gt;
&lt;p&gt;If I recall correctly, it was born out of the frustration¹ of having to compile Python on Mac OS X Leopard. Python &lt;em&gt;never&lt;/em&gt; compiles correctly on new versions of OS X (which is a complete mystery to me given that Apple ships with Python, don't they think people will want to compile it?).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="easy-to-install"&gt;
&lt;h2&gt;Easy to install&lt;/h2&gt;
&lt;p&gt;Got Subversion? Then you &lt;em&gt;can haz&lt;/em&gt; the Collective Python buildout². You will also need to bootstrap it with whatever Python version you happen to have laying around. I won't go into detail about this; but suffice it to say depending on your OS, one of the following or something like it should work:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ aptitude install python2.5
&lt;/pre&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ brew install python
&lt;/pre&gt;
&lt;p&gt;If you are on Windows, give up (unless you have a Microsoft C compiler). Sorry.&lt;/p&gt;
&lt;p&gt;Now, check out the code from the repository (if you are a member of the &lt;a class="reference external" href="http://dev.plone.org/collective"&gt;Collective&lt;/a&gt; and may potentially contribute something back, make sure you use https):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ svn co http://svn.plone.org/svn/collective/buildout/python
&lt;/pre&gt;
&lt;p&gt;Next, bootstrap and run the buildout:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd python
$ python bootstrap.py -d
$ bin/buildout
&lt;/pre&gt;
&lt;p&gt;That's it. The buildout should go merrily on it's way compiling Python 2.4 through 3.2. When it finishes, you can install it in /opt (or wherever you like) with the following command (you might need sudo):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/install-links
&lt;/pre&gt;
&lt;p&gt;Then you should see:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ /bin/ls -1 /opt/local/bin
easy_install-2.4
easy_install-2.5
easy_install-2.6
easy_install-2.7
easy_install-3.2
pip-2.4
pip-2.5
pip-2.6
pip-2.7
pip-3.2
python2.4
python2.5
python2.6
python2.7
python3.2
virtualenv-2.4
virtualenv-2.5
virtualenv-2.6
virtualenv-2.7
virtualenv-3.2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="easy-to-configure"&gt;
&lt;h2&gt;Easy to configure&lt;/h2&gt;
&lt;p&gt;Now you can add &lt;strong&gt;/opt/local/bin&lt;/strong&gt; to your environment PATH variable.  This will make it easy to choose a particular Python, PIP, or Virtualenv at your leisure.&lt;/p&gt;
&lt;p&gt;Unfortunately, if you pip install something, it will end up in the checkout instead of &lt;em&gt;/opt/local/bin&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To get around this, I usually pick one Python for daily use, and add its bin directory to my environment PATH variable:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ echo $PATH | tr ':' 'n'
/sbin
/usr/sbin
/usr/local/bin
/opt/local/bin
/Users/aclark/Developer/collective/python/python-2.7/bin
/usr/bin
/bin
/sbin
/usr/X11/bin
&lt;/pre&gt;
&lt;p&gt;After various pip installs, my 2.7 bin directory contains the usual tools of the trade:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ /bin/ls -1 /Users/aclark/Developer/collective/python/
python-2.7/bin
__dotcloud_git_ssh
activate
activate.csh
activate.fish
activate_this.py
bfg2pyramid
checkoutmanager
cloudservers
dotcloud
easy_install
easy_install-2.7
eye
flake8
fsdump
fsoids
fsrefs
fstail
hg
mako-render
mkrelease
paster
pilconvert.py
pildriver.py
pilfile.py
pilfont.py
pilprint.py
pip
pip-2.7
playerpiano
pygmentize
python
python2.7
recorderpiano
repozo
rfc2397
rst2html.py
rst2latex.py
rst2man.py
rst2newlatex.py
rst2odt.py
rst2odt_prepstyles.py
rst2pseudoxml.py
rst2s5.py
rst2xml.py
rstpep2html.py
runzeo
sphinx-autogen
sphinx-build
sphinx-quickstart
vanity
zconfig
zconfig_schema2html
zdaemon
zeoctl
zeopack
zeopasswd
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="wrap-it-up-i-ll-take-it"&gt;
&lt;h2&gt;Wrap it up, I'll take it&lt;/h2&gt;
&lt;p&gt;That's it! There is not too much more to say, other than I hope you find this post useful and will consider using the &lt;a class="reference external" href="http://svn.plone.org/svn/collective/buildout/python"&gt;Collective Python buildout&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, comments are always welcome.&lt;/p&gt;
&lt;div class="section" id="notes"&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;¹ Experienced by its creator, &lt;a class="reference external" href="http://twitter.com/fschulze"&gt;fschulze&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;² It will likely end up on &lt;a class="reference external" href="http://github.com/collective"&gt;Github&lt;/a&gt; at some point.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Plone secrets: Episode 1 — Site actions contact link</title><link href="http://aclark.net/blog/2011/06/20/plone-secrets-episode-1-site-actions-contact-link/" rel="alternate"></link><updated>2011-06-20T12:31:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-06-20:2011/06/20/plone-secrets-episode-1-site-actions-contact-link/</id><summary type="html">&lt;p&gt;Today I am introducing a new category of blog entry called &lt;strong&gt;Plone secrets&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The goal is to describe a set of developer/integrator techniques that are extremely valuable, but completely non-obvious to newcomers.&lt;/p&gt;
&lt;p&gt;The first episode, called: &lt;strong&gt;Site actions contact link&lt;/strong&gt;, is really just a technique that involves the Zope Management Interface, Plone interface, file system, Diazo, and quite possibly a few other technologies. This is no secret, but certainly convoluted. Noticeably absent is anything Python-related, unless you count the `plonetheme.aclarknet` namespace package.&lt;/p&gt;
&lt;p&gt;We begin by pointing your attention to the new &amp;quot;Contact us today!&amp;quot; link on aclark.net.&lt;/p&gt;
&lt;p&gt;This is a gratuitous rip off of any Plone firm's website that has contact info in the upper right of their site (e.g.  &lt;a class="reference external" href="http://sixfeetup.com"&gt;http://sixfeetup.com&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I knew I wanted to do &amp;quot;my version&amp;quot; of adding contact info to the upper right, and I think I've seen someone use this exact technique somewhere else (I would credit them if I could remember.)&lt;/p&gt;
&lt;p&gt;Long story short: Plone 4's sunburst theme has a nice JavaScript drop down menu for the personal tools menu. As long as I was willing to give up a link to the login form (which I don't like displaying on public sites anyway), I could use this JavaScript menu to quickly and easily provide a link to my contact form.&lt;/p&gt;
&lt;p&gt;It &amp;quot;only&amp;quot; required the following:&lt;/p&gt;
&lt;div class="section" id="step-1"&gt;
&lt;h2&gt;Step 1&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Get the personal tools menu to show up in my site. This was accomplished via the following Diazo rule:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;prepend content='//*[&amp;#64;id=&amp;quot;portal-personaltools&amp;quot;]'
     theme='//*[&amp;#64;id=&amp;quot;search&amp;quot;]' /&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Note also that I am using the early-supported XPath syntax, but the more friendly CSS syntax is supported now too. See &lt;a class="reference external" href="http://diazo.org"&gt;http://diazo.org&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;For the full set of Diazo rules for this site, see here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Plone:
&lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/theme/aclarknet/rules.xml"&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/theme/aclarknet/rules.xml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Wordpress:
&lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/blob/master/theme/blog.xml"&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/theme/blog.xml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2"&gt;
&lt;h2&gt;Step 2&lt;/h2&gt;
&lt;p&gt;Next, we need to create and display only the &amp;quot;Contact us today!&amp;quot; link, which also involves disabling the &amp;quot;Log in&amp;quot; link. These tricks can be performed in the Zope Management Interface via the portal_actions tool.&lt;/p&gt;
&lt;p&gt;First, browse to `Site Setup -&amp;gt; Zope Management Interface -&amp;gt; portal_actions -&amp;gt; user` and create a `contact` action.&lt;/p&gt;
&lt;p&gt;Fill in the appropriate fields and click `Save changes`.&lt;/p&gt;
&lt;p&gt;Finally, hide the `Log in` action by unchecking `Visible` and clicking `Save changes`.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3"&gt;
&lt;h2&gt;Step 3&lt;/h2&gt;
&lt;p&gt;Lastly and most importantly, persist your work on the file system outside of the database. You don't want to be forced to recreate this
site action ever again through the web.&lt;/p&gt;
&lt;p&gt;This involves exporting the action via portal setup, and adding it to your package's GenericSetup profile. Browse to `Site Setup -&amp;gt; Zope Management Interface -&amp;gt; portal_setup -&amp;gt; Export. Check the `Action providers` step.&lt;/p&gt;
&lt;p&gt;Then scroll all the way down to bottom and click `Export selected steps`.&lt;/p&gt;
&lt;p&gt;This will give you a tarred/gzipped file that when extracted will give you an `actions.xml` file. Edit this file to include only the action you created, like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt; &amp;lt;/object&amp;gt;
&amp;lt;/object&amp;gt;
&lt;/pre&gt;
&lt;p&gt;You can find this file in its entirety here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/profiles/default/actions.xml"&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/profiles/default/actions.xml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You also have to register a default profile in your package with ZCML (more technology!), like so:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;genericsetup:registerProfile
 name=&amp;quot;default&amp;quot;
 title=&amp;quot;ACLARK.NET, LLC profile&amp;quot;
 description=&amp;quot;Installs ACLARK.NET, LLC site customizations&amp;quot;
 directory=&amp;quot;profiles/default&amp;quot;
 provides=&amp;quot;Products.GenericSetup.interfaces.EXTENSION&amp;quot;
 /&amp;gt;
&lt;/pre&gt;
&lt;p&gt;You can find this file in its entirety here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml"&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/configure.zcml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4"&gt;
&lt;h2&gt;Step 4&lt;/h2&gt;
&lt;p&gt;Style the results. This is more like Step 3.5, but still important.  Because we are doing Diazo theming, styling is easy. It's just a matter of editing the style sheet on the file system like you would expect to do in any web project. Of course, you need to know a bit about CSS and the CSS ids that Plone uses:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#personaltools-contact {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;color: #AA001F;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;background: white;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text-transform: uppercase;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;font-size: 150%;
}
#portal-personaltools {
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;background: white;
}
&lt;/pre&gt;
&lt;p&gt;You can find this file in its entirety here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/theme/aclarknet/static/css/plone.css#L519"&gt;https://github.com/ACLARKNET/aclark_net_website/blob/master/src/plonetheme.aclarknet/plonetheme/aclarknet/theme/aclarknet/static/css/plone.css#L519&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of course, these styles apply to the public facing site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;p&gt;I hope this post captures the essence of why I think many folks may be intimidated by Plone: in more cases than not, one must understand way too many technologies in order to get the job done. I hope to continue to demystify Plone through a series of &amp;quot;Plone secrets&amp;quot; posts, and ultimately I think the Plone project hopes to resolve these issues once and for all, however long that takes.&lt;/p&gt;
&lt;p&gt;I will speculate that long term Plone will move away from Zope 2, and everything from the Zope Management Interface that was useful will be recreated in Plone (i.e. ported). Or rather, that is what I would like to see happen.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>You&amp;#039;re so vain, so why not use Vanity?</title><link href="http://aclark.net/blog/2011/06/16/you039re-so-vain-so-why-not-use-vanity/" rel="alternate"></link><updated>2011-06-16T12:01:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-06-16:2011/06/16/you039re-so-vain-so-why-not-use-vanity/</id><summary type="html">&lt;p&gt;A few months ago I created a package called &lt;strong&gt;Vanity&lt;/strong&gt;[0] that
provides easy access to package download statistics from &lt;strong&gt;PyPI&lt;/strong&gt;. You
can find the source code here: &lt;a class="reference external" href="https://github.com/aclark4life/vanity"&gt;https://github.com/aclark4life/vanity&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I love this tool, and I use it all the time to gauge the value of a
package. Of course, downloads are only one criteria you can use to judge
the value of a package, and arguably not even a very good one.
&lt;strong&gt;Vanity&lt;/strong&gt; itself is a good example of this phenomenon. I find it
incredibly useful, but in it's history it has only been downloaded &lt;em&gt;130&lt;/em&gt;
times.&lt;/p&gt;
&lt;p&gt;Other packages I have created with much less value have been downloaded
more times, e.g. &lt;strong&gt;plonetheme.aclark_twitter&lt;/strong&gt; which has been
downloaded&amp;nbsp; &lt;em&gt;674&lt;/em&gt; times. But that package has also been around much
longer. So obviously another useful metric would be the &lt;em&gt;time period&lt;/em&gt;
during which the downloads occurred.&lt;/p&gt;
&lt;p&gt;Anyway, here is how it works:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ easy_install vanity
&lt;/pre&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vanity &amp;lt;package&amp;gt;
&lt;/pre&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vanity vanity
Package `vanity` has been downloaded 130 times!
&lt;/pre&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vanity plonetheme.aclark_twitter
Package `plonetheme.aclark_twitter` has been downloaded 674 times!
&lt;/pre&gt;
&lt;p&gt;Some of my other favorites:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ vanity Django[1]
Package `Django` has been downloaded 302111 times!
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
$ vanity zope.component
Package `zope.component` has been downloaded 210541 times!
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
$ vanity pyramid
Package `pyramid` has been downloaded 26067 times!
&lt;/pre&gt;
&lt;p&gt;Another thing to consider is if hitting &lt;strong&gt;PyPI&lt;/strong&gt; each time is really
necessary. I'm told there is &lt;strong&gt;PyPI&lt;/strong&gt; data living somewhere else, and in
future versions I would like to make vanity use that data by default.&lt;/p&gt;
&lt;p&gt;So, this post is simply to announce &lt;strong&gt;Vanity&lt;/strong&gt; to a wider audience in
the event that some folks may find it useful. Otherwise, I will be happy
to continue to watch &lt;strong&gt;Vanity&lt;/strong&gt; downloads crawl ever so slowly towards
200. :-)&lt;/p&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;[0] By standing on the shoulders of some Plone giants, &lt;a class="reference external" href="http://davisagli.com/"&gt;David Glick,&lt;/a&gt;
in particular.&lt;/p&gt;
&lt;p&gt;[1] There is a &lt;a class="reference external" href="https://github.com/aclark4life/vanity/issues/1"&gt;known issue&lt;/a&gt; with regard to making Vanity case
insensitive.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>ACLARK.NET seeks unique candidate for part time business consulting</title><link href="http://aclark.net/blog/2011/06/14/aclarknet-seeks-unique-candidate-for-part-time-business-consulting/" rel="alternate"></link><updated>2011-06-14T15:40:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-06-14:2011/06/14/aclarknet-seeks-unique-candidate-for-part-time-business-consulting/</id><summary type="html">&lt;p&gt;We are looking for a unique and talented (but mostly non-technical)
individual that is passionate about Plone, and able to dedicate some
small amount of time per month to generating new business for us[1].&lt;/p&gt;
&lt;p&gt;Plone is up and coming (again)! And we want to (1.) capitalize on that
fact and (2.) scale our business accordingly. But to do so, we really
need your help.&lt;/p&gt;
&lt;div class="section" id="about-us"&gt;
&lt;h2&gt;About us&lt;/h2&gt;
&lt;p&gt;We are a team[2] of Python, Plone, Web, and Business savvy people
focused on Python, Plone, the web, and generally speaking: deploying and
maintaining Plone applications that range from CMS to specialized
applications, tailored to fit the needs of our clients[3].&lt;/p&gt;
&lt;div class="section" id="alex"&gt;
&lt;h3&gt;Alex&lt;/h3&gt;
&lt;p&gt;For those of you that know me, you know that I am largely technically,
very artistic, and focused a lot on systems and making-things-work (vs.
programming), and that I am passionate to a fault about Plone and the
Plone community. For those of you that don't know me, I'm responsible
for all new business at ACLARK.NET and I am the technical lead on all of
our projects. I also rock a maroon Japanese Fender Stratocaster (circa
mid 1980s) on occasion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="amy"&gt;
&lt;h3&gt;Amy&lt;/h3&gt;
&lt;p&gt;My wife and business partner Amy is the &amp;quot;business coordinator&amp;quot; and she
handles all things customer-related (that are non-technical) as well as
anything legal and/or financial. If you know her, then you know she is a
force to be reckoned with as well as one of the nicest, most
professional people you will ever meet. If you don't know her, watch
out! When she is not watching the bottom line, Amy can be found caring
for our always-singing-while-she-is-on-the-phone yellow canary: J.
Alexander Chirpington III.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="team"&gt;
&lt;h3&gt;Team&lt;/h3&gt;
&lt;p&gt;Team ACLARK also consists of a variety of highly skilled sub contractors
that always make us look good by making our clients happy, and hopefully
have lots of fun doing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="business"&gt;
&lt;h3&gt;Business&lt;/h3&gt;
&lt;p&gt;To date, other than constantly &amp;quot;pimping&amp;quot; (promoting) myself personally
(on behalf of my company) within the Plone community, we have never
actively sought out any business. And we manage to stay quite busy with
the work that finds us. But it has occurred to us that in order to
compete most effectively with &amp;quot;the big boys&amp;quot; (i.e. all our
friends/colleagues/etc at &lt;a class="reference external" href="http://plone.net"&gt;http://plone.net&lt;/a&gt;) we need to be more
pro-active about seeking out new business.&lt;/p&gt;
&lt;p&gt;That's where you come in.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="about-you"&gt;
&lt;h2&gt;About you&lt;/h2&gt;
&lt;p&gt;We need someone to pursue leads on our behalf, because we simply don't
have time to do it and we don't have anyone in-house that is
particularly well-suited to the task. However, we don't want to let that
stop us from growing our business and deploying as many Plone sites as
possible; especially when we are confident we have the ability to
deliver on just about any kind of Plone-related project, and then some
(i.e. Django, Pyramid, etc., almost anything Python-related.)&lt;/p&gt;
&lt;div class="section" id="criteria"&gt;
&lt;h3&gt;Criteria&lt;/h3&gt;
&lt;p&gt;First and foremost, you love (and use) Plone (but aren't necessarily an
integrator/developer; most likely an end user). But also:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You are a &amp;quot;people person&amp;quot;.&lt;/li&gt;
&lt;li&gt;You have some writing skills, perhaps even a technical writer.&lt;/li&gt;
&lt;li&gt;You are aggressive about scoring new business, perhaps even someone
with a sales background.&lt;/li&gt;
&lt;li&gt;You are a professional, and will represent us and our business
accordingly!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also nice to have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You have a full-time job that is Plone-related.&lt;/li&gt;
&lt;li&gt;You have experience writing proposals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You don't necessarily have to &amp;quot;know everything&amp;quot; to do this job
effectively for us, but you do have to be excited and pro-active about
it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="logistics"&gt;
&lt;h3&gt;Logistics&lt;/h3&gt;
&lt;p&gt;We don't know how this will work yet. We are certainly willing to pay a
percentage of the anticipated bid value for any bid we win, but we are
considering other options as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-step"&gt;
&lt;h3&gt;Next step&lt;/h3&gt;
&lt;p&gt;Sound like you? Let's talk: &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net"&gt;aclark&amp;#64;aclark.net&lt;/a&gt;, 301-312-5236.&lt;/p&gt;
&lt;p&gt;We look forward to hearing from you, and please feel free to pass this
information on to anyone you think may be interested in this
opportunity.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Finding and submitting proposals, with our assistance, as needed.
Even something as small as 8 hours per month would be helpful.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://aclark.net/team"&gt;http://aclark.net/team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://aclark.net/clients"&gt;http://aclark.net/clients&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>&amp;quot;New&amp;quot; Plone theming has arrived</title><link href="http://aclark.net/blog/2011/05/27/quotnewquot-plone-theming-has-arrived/" rel="alternate"></link><updated>2011-05-27T17:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-05-27:2011/05/27/quotnewquot-plone-theming-has-arrived/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Edit2:&lt;/strong&gt;Enfold/Ploud.net looking for theme developers, see Alan
Runyan's comment below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: Laurence Rowe made new Diazo and plone.app.theming releases so
the &lt;a class="reference external" href="https://github.com/aclark4life/plonetheme.unilluminated/blob/master/unilluminated.zip?raw=true"&gt;zip file&lt;/a&gt;now works! Thanks Laurence.&lt;/p&gt;
&lt;p&gt;Due to the new Diazo theming features now available, I am very excited
about the recent release of &lt;a class="reference external" href="http://pypi.python.org/pypi/Plone/4.1rc2"&gt;Plone 4.1rc2&lt;/a&gt; and &lt;a class="reference external" href="http://pypi.python.org/pypi/plone.app.theming/1.0b2"&gt;plone.app.theming
1.0b2&lt;/a&gt;. So much so, I created a couple themes (in just a few hours) to
demonstrate my &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rapture"&gt;rapture [1]&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(released)
&lt;a class="reference external" href="http://pypi.python.org/pypi/plonetheme.unilluminated/0.1.0"&gt;http://pypi.python.org/pypi/plonetheme.unilluminated/0.1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(unreleased) &lt;a class="reference external" href="https://github.com/aclark4life/plonetheme.coolblue"&gt;https://github.com/aclark4life/plonetheme.coolblue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Granted, these aren't entirely &amp;quot;finished&amp;quot; (e.g. lots of CSS improvements
are needed) but it is truly impressive how much you can do with so
little effort (thanks to the hard work of the Diazo team, Plone team,
and of course the theme designers themselves).&lt;/p&gt;
&lt;p&gt;The best part has got to be the &lt;a class="reference external" href="http://pypi.python.org/pypi/plone.app.theming/1.0b2#zip-file-format"&gt;zip file packaging features&lt;/a&gt; in
plone.app.theming (provided by &lt;a class="reference external" href="http://pypi.python.org/pypi/plone.resource/1.0b2"&gt;plone.resource&lt;/a&gt;). While I did have a
bit of trouble getting &lt;a class="reference external" href="https://github.com/aclark4life/plonetheme.unilluminated/blob/master/plonetheme/unilluminated/theme/unilluminated.zip"&gt;my zip file&lt;/a&gt; to work, I suspect I'll get that
issue resolved this week (I don't think I was able to import any zipped
themes, even the ones from p.a.theming tests).&lt;/p&gt;
&lt;div class="section" id="suprise-i-like-it"&gt;
&lt;h2&gt;Suprise! I like it&lt;/h2&gt;
&lt;p&gt;What I am most surprised about is how much I like this approach:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Developers can easily distribute themes in Python packages, and pay a
much smaller &amp;quot;theming tax&amp;quot; with new style Diazo theming.&lt;/li&gt;
&lt;li&gt;They can also optionally choose to distribute Diazo themes as zip
files for easy public consumption (although I can't think of any
good, automated way to publish just the zip files.)&lt;/li&gt;
&lt;li&gt;If I am not mistaken the contents of a zipped theme can be loaded
&lt;a class="reference external" href="https://github.com/aclark4life/plonetheme.unilluminated/blob/master/plonetheme/unilluminated/configure.zcml"&gt;quite elegantly&lt;/a&gt;, without changing their contents, via a &lt;a class="reference external" href="https://github.com/aclark4life/plonetheme.unilluminated/"&gt;Python
package&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, let us now commence the spamming of PyPI and the &lt;a class="reference external" href="http://plone.org/products"&gt;Plone.org
downloads section&lt;/a&gt; with &amp;quot;fun&amp;quot; easy-to-install (read: no buildout) Plone
themes! [2]&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="disclaimer"&gt;
&lt;h2&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;These are my experiences with relatively new Plone technologies. If I've
made a mistake or if your experiences are different, please let me know
in the comments.&lt;/p&gt;
&lt;p&gt;[1] Please forgive gratuitous belated rapture humor.&lt;/p&gt;
&lt;p&gt;[2] Before you get upset over any suggested spamming, I only mean to
suggest that the ability to distribute a theme as a zip file lowers the
bar to Plone adoption tremendously. Personally (and tentatively, since
I'm not even sure if everything is meant to work the way I currently
expect it to), I plan to include a zipped archive of any theme I
distribute as a Python package because it is so easy to do so (or
hopefully will be very soon). But how the community chooses to
capitalize on this new-found ability remains to be seen.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Top 10 reasons &amp;quot;Plone 3.3. Site Admin&amp;quot; book is (still) for you</title><link href="http://aclark.net/blog/2011/05/10/top-10-reasons-quotplone-33-site-adminquot-book-is-still-for-you/" rel="alternate"></link><updated>2011-05-10T13:34:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-05-10:2011/05/10/top-10-reasons-quotplone-33-site-adminquot-book-is-still-for-you/</id><summary type="html">&lt;p&gt;About a year ago, I was frantically trying to finish &lt;a class="reference external" href="http://aclark.net/training"&gt;Plone 3.3 Site
Administration&lt;/a&gt; in time to teach it at Plone Symposium East 2010 (at
Penn State University) as well as publish it. I remember staying up all
night to finish &amp;amp; submit the final drafts then driving 4 hours to Penn
State, then teaching for 8 hours before I was finally able to crash (but
not before consuming a large and delicious cheeseburger and a Yuengling
from the &lt;a class="reference external" href="http://www.pshs.psu.edu/NittanyLionInn/nlhome.asp"&gt;Nittany Lion Inn&lt;/a&gt;room service, yum).&lt;/p&gt;
&lt;p&gt;The class went well and everyone seemed happy with the results (and I am
very grateful to PSU for the opportunity). I remember struggling to get
some Windows users up to speed, so this year I've decided to &amp;quot;require&amp;quot;
students to install Plone before the class (via the &lt;a class="reference external" href="http://plone.org/products/plone/releases/4.0.5"&gt;appropriate
installer for their platform&lt;/a&gt;). Most &amp;quot;site admin-ing&amp;quot; we do will be &amp;quot;ad
hoc&amp;quot; preferably on top of a stand-alone Python installation. But we can
refer to the installer-based Plone as needed (and in fact the
installer-based Plone is all some folks will ever need or want).&lt;/p&gt;
&lt;div class="section" id="the-list"&gt;
&lt;h2&gt;The list&lt;/h2&gt;
&lt;p&gt;Anyway, this post is about this year's class taught from the same
material but updated to account for any changes that have occurred since
the book was first published. Most importantly, it addresses the release
of Plone 4 in the context of the book title &amp;quot;Plone 3.3 Site
Administration&amp;quot;.&lt;/p&gt;
&lt;p&gt;So without further ado, why &amp;quot;Plone 3.3 Site Administration&amp;quot; is (still)
for you:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;strong&gt;The version reference in the title is (mostly) meaningless&lt;/strong&gt;.
&lt;a class="reference external" href="http://www.packtpub.com/books/plone"&gt;PACKT&lt;/a&gt; insist on incorporating a software version number into the
title of their books. I would have called it: &amp;quot;Plone Site
Administration&amp;quot;, or &amp;quot;Buildout for Plone&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The book teaches valuable *techniques*, using Plone 3.3 as an
example&lt;/strong&gt;. Most, if not all of the techniques still apply today (i.e.
w/Plone 4.0.x and Plone 4.1.x). They will likely continue to apply as
long as Plone continues to rely on &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout"&gt;zc.buildout&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plone makes it relatively easy to upgrade&lt;/strong&gt; by providing &lt;a class="reference external" href="http://dist.plone.org/release/4.1b2/versions.cfg"&gt;version
numbers&lt;/a&gt; for all of the packages it requires. In many cases an
upgrade simply involves referring to a newer list of package
versions. In the case of upgrading from Plone 3.3.x to Plone 4.0.x,
the [zope2] section goes away because Zope2 became an egg. (Compare
&lt;a class="reference external" href="http://dist.aclark.net/build/plone/3.3.x/buildout.cfg"&gt;this buildout&lt;/a&gt; with &lt;a class="reference external" href="http://dist.aclark.net/build/plone/4.0.x/buildout.cfg"&gt;this one&lt;/a&gt;.) Also Plone 4 buildouts should be
bootstrapped with Python 2.6 instead of Python 2.4 (as was required
by Plone 3).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python tools &amp;quot;goodness&amp;quot;&lt;/strong&gt;. This book goes to great lengths to
demonstrate how Plone fits &amp;quot;naturally&amp;quot; on top of the Python software
stack. It also includes information about non-Plone-specific
Python-related technologies like &lt;a class="reference external" href="http://packages.python.org/distribute/"&gt;Distribute&lt;/a&gt; and &lt;a class="reference external" href="http://pypi.python.org/pypi/pip"&gt;PIP&lt;/a&gt;. This (in
theory) makes Plone more approachable to &amp;quot;regular&amp;quot; Python folk.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Python buildout&lt;/strong&gt;. One of the most useful things the Plone
community has to offer the Python community at large is the &lt;a class="reference external" href="http://svn.plone.org/svn/collective/buildout/python/"&gt;Python
buildout&lt;/a&gt;. If you do development that requires multiple versions of
Python (e.g. Plone 3.3.x/4.0.x) you could do worse than to rely on
this buildout to provide them (multiple versions) quickly and easily.
The book dances around the subject, but the point is: use it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt;. This book goes to great lengths to demonstrate
the Plone installation process on three popular operating systems:
Mac OS X, Ubuntu Linux, and Windows. The point is to show off how
similar the process is across platforms because Python does all the
hard work, and of course to deal with the cases where it is not
similar (e.g. it's &amp;quot;hard&amp;quot; to compile &lt;a class="reference external" href="http://python.org/download/windows/"&gt;Python on Windows&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add-ons&lt;/strong&gt;! A lot of the value of Plone comes from the ability to
customize it to fit your needs. If that customization has already
been done by some other member of the community, even better. This is
one of the core essences of the Plone community: everyone working
hard to contribute to the available pool of add-ons, and then
&lt;a class="reference external" href="http://plone.org/products"&gt;sharing the results&lt;/a&gt;. This book aims to make you better at
evaluating the myriad of options you may be presented with when you
need to &lt;a class="reference external" href="http://pypi.python.org/pypi"&gt;find and install an add-on&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Upgrades&lt;/strong&gt;! The final chapter of the book holds your hand and walks
you through an upgrade from Plone 3.3.x to Plone 4.0.x. It doesn't
contain anything you can't find at &lt;a class="reference external" href="http://plone.org/upgrade"&gt;http://plone.org/upgrade&lt;/a&gt; (in
fact it contains much less information), but in the context of a book
full of buildout configuration file examples, it should feel more
like a natural step than an intimidating process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;! The book covers how to deal with security patches,
&lt;em&gt;not&lt;/em&gt; in the common case of when a hotfix is released as a Zope 2
Product or Python egg, but in the &lt;a class="reference external" href="http://dist.aclark.net/build/plone/2.1.x/buildout.cfg"&gt;somewhat more obscure case&lt;/a&gt; where
a newer (non-egg) Zope2 release replaces an older one (with a
vulnerability). The modern equivalent would be a Plone release
post-security-hotfix release. Such releases simply contain a newer
KGS (listing package versions that contain the appropriate fixes).
This &amp;quot;old school&amp;quot; example is included to give readers as broad a
perspective as possible, so that they may better handle anything they
may come across in the wild.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;All the boring stuff too&lt;/strong&gt;. This book also walks you through the
remaining &amp;quot;hot&amp;quot; topics not covered yet in this list, all from a heavy
zc.buildout configuration management perspective: site basics (e.g.
customizing navigation), appearance (AKA theming, strictly &amp;quot;old
style&amp;quot; sorry), administration (e.g. mail settings, ldap), deployment
and maintenance (e.g. automating database backups and packing), and
optimization (e.g. load balancing, supervisor, and &lt;a class="reference external" href="http://pypi.python.org/pypi/munin.plone"&gt;munin graphs&lt;/a&gt;!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-training"&gt;
&lt;h2&gt;The training&lt;/h2&gt;
&lt;p&gt;Sound even the &lt;em&gt;slightest&lt;/em&gt; bit interesting? And/or are these things you
&lt;em&gt;need&lt;/em&gt; to know about Plone for your job? If so, then you or your
employees will not want to miss my one day class next week at the &lt;a class="reference external" href="http://weblion.psu.edu/symposium"&gt;Plone
Symposium East 2011&lt;/a&gt;. In case you (or your employees) are interested,
you can sign up here (separate from the symposium):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://aclark.net/training"&gt;http://aclark.net/training&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope to see you there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-service"&gt;
&lt;h2&gt;The service&lt;/h2&gt;
&lt;div class="section" id="baas-buildout-as-a-service"&gt;
&lt;h3&gt;BaaS (Buildout as a Service)&lt;/h3&gt;
&lt;p&gt;(Yes, I am serious)&lt;/p&gt;
&lt;p&gt;And finally for whatever it is worth, many of the lessons learned from
writing the book from the author's perspective ended up here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;dist.aclark.net/build/plone[1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is to say: buildouts are living and breathing things[2]; they are
frequently changing in response to what is going on in the Python
package ecosystem around them (even though their primary goal is to
maintain stability and/or to only change when you want to change). When
a change (like a security fix or configuration change) comes along, the
author pushes changes out to the dist server than deploys the dist
server changes to production.&lt;/p&gt;
&lt;p&gt;[1] DISCLAIMER: Please DO NOT RELY ON this &amp;quot;BaaS example&amp;quot; for anything
important, EVER. It's only here for educational purposes (for now at
least).&lt;/p&gt;
&lt;p&gt;[2] Yeah, I don't get out much :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Plone Conference 2008 (!) is a wrap</title><link href="http://aclark.net/blog/2011/05/03/plone-conference-2008-is-a-wrap/" rel="alternate"></link><updated>2011-05-03T20:00:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-05-03:2011/05/03/plone-conference-2008-is-a-wrap/</id><summary type="html">&lt;p&gt;Embarrassingly, I have yet to finish my obligations to the life-changing
&lt;a class="reference external" href="http://plone.org/2008"&gt;Plone Conference 2008&lt;/a&gt; until NOW: approximately 2 years, 6 months, and
23 days after the end of the post-conference sprint.&lt;/p&gt;
&lt;div class="section" id="the-story"&gt;
&lt;h2&gt;The story&lt;/h2&gt;
&lt;p&gt;We had some trouble with the video company and I had to hunt them down
to get copies of missing talks. We still didn't get everything, but this
is the last of what we did get. I got these missing DVDs about a year
ago, and since then I've been trying to find the time to upload them to
&lt;a class="reference external" href="http://zpugdc.blip.tv/"&gt;blip.tv&lt;/a&gt;. Invariably, I got stuck on some aspect of the conversion
process so I decided to &amp;quot;give up&amp;quot; and just upload the ripped copies to
&lt;a class="reference external" href="http://dist.plone.org:5021/media/video/conference/2008/PloneConference2008/"&gt;dist.plone.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As such, if anyone in the community has the time and expertise to
convert these to Quicktime format, I would greatly appreciate it, and I
would be happy to upload the results to blip.tv (this is how we did it
the first time if I recall correctly.) Until then, they have at least
reached their final resting place, and folks can get access to them if
they are interested, here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-2/33-weblion-bringing-open-sources-practices-to-the-educational-enterprise.m4v"&gt;WebLion: Bringing Open Sources Practices to the Educational
Enterprise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-3/43-introduction-to-z3c.form.m4v"&gt;Introduction to z3c.form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-2/26-the-big-green-button-turning-plone-into-a-dynamic-site-factory.m4v"&gt;The Big Green Button: Turning Plone into a dynamic site factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-3/52-collective-good-best-practices-for-creating-releasing-and-maintaining-add-on-products-for-plone.m4v"&gt;Collective Good: Best Practices for Creating, Releasing and
Maintaining Add-on Products for Plone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-3/42-why-through-the-web-development-isnt.m4v"&gt;Why Through-The-Web Development Isn't&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-3/46-relational-database-applications-with-plone-and-sqlalchemy.m4v"&gt;Relational database applications with Plone and SQLAlchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dist.plone.org/media/video/conference/2008/PloneConference2008/day-3/41-reaching-deployment-nirvana-using-buildout.m4v"&gt;Reaching Deployment Nirvana Using Buildout&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remarkably, some of these newly added videos are &lt;em&gt;still&lt;/em&gt; relevant
&lt;strong&gt;and&lt;/strong&gt; enjoyable to watch, as are many of the ones already available in
the easily browsable &lt;a class="reference external" href="http://plone.org/events/conferences/2008-washington-dc/agenda"&gt;archive&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My sincerest apologies to the community and especially to those whose
videos were amongst this group for the delay, you should not have had to
wait 2 days let alone over 2 years!&lt;/p&gt;
&lt;p&gt;Thus, I now declare &lt;a class="reference external" href="http://plone.org/2008"&gt;Plone Conference 2008&lt;/a&gt; to be wrapped. Thanks to
Sean Kelly for the &lt;a class="reference external" href="http://dev.plone.org/plone/ticket/11762"&gt;help transferring the video&lt;/a&gt; to plone.org.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>collective.transmogrifier without Plone?</title><link href="http://aclark.net/blog/2011/04/15/collectivetransmogrifier-without-plone/" rel="alternate"></link><updated>2011-04-15T20:31:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-04-15:2011/04/15/collectivetransmogrifier-without-plone/</id><summary type="html">&lt;p&gt;Yes!&lt;/p&gt;
&lt;p&gt;Since I began drinking the &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.transmogrifier"&gt;collective.transmogrifier&lt;/a&gt; Kool Aid a few months back, I've gotten quite excited about the possibility of being able to use it outside Plone, i.e. like &amp;quot;regular&amp;quot; Python people would do.&lt;/p&gt;
&lt;p&gt;It just so happens I have a current project that requires me to import content to Plone 2.5; it took me a while to realize I could just setup a Plone 4 instance, run transmogrifier in it, and import content from it (i.e. from the file system) to Plone 2.5 over XML-RPC. But something about having to include Plone 4 in that scenario rubbed me the wrong way: Plone 4 is not needed, it's just executing the pipeline.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(I also don't like the idea of having to create a Python package and a GenericSetup profile in order to facilitate a migration.)&lt;/em&gt;&lt;/p&gt;
&lt;div class="section" id="goals"&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;p&gt;So in addition to working on getting &lt;a class="reference external" href="https://github.com/collective/mr.migrator"&gt;mr.migrator&lt;/a&gt; to be able to configure and execute pipelines (currently only GenericSetup profiles and Python code are supported), I thought I'd experiment with removing the CMFCore dependency.&lt;/p&gt;
&lt;p&gt;The initial, &lt;em&gt;experimental&lt;/em&gt; results can be seen in action here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/aclark4life/mr_migrator_demo"&gt;https://github.com/aclark4life/mr_migrator_demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the &lt;a class="reference external" href="https://github.com/aclark4life/mr_migrator_demo/raw/master/README.txt"&gt;README&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Introduction
============

This demo is:* Proof of concept for mr.migrator: A tool that provides the ability to
register and execute collective.transmogrifier pipelines without creating a
Python package. It's Miller Time™.* Also proof of concept for collective.transmogrifier with the CMFCore
dependency removed (and a zope.component dependency added in its place).
It's Scotch time™.

Explanation
-----------
In order to work, it currently relies on:* https://svn.plone.org/svn/collective/collective.transmogrifier/branches/aclark-mr-migrator-compat
* https://svn.plone.org/svn/collective/transmogrify.filesystem/branches/aclark-mr-migrator-compat
* git&amp;#64;github.com:aclark4life/transmogrify.ploneremote.git These are, respectively:* A branch of c.transmogrifier with a setuptools entry point plugin system
added, and the CMFCore dependencies removed (gracefully, I hope).* A branch of t.filesystem with the collective.transmogrifier entry point
specified (and some CMFCore dependencies removed).* A fork of t.ploneremote with the collective.transmogrifier entry point
specified (and some CMFCore dependencies remove).
…
&lt;/pre&gt;
&lt;p&gt;It's a work in progress, but it actually imports content. You may try it locally, as explained in the rest of the &lt;a class="reference external" href="https://github.com/aclark4life/mr_migrator_demo/raw/master/README.txt"&gt;README&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Installation
------------
You can try out this demo::

    $ git clone git&amp;#64;github.com:aclark4life/mr_migrator_demo.git
    $ cd mr_migrator_demo
    $ python bootstrap.py
    $ bin/buildout

Elsewhere, setup a Plone site listenining on localhost:8080 with a Plone site
object called &amp;quot;Plone&amp;quot; and then:

    $ bin/mr.migrator

You should end up with content in Plone that looks like this:
…
&lt;/pre&gt;
&lt;p&gt;I hope this helps move the state of the art forward a bit; it would be great to share this technology with the rest of the Python world. And in case you are curious about the changes, you can read the revision log here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dev.plone.org/collective/log/collective.transmogrifier/branches/aclark-mr-migrator-compat"&gt;http://dev.plone.org/collective/log/collective.transmogrifier/branches/aclark-mr-migrator-compat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Start with the following revision, and click through the next 8 commits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dev.plone.org/collective/changeset/237628/collective.transmogrifier/branches/aclark-mr-migrator-compat"&gt;http://dev.plone.org/collective/changeset/237628/collective.transmogrifier/branches/aclark-mr-migrator-compat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comments welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="credits"&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks Martijn Pieters for creating collective.transmogrifier; thanks Martin Aspeli and Dylan Jay for their blueprints; and thanks Dylan Jay for bringing transmogrifier to the masses via mr.migrator.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Introducing charm; death to charm!</title><link href="http://aclark.net/blog/2011/03/29/introducing-charm-death-to-charm/" rel="alternate"></link><updated>2011-03-29T17:20:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-03-29:2011/03/29/introducing-charm-death-to-charm/</id><summary type="html">&lt;p&gt;A long time ago (several years ago, or more) one of my first Plone jobs was importing content from the file system (put there by another CMS) to a client's Plone 2.5 website (see: &lt;a class="reference external" href="http://blip.tv/file/761624/"&gt;http://blip.tv/file/761624/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Some time later (last year or so) the client decided they wanted to scoop up even more content from the file system (we only grabbed the last few years prior to launch!)&lt;/p&gt;
&lt;p&gt;Unfortunately, the old migration code was truly a horror. So I've been having a hard time making myself run it again (I was just learning Python at the time.)&lt;/p&gt;
&lt;div class="section" id="about-charm"&gt;
&lt;h2&gt;About charm&lt;/h2&gt;
&lt;p&gt;This is where &lt;em&gt;charm&lt;/em&gt; comes in; formerly &lt;a class="reference external" href="http://pypi.python.org/pypi/mr.importer"&gt;mr.importer&lt;/a&gt;, formerly &lt;a class="reference external" href="http://pypi.python.org/pypi/parse2plone"&gt;parse2plone&lt;/a&gt;. Get it? The third time is a… I had the &amp;quot;big idea&amp;quot; to rewrite, then open source the code I wrote for the client.  Unfortunately, the rewrite became a horror too.&lt;/p&gt;
&lt;p&gt;First, it was not well received amongst the more reusable approaches based on &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.transmogrifier"&gt;collective.transmogrifier&lt;/a&gt;, and rightfully so. While it was unpleasant to be told I was heading in the wrong direction, it was &lt;strong&gt;*even more*&lt;/strong&gt; unpleasant to find out &amp;quot;they&amp;quot; were right. :-)&lt;/p&gt;
&lt;p&gt;Second, as &amp;quot;they&amp;quot; predicted, I got to the point where I couldn't read or maintain it any more (and I &lt;strong&gt;*just*&lt;/strong&gt; wrote it).&lt;/p&gt;
&lt;p&gt;So, I decided to revert to a version which had much fewer configuration options, because making it configurable became a huge distraction. What's left is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The code is &amp;quot;readable&amp;quot;, for some value of readable (PEP8/pyflakes compliant) and it's in a single module: &lt;a class="reference external" href="https://github.com/collective/charm/blob/master/charm.py"&gt;charm.py&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The concept is &amp;quot;simple&amp;quot;, for some value of simple; it's a recipe that creates a script for you, that you run via:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
$ bin/plone run bin/charm /path/to/files
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The results are &amp;quot;impressive&amp;quot; for some value of impressive; it imports content from the file system into Plone:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
2011-03-21 11:51:20,302 - charm - INFO - Imported 19 folders,
1 images, 20 pages, and 2 files.
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It won't crash (!), for some value of &amp;quot;keeps going&amp;quot;; it tries to do try/except on operations more likely to fail&amp;nbsp; e.g. create_parts (via --ignore-errors). This aims to ensure you at least get some content in your site post-execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
$ bin/plone run bin/charm html --ignore-errors
...
2011-03-22 07:24:32,821 - charm - INFO - creating folder 'id' inside
                          parent folder '/Plone'
2011-03-22 07:24:32,822 - charm - INFO - Keep going! Ignoring error
                          'The id &amp;quot;id&amp;quot; is invalid - it is already in use.'
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It has some tests, 34% coverage at the time of this writing:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
619&amp;nbsp;&amp;nbsp;&amp;nbsp; 34%&amp;nbsp;&amp;nbsp; charm&amp;nbsp;&amp;nbsp; (/Users/aclark/Developer/charm/charm.py)
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Has &amp;quot;cool&amp;quot; features, for some value of cool. Most notably, the &amp;quot;collapse&amp;quot; feature (AKA &amp;quot;slugify&amp;quot;):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
$ bin/plone run bin/charm html --collapse
...
2011-03-22 07:13:28,673 - charm - INFO - path 'html/2011/01/01/test-collapse',
                          has subdirs '', and files 'index.html'
...
2011-03-22 07:13:28,693 - charm - INFO - object 'test-collapse-20110101.html'
                          does not exist inside '/Plone'
2011-03-22 07:13:28,693 - charm - INFO - creating page 'test-collapse-20110101.html'
                          inside parent folder '/Plone'
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;And the &amp;quot;publish&amp;quot; feature to optionally publish content after creation:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
$ bin/plone run bin/charm html --collapse --publish
...
2011-03-22 07:13:29,008 - charm - INFO - publishing page 'test-collapse-20110101.html'
&lt;/pre&gt;
&lt;p&gt;And a few more things, but as you can see we are quickly approaching the point where more functionality does not necessarily mean better software. It's hard to build something complex AND make it easy to use, which is why I am moving on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="charming-demo"&gt;
&lt;h2&gt;Charming demo&lt;/h2&gt;
&lt;p&gt;In writing this blog entry and releasing charm 1.0b4 I wanted to make sure to demonstrate how it works, so here is a screencast. This is how I envision content importing should work in Plone (or at least this is how I envision a &amp;quot;simple&amp;quot; way it could work.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="after-charm"&gt;
&lt;h2&gt;After charm&lt;/h2&gt;
&lt;p&gt;After I began writing &lt;em&gt;charm&lt;/em&gt;, I began to collaborate with Dylan Jay on funnelweb and beyond (e.g. &lt;a class="reference external" href="https://github.com/collective/mr.migrator"&gt;mr.migrator&lt;/a&gt;). And I am now more determined than ever to write reusable code.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Cioppino Sprint Report</title><link href="http://aclark.net/blog/2011/02/16/cioppino-sprint-report/" rel="alternate"></link><updated>2011-02-16T09:04:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-02-16:2011/02/16/cioppino-sprint-report/</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="http://coactivate.org/projects/snow-sprint-west-2011/project-home"&gt;Cioppino Sprint&lt;/a&gt; was recently held in Bodega Bay, CA. It was a &lt;a class="reference external" href="http://twitpic.com/3y21yk"&gt;beautiful location&lt;/a&gt; for a gathering of awesome Plone folks; and much was accomplished. Unfortunately on the second morning of the sprint, we were all deeply saddened to hear about the passing of Dorneles Treméa.&lt;/p&gt;
&lt;img alt="images/bodega.jpg" src="images/bodega.jpg" /&gt;
&lt;div class="section" id="the-passing-of-dorneles-tremea"&gt;
&lt;h2&gt;The passing of Dorneles Treméa&lt;/h2&gt;
&lt;p&gt;I didn't know Dorneles very well, but he was certainly someone I idolized during my initial Plone fascination days (e.g. &amp;quot;Who are all these cool people with such cool names!&amp;quot;). And after digging through my old emails, I now remember we had several pleasant exchanges over the years.&lt;/p&gt;
&lt;div class="section" id="memories"&gt;
&lt;h3&gt;Memories&lt;/h3&gt;
&lt;p&gt;In particular, I have this memory of Dorneles and Alan Runyan sitting together at the Plone Conference 2008 sprint, smiling and working on their laptops. Before his death, it was just a random image that would occasionally pop into my head. Now, it's something I'll remember him by.&lt;/p&gt;
&lt;p&gt;We also corresponded briefly about his &lt;a class="reference external" href="http://pypi.python.org/pypi/Products.ExternalStorage"&gt;ExternalStorage&lt;/a&gt; add-on for Plone, around the time we upgraded plone.org from Plone 2.5 to Plone 3.0 (circa 2008), as well as traded emails about his invitation to attend Plone Conference 2008 in DC (for his visa application).&lt;/p&gt;
&lt;p&gt;The funniest thing he ever said to me was when I was making the rounds asking for donations for Plone Conference 2008. He replied,&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Are you aware that you're talking with a 3rd world citizen?&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;I'm not sure if I offended him, or what. But it struck me funny at the time (and he went on to joke about how donations usually flow in the other direction, ending with his tongue stuck out i.e. &amp;quot;:-p&amp;quot;) :-). It also reminded me of one the things I love most about Plone: the opportunity (I may never get otherwise) to correspond/collaborate with cool, passionate people all over the world.&lt;/p&gt;
&lt;p&gt;To me, Dorneles was one of the living embodiments of the &lt;em&gt;coolness&lt;/em&gt; and &lt;em&gt;worldliness&lt;/em&gt; of the Plone project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wishes"&gt;
&lt;h3&gt;Wishes&lt;/h3&gt;
&lt;p&gt;My condolences and best wishes to his family, I hope you know how much he meant to so many folks in the Plone and Python communities. And just how many lives he touched with his work. And goodbye Dorneles; though I knew you very little, I will miss you very much. May your legacy live on, long in to the future.&lt;/p&gt;
&lt;p&gt;Incidentally, if you would like to give money to help support Dorneles' family in the aftermath of this tragedy, you can do so here: &lt;a class="reference external" href="http://associacao.python.org.br/doacoes-familia-dorneles"&gt;http://associacao.python.org.br/doacoes-familia-dorneles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, the sprint (or at least my part of it) was awesome! Amidst the very sad and shocking news of Dorneles' passing, we all kept busy with our work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sprint-report"&gt;
&lt;h2&gt;Sprint report&lt;/h2&gt;
&lt;p&gt;It's a bit overwhelming to try and capture everything that happened (and I was only there for two days!); hopefully this report will be useful. The focus of this sprint was evaluator approachability (i.e. making Plone look good to prospective new users).&lt;/p&gt;
&lt;div class="section" id="day-1-and-day-2"&gt;
&lt;h3&gt;Day 1 and Day 2&lt;/h3&gt;
&lt;p&gt;Steve McMahon (SteveM) was our host. Alex Limi (limi) provided general direction regarding strategies to improve plone.net, documentation, and end user support. But most importantly, he pointed out that the first stop for any prospective new user is the website, so it's important that it look good.&lt;/p&gt;
&lt;p&gt;David Glick (davisagli) and Elizabeth Leddy (eleddy) wasted no time in diving in to the 150 or so open tickets in the (now defunct) &lt;a class="reference external" href="http://dev.plone.org/plone.org"&gt;plone.org issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I (aclark) quickly fell into the role of the &amp;quot;deployment witch&amp;quot; (a role I enjoy), and suggested people simply push the &lt;strong&gt;ACLARK&lt;/strong&gt; button (née Staples Easy Button) whenever they needed their code deployed to plone.org.&lt;/p&gt;
&lt;p&gt;We closed a good number of tickets this way.&lt;/p&gt;
&lt;p&gt;Additionally:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ross Patterson (zenwryly) grabbed a hold of the &lt;a class="reference external" href="http://dev.plone.org/plone/browser/plone.org/Products.PloneOrg/trunk"&gt;PloneOrg add-on&lt;/a&gt; (the add-on that powers plone.org) and added tests (among other things).&lt;/li&gt;
&lt;li&gt;Tyler Randles (hennaheto) and Trish Ang (feeeeesh) fixed a number of CSS annoyances, which were &lt;a class="reference external" href="http://dev.plone.org/plone/changeset/47345/"&gt;committed by SteveM&lt;/a&gt; (while Tyler &amp;amp; Trish pondered core commit access). My favorite of which is the now-blissfully-aligned username and password fields of the login_form:&lt;/li&gt;
&lt;li&gt;zenwryly fixed the &lt;a class="reference external" href="http://plone.org/team"&gt;team section&lt;/a&gt; of plone.org.&lt;/li&gt;
&lt;li&gt;davisagli completed the last remaining task to fix &lt;a class="reference external" href="http://dev.plone.org/collective/browser/Products.PloneSoftwareCenter/trunk"&gt;PloneSoftwareCenter&lt;/a&gt; permissions on plone.org (the sharing tab finally works now!)&lt;/li&gt;
&lt;li&gt;limi &lt;a class="reference external" href="http://dev.plone.org/plone/changeset/47428/"&gt;fixed a CSS sprite issue&lt;/a&gt; on plone.org (involving https, I think).&lt;/li&gt;
&lt;li&gt;SteveM tackled &lt;a class="reference external" href="http://dev.plone.org/plone/changeset/47507/"&gt;SSL certificate issues&lt;/a&gt; on plone.org.&lt;/li&gt;
&lt;li&gt;aclark took a stab at plone.net by converting the old style add-on Product that powers it to a &lt;a class="reference external" href="http://dev.plone.org/collective/browser/Products.PloneServicesCenter/trunk"&gt;new style Egg package&lt;/a&gt;. zenwryly then &lt;a class="reference external" href="http://rpatterson.net/blog/cioppino-sprint"&gt;took that ball and ran with it&lt;/a&gt;, added tests and otherwise prepared for the future (i.e. Plone 4 compat).&lt;/li&gt;
&lt;li&gt;Jon Stahl (remotely) added a &lt;a class="reference external" href="http://plone.org/follow"&gt;&amp;quot;follow&amp;quot; section&lt;/a&gt; to plone.org.&lt;/li&gt;
&lt;li&gt;hennaheto and feeeeesh produced this amazing (but &lt;a class="reference external" href="http://plone.org/foundation/logo/logoguidelines.pdf/view"&gt;possibly non-compliant&lt;/a&gt;) sprint logo&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="day-3-day-4-and-day-5"&gt;
&lt;h3&gt;Day 3, Day 4 and Day 5&lt;/h3&gt;
&lt;p&gt;Unfortunately, I had to leave on Friday morning but these are some of the things that happened after I left. Most importantly, Tom Kapanka (spanktar) arrived Thursday night and Bill Deegan arrived on Friday. And then:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;zenwryly updated PloneServicesCenter to Plone 4.&lt;/li&gt;
&lt;li&gt;limi and zenwryly replaced images of &amp;quot;showcased sites&amp;quot; in PloneServicesCenter with a web screenshot service to eliminate the need for storing images. (This move is still in progress, and various folks are working on issues with the web screenshot service. Please be patient!)&lt;/li&gt;
&lt;li&gt;zenwryly and limi moved content from plone.net to plone.org.&lt;/li&gt;
&lt;li&gt;aclark (remotely) pulled the DNS trigger on plone.net (re-configured A records for plone.net, to resolve to the same IP as plone.org)&lt;/li&gt;
&lt;li&gt;eleddy and spanktar created and released &lt;a class="reference external" href="http://pypi.python.org/pypi/cioppino.twothumbs/1"&gt;cioppino.twothumbs&lt;/a&gt; to facilitate &amp;quot;thumb style&amp;quot; (up/down) ratings in PloneSoftwareCenter.&lt;/li&gt;
&lt;li&gt;davisagli made it so Plone can start without PIL (via fixes to PlonePAS and plone.app.blob). And these fixes even made it in to Plone 4.1a3! To be clear, Plone still requires PIL to render images but it will start if it's missing.&lt;/li&gt;
&lt;li&gt;davisagli and eleddy refactored the PloneOrg buildout&lt;/li&gt;
&lt;li&gt;Bill and limi moved the remaining old Plone installers from Sourceforge to &lt;a class="reference external" href="http://dist.plone.org/archive/"&gt;dist.plone.org&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="post-sprint-sprinting"&gt;
&lt;h3&gt;Post-sprint sprinting&lt;/h3&gt;
&lt;p&gt;One of the great things about a sprint is that it really focuses
attendees on accomplishing their tasks, long after they have left the
event. To that end:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;aclark triaged the remaining tickets in the plone.org tracker, and did a final tally of closed ticket rankings: davisagli (55), aclark (32), eleddy (28), limi (7). davisagli wins! :-)&lt;/li&gt;
&lt;li&gt;aclark got inspired to begin uploading the half dozen or so missing videos from various Plone Conference 2008 talks (which were finally sent to him by the video company circa last year). Look for these to &lt;a class="reference external" href="http://plone.org/2008"&gt;land on plone.org&lt;/a&gt; soon.&lt;/li&gt;
&lt;li&gt;eleddy continued to develop the “two thumbs” feature.&lt;/li&gt;
&lt;li&gt;eleddy and aclark deployed the &amp;quot;two thumbs&amp;quot; feature to plone.org.  (This feature may not work as expected yet, eleddy is resolving issues.) Check it out:&lt;/li&gt;
&lt;li&gt;limi continued to improve the documentation/ and support/ sections of plone.org. Here are some screenshots of how the new sections will look once they launch:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it! Just so you don't worry the sprinters worked too hard, you can rest assured everyone was in good hands with zenwryly and his travelling-bar.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you enjoyed reading this report and/or appreciate all the fun-but-hard work that goes in to attending a sprint, please consider&lt;/em&gt; &lt;a class="reference external" href="http://blog.aclark.net/2011/01/21/help-alex-clark-help-plone/"&gt;donating to my travel fund&lt;/a&gt;. &lt;em&gt;Only three days left, and I'm still a few dollars short!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>In Defense of PyPI</title><link href="http://aclark.net/blog/2011/01/31/in-defense-of-pypi/" rel="alternate"></link><updated>2011-01-31T09:19:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-01-31:2011/01/31/in-defense-of-pypi/</id><summary type="html">&lt;p&gt;Everyone on the &lt;em&gt;Python Planet&lt;/em&gt; is probably already familiar with Peter
Fein's recent article &lt;a class="reference external" href="http://blog.wearpants.org/elitism-and-the-importance-of-pypi"&gt;about PyPI use (or lack thereof).&lt;/a&gt; But in case
not, particularly striking was the number of folks who joined the &amp;quot;PyPI
bashing&amp;quot; in the comments. In fact, it has inspired me to write this post
&amp;quot;in defense of PyPI&amp;quot;. I would like to offer the Python community a
summary of what I think are the general criticisms, along with my
responses as a &amp;quot;sysadmin / developer type&amp;quot;.&lt;/p&gt;
&lt;p&gt;First let me say this: I love PyPI! And I agree with Peter, if your
package isn't on PyPI it&amp;nbsp; &amp;quot;doesn't exist&amp;quot;. I wouldn't put it quite like
that; but I would say it's fairly important if you are publishing open
source Python code, to consider uploading it to the Python Package
Index.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;div class="section" id="because-everybody-wins"&gt;
&lt;h2&gt;Because Everybody Wins&lt;/h2&gt;
&lt;p&gt;Believe it or not, the general Python community is interested in seeing
your code. Whether to use it for an example, or to avoid reinventing the
wheel, or whatever the reason; we'd like a chance to see your code. But
if you don't publish it to PyPI, we may never get that chance!&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;For better or worse, PyPI is the canonical place on Earth for Python
packages. It's the CPAN of Python. I understand that not everyone is
100% comfortable with this, but that doesn't make it any less true. If
you accept that &amp;quot;open source is good&amp;quot;, and that &amp;quot;Python rules&amp;quot;, then you
simply must take this next leap of faith: &amp;quot;PyPI is &lt;em&gt;the&lt;/em&gt; place for
Python packages&amp;quot;.&lt;/p&gt;
&lt;p&gt;[waves hand]&lt;/p&gt;
&lt;p&gt;Moving on, why else should you consider uploading your packages to PyPI?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="because-it-is-the-right-thing-to-do"&gt;
&lt;h2&gt;Because It Is The &amp;quot;Right&amp;quot; Thing To Do&lt;/h2&gt;
&lt;p&gt;Another thing that struck me is the number of folks who (appear to)
confuse &amp;quot;version control&amp;quot; with &amp;quot;distribution&amp;quot;. If I'm not mistaken,
Launchpad, Github, and Bitbucket are primarily designed for Bazaar, Git,
and Mercurial hosting respectively. These sites can host your
distribution tarballs, but they certainly weren't &lt;em&gt;designed and built&lt;/em&gt;
to do so. Rather, they were designed and built to host your source code.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;In some cases, a project may wish to host it's own &lt;a class="reference external" href="http://dist.plone.org/"&gt;distribution
server&lt;/a&gt;. Whether it be for redundancy (although PyPI has begun to
tackle this) or &amp;quot;branding&amp;quot; or other reasons, I would argue this is the
preferred way of handling it: &lt;em&gt;in addition to uploading to PyPI, not in
place of it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="because-it-is-not-that-hard"&gt;
&lt;h2&gt;Because It Is Not That Hard&lt;/h2&gt;
&lt;p&gt;Ahem… we get it. The situation with easy_install is &amp;quot;less than ideal&amp;quot;.
But this is something to be fixed, not avoided. If you are receiving too
many support requests, may I suggest &lt;a class="reference external" href="http://blog.jazkarta.com/2010/05/15/installing-plone-without-buildout/#comment-162"&gt;simply telling people not to use
easy_install&lt;/a&gt;. Or, if the problem is proper packaging, learn how to
&lt;a class="reference external" href="http://groups.google.com/group/pylons-devel/msg/abfe9e7a43f62594"&gt;test your packages&lt;/a&gt; before uploading them. Due to the large number of
screwed up releases I've made, I've come to rely on a&lt;a class="reference external" href="http://pypi.python.org/pypi/Products.PloneSoftwareCenter"&gt;local PyPI&lt;/a&gt; and
a virtualenv to test installations. Others use &lt;a class="reference external" href="http://groups.google.com/group/pylons-devel/msg/696c69843eecd026"&gt;even simpler methods&lt;/a&gt;.
And with tools like &lt;a class="reference external" href="http://pypi.python.org/pypi/jarn.mkrelease"&gt;mkrelease,&lt;/a&gt; it's easy to upload your package to
multiple PyPI locations with just a single command (although
leaping-tall-buildings-in-a single-bound is not yet supported.)&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;The point is, please consider helping the community fix the problem
rather than simply avoiding it. There are folks &lt;a class="reference external" href="http://wiki.python.org/moin/Distutils/SprintParis"&gt;actively trying to
improve the situation&lt;/a&gt; right now.&lt;/p&gt;
&lt;p&gt;Let's see, what else?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="because-it-does-not-have-to-be-perfect"&gt;
&lt;h2&gt;Because It Does Not Have To Be Perfect&lt;/h2&gt;
&lt;p&gt;Over the years I've seen various and sundry criticisms of the PyPI user
interface. Fine. I have not looked into the current development process,
but I assume the author/maintainers would be open to some constructive
criticism and/or development assistance.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;It doesn't have to be Github-sexy to be useful. If you would like to
report a bug or feature request, do it &lt;a class="reference external" href="http://sourceforge.net/tracker/?group_id=66150"&gt;here&lt;/a&gt; (at least, I think that
is the right place.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this convinces at least some folks to consider uploading their
packages to PyPI. If it doesn't, please let me know why in the comments.&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;&lt;em&gt;Did you enjoy reading this article? If so, please consider `helping me
help Plone`_.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category><category term="Python"></category></entry><entry><title>Hostout rules</title><link href="http://aclark.net/blog/2011/01/26/hostout-rules/" rel="alternate"></link><updated>2011-01-26T15:17:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-01-26:2011/01/26/hostout-rules/</id><summary type="html">&lt;p&gt;&lt;em&gt;As in &amp;quot;dominates&amp;quot;, not a &amp;quot;list of rules&amp;quot; :-)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I spent a long time avoiding &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.hostout"&gt;collective.hostout&lt;/a&gt; for reasons I will
call &amp;quot;technical stylistic differences&amp;quot; with the author Dylan Jay.&lt;/p&gt;
&lt;p&gt;But then I grew up (and in cases of Plone growth like this, I usually
end up crediting the probably-much-younger-than-me-in-years,
but-certainly-much-more-possessive-of-sage-like-wisdom-than-me-Martin-Aspeli;
and this time is certainly no exception. So thanks Martin!)&lt;/p&gt;
&lt;p&gt;As it turns out, Hostout (as I like to call it now, because we are on a
first name basis) is awesome! Let me break down the awesomeness for you.&lt;/p&gt;
&lt;div class="section" id="buildout"&gt;
&lt;h2&gt;Buildout&lt;/h2&gt;
&lt;p&gt;It starts with Buildout. I won't bore you with the details of why
Buildout is awesome, but I will mention one key feature:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;INI-style configuration, y'all.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes you just want to specify something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[foo]
bar = baz
&lt;/pre&gt;
&lt;p&gt;and be done. I am not making this up folks. There is something about
INI-style configuration that transcends time and space, and reaches
across partisan-aisles to bring folks together in a &amp;quot;let's just get this
done&amp;quot; sort of way. Of course not everyone likes them, but if you are a
technical person and don't like them, I guarantee you at least
understand them and can see why they might be appropriate in some cases
over another technology.&lt;/p&gt;
&lt;p&gt;Anyway, back to the awesomeness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fabric"&gt;
&lt;h2&gt;Fabric&lt;/h2&gt;
&lt;p&gt;Fabric is awesome! I won't bore you with the details of why Fabric is
awesome. But I will mention one key feature:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;SSH, people. SSH.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes you just want to type:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ fab -H foo.com bar
&lt;/pre&gt;
&lt;p&gt;and be done. Fabric lets you execute the Python code you wrote in a
function called &amp;quot;bar&amp;quot;, inside a (local) file called fabfile.py, on a
(remote) host called foo.com. All with the touch of a button, so to
speak. That is to say, you create a local fabfile.py file, and Fabric
runs the code remotely for you on any number of hosts you give it.
Brilliant.&lt;/p&gt;
&lt;p&gt;Now, what could be better than these two technologies? These two
technologies &lt;em&gt;together&lt;/em&gt;, that's what. (See where I am going with this?)
And what could be better than joining these two technologies? Joining
them with &lt;em&gt;absolutely no effort required on your part whatsoever&lt;/em&gt;,
that's what.&lt;/p&gt;
&lt;p&gt;I have a long history of touting software that makes my job (and life)
easier, and Hostout fits right in with that tradition. I'm just sorry it
took me this long to try it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hostout"&gt;
&lt;h2&gt;Hostout&lt;/h2&gt;
&lt;p&gt;As compelling as it is to write &amp;quot;pure Python&amp;quot; in fab files, and it is,
sometimes you just want to be done. And Hostout helps you get there. I
will explain in a minute, but first a slight detour.&lt;/p&gt;
&lt;div class="section" id="back-story"&gt;
&lt;h3&gt;Back story&lt;/h3&gt;
&lt;p&gt;I recently blogged about the relaunch of this website &lt;a class="reference external" href="http://blog.aclark.net/2011/01/19/new-website-for-2011/"&gt;here&lt;/a&gt;. Shortly
after the launch, I realized I needed a quick and easy way to deploy my
staging site to production. I pitched the idea of a utility called
&amp;quot;mr.pusher&amp;quot; to accomplish this task to Dylan, with the caveat that I was
interested in making it work with Hostout.&lt;/p&gt;
&lt;p&gt;As it turns out, between Hostout and a recipe I created years ago called
&lt;a class="reference external" href="http://pypi.python.org/pypi/collective.recipe.rsync"&gt;collective.recipe.rsync&lt;/a&gt;, &amp;quot;mr.pusher&amp;quot; almost already existed. Now back
to the story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fabric-integration-made-easy"&gt;
&lt;h3&gt;Fabric integration made easy&lt;/h3&gt;
&lt;p&gt;Since I knew I wanted to be able to execute a &amp;quot;push&amp;quot; command remotely, I
figured I would finally get acclimated with Hostout.&lt;/p&gt;
&lt;p&gt;After a small wrestling match in my head with the docs, I came up with
&lt;a class="reference external" href="https://github.com/aclark4life/aclark_net_website/blob/master/buildout.cfg#L64"&gt;this&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Hostout makes Fabric integration easy
[staging]
recipe = collective.hostout
host = aclark.net
path = /srv/staging[production]
recipe = collective.hostout
host = aclark.net
path = /srv/aclark_net_website
&lt;/pre&gt;
&lt;p&gt;At this point (after running buildout) I was able to perform such great
feats of remote administration (on my already-deployed-sans-hostout
sites) as:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/hostout staging run git pull
$ bin/hostout staging run bin/buildout -c staging.cfg
&lt;/pre&gt;
&lt;p&gt;Armed with this ability, I added the following to my &lt;a class="reference external" href="https://github.com/aclark4life/aclark_net_website/blob/master/staging.cfg"&gt;staging.cfg:&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Create scripts to deploy staging data to production.
# Be VERY careful with this. You could easily overwrite your
# live production data if you either forget to use the script
# option, or accidentally run the bin/rsync-filestorage-to-production
# script without stopping the production site first.
[filestorage-to-production]
recipe = collective.recipe.rsync
source = var/filestorage/Data.fs
target = ../aclark_net_website/var/filestorage/Data.fs
script = true[blobstorage-to-production]
recipe = collective.recipe.rsync
source = var/blobstorage/
target = ../aclark_net_website/var/blobstorage/
script = true
&lt;/pre&gt;
&lt;p&gt;The result was two scripts I could use to &amp;quot;push&amp;quot; staging to production,
but only after stopping the production site first:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/hostout production run bin/supervisorctl shutdown
$ bin/hostout staging run bin/rsync-filestorage-to-production
$ bin/hostout staging run bin/rsync-blobstorage-to-production
$ bin/hostout production run bin/supervisord
&lt;/pre&gt;
&lt;p&gt;And we're deployed! This technique is particularly elegant when used in
combination with a&lt;a class="reference external" href="https://github.com/aclark4life/aclark_net_website/blob/master/apache.conf"&gt;custom 503&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I really like this setup, and I really appreciate what Hostout gets me
&amp;quot;for free&amp;quot;; I didn't have to create a fabfile.py, I just configured my
staging and production host parameters in buildout.cfg and off I went.&lt;/p&gt;
&lt;p&gt;Of course, there is always room for improvement. The next most logical
step for me would be to add cloud integration. If I could provision a
new Rackspace cloud server via buildout, and then host-it-out, I think
the future will have arrived. And since that is exactly what
&lt;a class="reference external" href="http://pypi.python.org/pypi/hostout.cloud"&gt;hostout.cloud&lt;/a&gt; appears to do, welcome to the future!&lt;/p&gt;
&lt;p&gt;Alex Clark (January 2011)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Did you enjoy reading this article? Please consider `helping me help
Plone in February 2011`_.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>You should buy &amp;quot;Plone 3 for Education&amp;quot; right now</title><link href="http://aclark.net/blog/2011/01/25/you-should-buy-quotplone-3-for-educationquot-right-now/" rel="alternate"></link><updated>2011-01-25T13:11:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-01-25:2011/01/25/you-should-buy-quotplone-3-for-educationquot-right-now/</id><summary type="html">&lt;p&gt;&lt;em&gt;With what must be the fifth or sixth round of apologies to both Erik Rose and PACKT publishing for the delay (very sorry guys), here is my review! Better late than never.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I get bored with the same ol' blog entry titles:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;A review of so and so's book, by such and such…&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;Not that there is anything wrong with these titles, they serve their purpose. It's not you… it's me. Can we still be friends?&lt;/p&gt;
&lt;p&gt;Anyway, I will cut to the chase with this one: if you care about Plone and you have not done so already, you should buy &lt;strong&gt;`Plone 3 for Education`_&lt;/strong&gt;right now.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Several reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Erik Rose cares about Plone. He cares so much, he spent months of his life pouring his professional experiences into a book so you can benefit!&lt;/li&gt;
&lt;li&gt;PACKT publishing will donate a percentage of the proceeds to the &lt;a class="reference external" href="http://plone.org/foundation"&gt;Plone Foundation.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You will learn a lot about Plone, from the perspective of someone who has supported its deployment and maintenance within a large educational institution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is not to say every Plone book is for you. You have to decide for yourself if you want this beautiful creation (see above) of Erik's to shine on your mantle piece for years to come. Even if you are a giant Plone supporter, and even if you make your living off of Plone, you may still not want to purchase this book. That's just the way that it goes.  But, I will to try to convince you anyway! Here is my chapter-by-chapter review:&lt;/p&gt;
&lt;div class="section" id="preface"&gt;
&lt;h2&gt;Preface&lt;/h2&gt;
&lt;p&gt;The preface sets the tone of the book, and I like the tone Erik sets.  Erik has used Plone for many years at &lt;a class="reference external" href="http://weblion.psu.edu/"&gt;Penn State&lt;/a&gt; and you will find his experiences valuable. He's made mistakes so you don't have to!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-1"&gt;
&lt;h2&gt;Chapter 1&lt;/h2&gt;
&lt;p&gt;Chapter 1 covers creating courses (of course!) Erik makes the argument that Plone can hold it's own against expensive course management software, and I believe him. Of particular interest are Erik's recommendations to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Put courses in large Plone folders&lt;/li&gt;
&lt;li&gt;Use news items, events and collections in the context of a course.&lt;/li&gt;
&lt;li&gt;Cut and paste the course framework once you are done creating it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-2"&gt;
&lt;h2&gt;Chapter 2&lt;/h2&gt;
&lt;p&gt;Chapter 2 introduces calendaring in Plone, and Erik suggests using &lt;a class="reference external" href="http://pypi.python.org/pypi/p4a.plonecalendar"&gt;Plone4artists calendar&lt;/a&gt; to make your course content easily browsable.  Of particular interest are Erik's recommendations to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Replace the stock Plone events folder (which is a collection contained within a folder) with (just) a collection.&lt;/li&gt;
&lt;li&gt;Make clever use of keywords to support lots of events.&lt;/li&gt;
&lt;li&gt;Reorder subfolders in a collection &amp;quot;the hard way&amp;quot;. (Also interesting that he opened this ticket: &lt;a class="reference external" href="https://dev.plone.org/plone/ticket/9109"&gt;https://dev.plone.org/plone/ticket/9109&lt;/a&gt;and that it has received no &amp;quot;love&amp;quot; to date. Perhaps the new collections UI: &lt;a class="reference external" href="http://dev.plone.org/plone/ticket/10902"&gt;http://dev.plone.org/plone/ticket/10902&lt;/a&gt; will save the day!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-3"&gt;
&lt;h2&gt;Chapter 3&lt;/h2&gt;
&lt;p&gt;Chapter 3 showcases the &lt;a class="reference external" href="http://pypi.python.org/pypi/Products.FacultyStaffDirectory"&gt;Faculty/Staff Directory&lt;/a&gt; (FSD) add-on for Plone which allows you to create an online personnel directory. Of particular interest is Erik's explanation of how to categorize and correlate people within FSD.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-4"&gt;
&lt;h2&gt;Chapter 4&lt;/h2&gt;
&lt;p&gt;Chapter 4 covers customizing Faculty/Staff Directory. Of particular interest is Erik's coverage of &lt;a class="reference external" href="http://pypi.python.org/pypi/archetypes.schemaextender"&gt;AT Schema Extender&lt;/a&gt;(which is a great way to customize Plone these days).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-5"&gt;
&lt;h2&gt;Chapter 5&lt;/h2&gt;
&lt;p&gt;Chapter 5 covers blogs and forums. Of particular interest is Erik's coverage of &lt;a class="reference external" href="http://pypi.python.org/pypi/Products.Scrawl"&gt;Scrawl&lt;/a&gt;, and the need to exercise extreme caution when installing add-ons (always good advice).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-6"&gt;
&lt;h2&gt;Chapter 6&lt;/h2&gt;
&lt;p&gt;Chapter 6 covers audio and video. Of particular interest is Erik's coverage of &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.flowplayer"&gt;collective.flowplayer&lt;/a&gt; which makes &lt;a class="reference external" href="http://flowplayer.org/"&gt;Flowplayer&lt;/a&gt; easy to use in Plone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-7"&gt;
&lt;h2&gt;Chapter 7&lt;/h2&gt;
&lt;p&gt;Chapter 7 covers forms. Of particular interest is Erik's comparison of &lt;a class="reference external" href="http://pypi.python.org/pypi/Products.PloneFormGen"&gt;PloneFormGen&lt;/a&gt; to Archetypes content objects, and his explanation of when to use one over the other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-8"&gt;
&lt;h2&gt;Chapter 8&lt;/h2&gt;
&lt;p&gt;Chapter 8 covers theming. Of particular interest is Erik's coverage of &amp;quot;new style&amp;quot; template customizations via &lt;a class="reference external" href="http://pypi.python.org/pypi/z3c.jbot"&gt;z3c.jbot&lt;/a&gt; (which you &lt;a class="reference external" href="https://github.com/aclark4life/aclark_net_website/blob/master/buildout.cfg#L24"&gt;don't even need a package for!&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-9"&gt;
&lt;h2&gt;Chapter 9&lt;/h2&gt;
&lt;p&gt;Chapter 9 covers deployment. Of particular interest is Erik's coverage of a typical production software stack that includes ZEO, Zope2, Apache and of course Plone. Also covered is CacheFu, which has been superseded by &lt;a class="reference external" href="http://pypi.python.org/pypi/plone.app.caching"&gt;plone.app.caching&lt;/a&gt; in Plone 4.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-10"&gt;
&lt;h2&gt;Chapter 10&lt;/h2&gt;
&lt;p&gt;Chapter 10 covers maintenance. Of particular interest is Erik's coverage of &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.recipe.backup"&gt;collective.recipe.backup&lt;/a&gt; to automate the creation of repozo scripts. I would add to that, you can use &lt;a class="reference external" href="http://pypi.python.org/pypi/z3c.recipe.usercrontab"&gt;z3c.recipe.usercrontab&lt;/a&gt;to automate the creation and removal of cron jobs to execute those scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;All in all, I enjoyed reading this book. And, I appreciate whenever a member of the community shares his/her experiences. So thank you, Erik!&lt;/p&gt;
&lt;p&gt;That's it! I hope you will consider purchasing a copy of &lt;a class="reference external" href="https://www.packtpub.com/plone-3-for-education/book"&gt;Plone 3 for Education&lt;/a&gt; right now.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;And if you enjoyed reading this review, please consider `helping me help Plone in February 2011.`_&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Alex Clark (January 2011)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Help Alex Clark help Plone</title><link href="http://aclark.net/blog/2011/01/21/help-alex-clark-help-plone/" rel="alternate"></link><updated>2011-01-21T11:00:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-01-21:2011/01/21/help-alex-clark-help-plone/</id><summary type="html">&lt;p&gt;It's been a few years since I last attended a Plone sprint. And that is by no means for lack of desire. I fantasize about spending a year attending every Plone (and Python) related event on the planet, but I've got a ways to go before I can make that dream a reality.&lt;/p&gt;
&lt;p&gt;In the meantime, I'm excited to announce that the stars have aligned in February 2011 and I am planning to attend the &lt;a class="reference external" href="http://www.coactivate.org/projects/snow-sprint-west-2011/project-home"&gt;Cioppino sprint&lt;/a&gt; AKA West Coast &amp;quot;Snow&amp;quot; Sprint (plane tickets purchased!)&lt;/p&gt;
&lt;p&gt;But, I really need everyone's help to make this trip a success. While I would love to be able to afford it, our financial stars have not aligned for February 2011 and I will be seeking donations in order to offset the cost of travel and lodging.&lt;/p&gt;
&lt;p&gt;I'll be spending (at least) two full days working on Plone-related tasks, for whatever you can guestimate that may be worth (in a consulting context.) And in addition to helping out however I can with the&lt;a class="reference external" href="http://www.coactivate.org/projects/snow-sprint-west-2011/project-home"&gt;scheduled tasks&lt;/a&gt;, I have a long list of admin tasks I would like to try and tackle:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://admin-docs.plone.org/todo.html"&gt;http://admin-docs.plone.org/todo.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="why-you-should-donate"&gt;
&lt;h2&gt;Why you should donate&lt;/h2&gt;
&lt;p&gt;Time I donate to the Plone project is a labor of love, but there are &amp;quot;real world&amp;quot; implications. If you have enjoyed, or otherwise benefited from any of the following, I would appreciate your generous contribution right now; very, very much!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Plone.org website maintenance&lt;/strong&gt;: I spend a lot of time wrangling troops and performing feats of great maintenance on plone.org: &lt;a class="reference external" href="http://svn.plone.org/svn/plone/plone.org/Products.PloneOrg/trunk/"&gt;http://svn.plone.org/svn/plone/plone.org/Products.PloneOrg/trunk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plone.org systems maintenance&lt;/strong&gt;: I consider myself a provider of great services for a great community. I've made a very significant effort to try and improve the services that volunteers are able to provide for such a great community. In documentation, and in deed I plan to&amp;nbsp; keep doing this for at least all of 2011: &lt;a class="reference external" href="http://admin-docs.plone.org"&gt;http://admin-docs.plone.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plone software technical support&lt;/strong&gt;: I spend a great deal of time trying to de-mystify Plone technology for the masses. Early adoption is part of this process. I like to see Plone moving forward and I like to see others embracing that move: &lt;a class="reference external" href="http://blog.aclark.net/2011/01/19/new-website-for-2011/"&gt;http://blog.aclark.net/2011/01/19/new-website-for-2011/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And much, much more!&lt;/strong&gt; I try to do as much for Plone as I can because it does a lot for me. I've &lt;a class="reference external" href="http://plone.org/2008"&gt;organized a conference&lt;/a&gt; and &lt;a class="reference external" href="http://www.packtpub.com/plone-33-site-administration/book"&gt;written a book&lt;/a&gt; and I expect to be active in the community for at least the rest of 2011, and most likely4life.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="how-much-should-you-donate"&gt;
&lt;h2&gt;How much should you donate&lt;/h2&gt;
&lt;p&gt;I am trying to raise $1,000 USD to cover the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Plane tickets&lt;/strong&gt;: approximately $400 USD.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Housing&lt;/strong&gt;: approximately $400 USD.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Food and miscellaneous travel expenses&lt;/strong&gt;: approximately $200 USD.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would appreciate any amount you can afford to give, to help-me-help-Plone be as great as it can be!&lt;/p&gt;
&lt;p&gt;Please use the Chip-in below, or if you prefer (for all you anti-flash-ites), you can donate directly via PayPal with my email address: &lt;strong&gt;aclark&amp;#64;aclark.net&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Thank you all, very much, in advance.&lt;/p&gt;
&lt;p&gt;Alex Clark (January 2011)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>New website for 2011!</title><link href="http://aclark.net/blog/2011/01/19/new-website-for-2011/" rel="alternate"></link><updated>2011-01-19T18:56:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2011-01-19:2011/01/19/new-website-for-2011/</id><summary type="html">&lt;p&gt;Edit: In addition to &amp;quot;cool overlays&amp;quot;, I added a couple Plone-core todo
items (that I may like to PLIP/implement)&lt;/p&gt;
&lt;div class="section" id="purpose-driven"&gt;
&lt;h2&gt;Purpose-driven&lt;/h2&gt;
&lt;p&gt;Since &lt;a class="reference external" href="https://github.com/aclark4life/aclark_net_website/commit/514a46a652d9ffb393fd7f83a296306761c995b7"&gt;December 23, 2010&lt;/a&gt;, a new website has been in development at
ACLARK.NET, LLC. It took approximately one month to complete; and we are
proud to present it to the world today! We are particularly proud that
this website can serve a dual-purpose: to make us look good, and to
serve as an example of how easy and fun it is to install and use Plone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="look-ma-no-package"&gt;
&lt;h2&gt;Look ma, no package!&lt;/h2&gt;
&lt;p&gt;One of the requirements I had in developing a new website was that I
would ditch my old Products.aclark_net package in favor of… nothing.
(Sort of.)&lt;/p&gt;
&lt;p&gt;What I mean is, the entire website was developed and deployed within a
single, small buildout:
&lt;a class="reference external" href="https://github.com/aclark4life/aclark_net_website"&gt;https://github.com/aclark4life/aclark_net_website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The buildout is meant to be instructional (!) so if you have questions,
please ask them in the comments.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
# Extends import buildout config files from elsewhere
extends =
#    http://dist.aclark.net/build/plone/4.1.x/buildout.cfg
    http://dist.aclark.net/build/plone/4.1.x/zeo.cfg
    http://good-py.appspot.com/release/collective.xdv/1.0# Parts define what this buildout does
parts += trac xdv staging production blog[plone]
# Eggs are Python packages
eggs +=
# &amp;quot;New style&amp;quot; theming in Plone
    collective.xdv
# &amp;quot;New style&amp;quot; template overrides
    z3c.jbot# Plone is a modern web application that uses the Zope Toolkit
# internally to provide complex functionality in a manageable way.
#
# The Zope Toolkit features the Zope component architecure; and
# components are configured via the Zope Configuration Markup Language (ZCML).
#
# Rather than create a Python package to do simple customizations, we add
# our ZCML here and the plone.recipe.zope2instance will add it to our
# Zope 2 instance configuration file(s) for us whenever we run bin/buildout.
zcml-additional =
# Add static resource dir
    &amp;lt;configure
        xmlns:browser=&amp;quot;http://namespaces.zope.org/browser&amp;quot;
    &amp;gt;
    &amp;lt;browser:resourceDirectory
        name=&amp;quot;static&amp;quot;
        directory=&amp;quot;${buildout:directory}/static&amp;quot;
    /&amp;gt;
# Add custom templates dir
    &amp;lt;include
        package=&amp;quot;z3c.jbot&amp;quot;
        file=&amp;quot;meta.zcml&amp;quot;
    /&amp;gt;
    &amp;lt;browser:jbot
        directory=&amp;quot;${buildout:directory}/templates&amp;quot;
    /&amp;gt;
    &amp;lt;/configure&amp;gt;[blog]
# Compile the blog theme
recipe = plone.recipe.command
command =
    bin/xdvcompiler -r theme/rules/blog.xml -t theme/templates/blog.html -o theme/blog.xsl
update-command = ${:command}[trac]
# Compile the trac theme
recipe = plone.recipe.command
command =
    bin/xdvcompiler -r theme/rules/trac.xml -t theme/templates/trac.html -o theme/trac.xsl
update-command = ${:command}# This creates bin/xdvcompiler
[xdv]
recipe = zc.recipe.egg# Hostout makes Fabric integration easy
[staging]
recipe = collective.hostout
host = aclark.net
path = /srv/staging[production]
recipe = collective.hostout
host = aclark.net
path = /srv/aclark_net_website[versions]
plone.registry = 1.0b4
plone.app.registry = 1.0b5
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="diazo"&gt;
&lt;h2&gt;Diazo&lt;/h2&gt;
&lt;p&gt;For the first time ever, I decided to try deploying Diazo (formerly XDV)
within Plone itself. That meant installing &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.xdv"&gt;collective.xdv&lt;/a&gt; in Plone
and pointing it to a rules.xml file. This only works for Plone, though.
Wordpress and Trac are still themed outside Plone, by compiling their
themes with xdvcompiler and pointing Apache to the resulting .xsl files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="content"&gt;
&lt;h2&gt;Content&lt;/h2&gt;
&lt;p&gt;I am obsessive about content. I am also obsessive about simplicity. And
in today's world of &lt;a class="reference external" href="http://twitter.com/aclark4life"&gt;need-it-now&lt;/a&gt;, I have become conditioned to &amp;quot;do&amp;quot;
now and ask questions later (which is not always recommended, by the
way). That meant that for this website, rather than migrate content
(which in some cases was contained in custom fields added by Archetypes
schema extender) I opted to setup a &amp;quot;clean&amp;quot; Plone and copy/paste/edit
content.&lt;/p&gt;
&lt;p&gt;On a small site like ours, this was a no-brainer for me. But it
definitely exposes a weakness of Plone. Now that theming has improved,
we really need a better &amp;quot;content story&amp;quot;. To me, that is starting to mean
focusing on satisfying a &amp;quot;simple&amp;quot; use case like exporting and importing
content in Plone. There are folks &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.transmogrifier"&gt;working on this&lt;/a&gt; of course, it just
needs to advance to the point where we can offer it in the Plone core
IMHO.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="todo"&gt;
&lt;h2&gt;Todo&lt;/h2&gt;
&lt;p&gt;Of course there is always more to do. The first thing that jumps out
that is missing from this deployment is &amp;quot;cool (Javascript) overlays&amp;quot; or
&amp;quot;pop-ups,&amp;quot; depending on who you ask. I didn't have time to add them
prior to launch, but I will most likely add them later &lt;a class="reference external" href="http://www.stevemcmahon.com/steves-blog/tools"&gt;because I can&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A couple more Plone-core related features I would love to see
implemented (technically, Diazo is not in the core yet):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I want to add GenericSetup (GS) profiles outside Python packages
(i.e. in the buildout via ZCML). Currently GenericSetup expects to be
passed a context which is (I think) the old-style Zope 2 product
object in the ZODB. But I can't think of a reason why GS couldn't be
made to work sans that requirement (I'm just speculating though, I
haven't looked at the code yet).&lt;/li&gt;
&lt;li&gt;I wish Diazo (collective.xdv) could be configured via GenericSetup.
I'd like to configure the path to the rules.xml file in something
like profiles/default/diazo.xml such that when a Plone site is
created and the Diazo import step is run, the path to the rules file
is set automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This is certainly one of the most fun times I've head developing a Plone
website (which is nice when you are in the Plone website business). I
attribute that directly to all of the awesome folks involved in the
project. I can't list everyone here, but I will &amp;quot;shout out&amp;quot; to some of
the folks who I think were instrumental in getting us here: Eric Steele
&amp;amp; the entire Plone 4 framework team, for their work on Plone 4. Hanno
Schlichting for making Plone fast again. Martin Aspeli and Laurence Rowe
for Diazo. And David Glick, for being &amp;quot;always on&amp;quot; (and my own personal
devil's advocate).&lt;/p&gt;
&lt;p&gt;And really, everyone involved in the Plone project on a day to day
basis. Plone development and consulting can be frustrating at times, but
more often than not it is a magical experience, due in no small part due
to the seemingly never-ending supply of cool and dedicated folks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-look-back"&gt;
&lt;h3&gt;A look back&lt;/h3&gt;
&lt;p&gt;Also, I've been doing this long enough now that it's now very
entertaining (to me at least) to look back at the various incarnations
of the ACLARK.NET, LLC website over the years (these are guestimates):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Circa 2006: Plone 2.5 with a Cereblue skin I purchased for $50 :-)&lt;/li&gt;
&lt;li&gt;Circa 2007: Plone 3.0 with a custom &amp;quot;old style&amp;quot; theme that I designed
(and I'm not a designer).&lt;/li&gt;
&lt;li&gt;Circa 2008: Plone 3.3 with XDV (now Diazo) plus &amp;quot;open source&amp;quot; theme.&lt;/li&gt;
&lt;li&gt;Circa 2011: Plone 4 with collective.xdv, z3c.jbot, and &amp;quot;open source&amp;quot;
buildout and theme, and nothing else.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="to-the-future"&gt;
&lt;h2&gt;To the future&lt;/h2&gt;
&lt;p&gt;Onwards Plone team! Here is to 2011.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>A report on plonetheme.*</title><link href="http://aclark.net/blog/2010/11/04/a-report-on-plonetheme/" rel="alternate"></link><updated>2010-11-04T11:09:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-11-04:2010/11/04/a-report-on-plonetheme/</id><summary type="html">&lt;p&gt;By now, most of us are familiar with XDV and how awesome it is for theming Plone (or any website). You should also be aware that XDV has been renamed to &lt;strong&gt;Diazo&lt;/strong&gt;, and collective.xdv is now called &lt;strong&gt;plone.app.theming&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;But let us not forget the humble &amp;quot;old style&amp;quot; theme just yet! Sometimes they come in very handy, and may even be preferable in some cases depending on what you are trying to accomplish.&lt;/p&gt;
&lt;p&gt;I just gave &lt;strong&gt;plonetheme&lt;/strong&gt;.* a quick spin and thought I'd share the process and results with anyone that might find it useful.&lt;/p&gt;
&lt;div class="section" id="step-1"&gt;
&lt;h2&gt;Step 1&lt;/h2&gt;
&lt;p&gt;Get a list of all the &lt;strong&gt;plonetheme&lt;/strong&gt; packages on PyPI:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip search plonetheme
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2"&gt;
&lt;h2&gt;Step 2&lt;/h2&gt;
&lt;p&gt;Create a buildout:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ virtualenv plone-theme-test
$ bin/easy_install zc.buildout
$ bin/buildout init
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3"&gt;
&lt;h2&gt;Step 3&lt;/h2&gt;
&lt;p&gt;Edit your buildout.cfg to include the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends = http://dist.aclark.net/buildout/plone/4.0.x/buildout.cfg
parts =
 plone[plone]
eggs +=
 ${theme:eggs}zcml +=
 ${theme:eggs}[theme]
eggs =# Deps that the themes should have added
 collective.contentleadimage
 collective.flowplayer
 z3c.jbot#&amp;nbsp;&amp;nbsp;&amp;nbsp; Products.categorynavigator
#
# XXX Products.categorynavigator is a dep of plonetheme.mvob but it
# has a NameError
# ZopeXMLConfigurationError: File &amp;quot;/Users/aclark/Developer/packages…
# NameError: name 'ImportException' is not defined# themes
 plonetheme.notredame
 plonetheme.fui
 plonetheme.sunburst
 plonetheme.colorcontext
 plonetheme.twinapex
#&amp;nbsp;&amp;nbsp;&amp;nbsp; plonetheme.mvob
 plonetheme.peerstheme
 plonetheme.nautica05
 plonetheme.stylized
 plonetheme.labs
 plonetheme.sait2009
 plonetheme.cultureCab
 plonetheme.xtheme
 plonetheme.mimbo
 plonetheme.python
 plonetheme.terrafirma
 plonetheme.solemnity
 plonetheme.level2
 plonetheme.tidyblog
 plonetheme.andreas01
 plonetheme.blueblog
 plonetheme.delicious2
#&amp;nbsp;&amp;nbsp;&amp;nbsp; plonetheme.hamnavoe
 plonetheme.greencommunity
 plonetheme.subordinate
 plonetheme.bluegray
 plonetheme.p2
 plonetheme.aclark_twitter
 plonetheme.relic
 plonetheme.classic
#&amp;nbsp;&amp;nbsp;&amp;nbsp; plonetheme.simplicity
 plonetheme.netsightintranet
 plonetheme.keepitsimple
 plonetheme.andreas02
 plonetheme.essay
 plonetheme.ReOrg
#&amp;nbsp;&amp;nbsp;&amp;nbsp; plonetheme.Bangalore
 plonetheme.nonzero
 plonetheme.cleantheme
 plonetheme.minimalist
 plonetheme.inbusiness
#&amp;nbsp;&amp;nbsp;&amp;nbsp; plonetheme.corporatemale
 plonetheme.portaltwodotoh
 plonetheme.rcom
 plonetheme.equipoteih
 plonetheme.pyar
 plonetheme.basic# XXX plonetheme.GreenEarthTheme3_0 has zope.configuration.config…
# error
#&amp;nbsp;&amp;nbsp;&amp;nbsp; plonetheme.GreenEarthTheme3_0
#zope.configuration.config.ConfigurationExecutionError: &amp;lt;type …
#&amp;nbsp; in:
#&amp;nbsp; File &amp;quot;/Users/aclark/Developer/packages/plonetheme.GreenEarthTheme…
#&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;cmf:registerDirectory
#&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; name=&amp;quot;GreenEarthTheme3_0_templates&amp;quot;/&amp;gt; plonetheme.criticas
 plonetheme.gemstone
#&amp;nbsp;&amp;nbsp;&amp;nbsp; plonetheme.bronzecube
 plonetheme.lithium
 plonetheme.overlappedtabs
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4"&gt;
&lt;h2&gt;Step 4&lt;/h2&gt;
&lt;p&gt;Run buildout; start Plone; play around!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The whole effort (including writing the blog post) took only an hour or two, for whatever that is worth (not including the actual theme review, unfortunately!). I find the results interesting and I thought you might too.&lt;/p&gt;
&lt;div class="section" id="process"&gt;
&lt;h3&gt;Process&lt;/h3&gt;
&lt;div class="section" id="dependencies"&gt;
&lt;h4&gt;Dependencies&lt;/h4&gt;
&lt;p&gt;You'll notice in the &lt;strong&gt;[theme]&lt;/strong&gt; section, comments about various packages that were not included with all of the various themes.&lt;/p&gt;
&lt;p&gt;As far as I can tell, it is in the best interest of &amp;quot;old style&amp;quot; theme developers to specify these packages in their setup.py files with the install_requires parameter!&lt;/p&gt;
&lt;p&gt;OK, it's actually in my best interest because then I have to do less work, but you get the idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="broken-or-missing-packages"&gt;
&lt;h4&gt;Broken or missing packages&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;plonetheme&lt;/strong&gt;.* packages that are just commented out (without an XXX note) did not make it past the bin/buildout step (for whatever reason, usually a broken package).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="themes"&gt;
&lt;h3&gt;Themes&lt;/h3&gt;
&lt;p&gt;My favorite theme (right after plonetheme.aclark_twitter, that is) is… nevermind! I wanted to report on that but I still have to go through all the themes! (By installing each one at a time, testing, then uninstalling before moving to the next one.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="packaging"&gt;
&lt;h3&gt;Packaging&lt;/h3&gt;
&lt;p&gt;Just my opinion, but if you are adding functionality to Plone, it's probably not (just) a theme. So I would separate that functionality from your &lt;strong&gt;plonetheme&lt;/strong&gt;.* code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problems"&gt;
&lt;h3&gt;Problems&lt;/h3&gt;
&lt;div class="section" id="jbot-modifies-default-plone-theme"&gt;
&lt;h4&gt;jbot modifies default Plone theme?&lt;/h4&gt;
&lt;p&gt;I've noticed this before in both Plone Classic and now Sunburst when jbot is installed. No idea what the actual cause is:&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="disclaimer"&gt;
&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;div class="section" id="designed-for-plone-4"&gt;
&lt;h4&gt;Designed for Plone 4?&lt;/h4&gt;
&lt;p&gt;Before you say it (I know you are thinking it), I know not all of these themes are designed to work with Plone 4. I dont' have a good answer about how to approach that problem (I just know that when looking for themes, I don't really care. I just &amp;quot;want it to work&amp;quot;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bug-report-please"&gt;
&lt;h4&gt;Bug report please?&lt;/h4&gt;
&lt;p&gt;I know, I know. I should open a ticket for the jbot thing.&lt;/p&gt;
&lt;p&gt;And now off to play!&lt;/p&gt;
&lt;p&gt;P.S. I will report on the install process in the comments.&lt;/p&gt;
&lt;p&gt;So far, &lt;em&gt;Andreas&lt;/em&gt; installed, worked, and looked nice while &lt;em&gt;Bluegray Theme 1.0.0b2&lt;/em&gt; required a ZMI undo ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>I reinstalled recently</title><link href="http://aclark.net/blog/2010/10/15/i-reinstalled-recently/" rel="alternate"></link><updated>2010-10-15T11:42:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-10-15:2010/10/15/i-reinstalled-recently/</id><summary type="html">&lt;p&gt;And for whatever it is worth to anyone, here are the notes I took (for
the first time ever, when doing a reinstall):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
o System Preferences -&amp;gt; Organize alphabeticallyo Sync bluetooth mouseo Software update * 2
 - Reboot * 2o Install XCodeo Customize Dock
 - Add Terminal
 - Remove Mail, Photo Booth, Address Booko Restore apps (from Time Capsule)
 - Skype
 - Firefox
&amp;nbsp;&amp;nbsp; - Set home page
&amp;nbsp;&amp;nbsp; - View -&amp;gt; Toolbars -&amp;gt; Customize -&amp;gt; Use small Icons
&amp;nbsp;&amp;nbsp; - Preferences -&amp;gt; Privacy -&amp;gt; History -&amp;gt; Use custom settings for
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; history -&amp;gt; Uncheck all but 'remember my browsing history' and
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 'Accept cookies from sites'
&amp;nbsp;&amp;nbsp; - Preferences -&amp;gt; Security -&amp;gt; Passwords -&amp;gt; Uncheck remember
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; passwords for sites
&amp;nbsp;&amp;nbsp; - Set persona (I'd probably like these to rotate)
&amp;nbsp;&amp;nbsp; - Preferences -&amp;gt; General -&amp;gt; Downloads -&amp;gt; Show the Downloads
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; window when download a file -&amp;gt; Close it when all downloads are
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; finished
&amp;nbsp;&amp;nbsp; - Preferences -&amp;gt; General -&amp;gt; Downloads -&amp;gt; Save files to -&amp;gt; Desktop
 - Cisco VPN client
 - Real VNC
 - VLC
 - Textmate (sometimes handy even though i use vi)
 - Parallels
 - Ubuntu &amp;amp; Windows 7 VMs
 - Handbrake
 - MacTheRipper
 - Cord
 - MS Office 2004
 - iWorko svn co https://my-dot-fileso Switch shell to zsh (biggest win? Shared history between open
&amp;nbsp; terminals)o System Preferences -&amp;gt; Accounts -&amp;gt; Show fast user switching menu as
&amp;nbsp; Icono Install python buildout
&amp;nbsp; (http://svn.plone.org/svn/collective/buildout/python)
 - pip-2.6 install psycopg2 and PIL 1.1.7 (the &amp;quot;real&amp;quot; PIL) for work.o Get tab completion in Python working again
 - Seems to work OK with the right stuff in .pythonrc.py and the
&amp;nbsp;&amp;nbsp; Python buildout
 - Does not seem to work with OS X' s Python 2.6.1o Configure Terminal
 - Settings -&amp;gt; Shell -&amp;gt; When the shell exits -&amp;gt; Close the windowo Install homebrew
 - brew install postgres
 - brew install wget
 - brew install gito System preferences -&amp;gt; Exposé and Spaces -&amp;gt; To activate spaces -&amp;gt;
&amp;nbsp; Middle mouse buttono Install firebugo System preferences -&amp;gt; Desktop &amp;amp; Screen Saver -&amp;gt; Use random screen
&amp;nbsp; savero Turn on the locate db (sudo launchctl load -w
&amp;nbsp; /System/Library/LaunchDaemons/com.apple.locate.plist)o Desktop -&amp;gt; Finder -&amp;gt; View -&amp;gt; Show view options -&amp;gt; Arrange by nameo Users -&amp;gt; aclark -&amp;gt; Finder -&amp;gt; View -&amp;gt; Show view options -&amp;gt; Arrange
&amp;nbsp; by name -&amp;gt; Set as defaulto Sign in to
 - Google
 - Twitter
 - Meetup (Why would I want to &amp;quot;Log in using Facebook&amp;quot;?)
 - Facebook&amp;nbsp; (Oh, the irony…)
 - Rackspace cloud
 - Github
 - Coactivate
 - Hulu
 - blog.aclark.net
 - netflix
&lt;/pre&gt;
&lt;p&gt;After a couple weeks, I stopped taking notes (but there were inevitably
a few more steps).&lt;/p&gt;
&lt;/p&gt;&lt;p&gt;Other items of interest: I gave up a while back on *literally*
reinstalling everything (from the internet). I just drag back
applications from my Time Capsule (also note, I purposefully do not
allow Time Machine to restore my home directory, because that feels
&amp;quot;dirty&amp;quot; to me).&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>The Apache modules for XDV</title><link href="http://aclark.net/blog/2010/07/12/the-apache-modules-for-xdv/" rel="alternate"></link><updated>2010-07-12T08:25:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-07-12:2010/07/12/the-apache-modules-for-xdv/</id><summary type="html">&lt;p&gt;I was recently tasked with consolidating our various &lt;strong&gt;business services&lt;/strong&gt; (website, software repository, mailing lists, ldap, etc.) on to a single virtual machine (ostensibly to save money, although it didn't quite work out that way). The Apache modules for XDV presented themselves as an attractive technique to use, in helping me achieve my goals.&lt;/p&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Previously, I had been blissfully running &lt;a class="reference external" href="http://aclark.net"&gt;http://aclark.net&lt;/a&gt; with NGINX, Plone 4 trunk, and XDV on a small virtual machine and absolutely loving it.&lt;/p&gt;
&lt;p&gt;Additionally, I had separate virtual machines for my Wordpress blog (blog.aclark.net) and Subversion software repository (svn.aclark.net).  The isolation of these services made them easy to manage and still relatively cheap to run them all.&lt;/p&gt;
&lt;p&gt;And in fact, I have come to rely heavily on the ability to (1.) rapidly create a virtual machine, (2.) install a bunch of vendor packages that Just Work™, and (3.) build out whatever was left i.e. whatever could not be easily installed via OS vendor packages. This usually translates loosely into &amp;quot;I use Buildout for my Plone sites, and an OS vendor package installer for everything else&amp;quot;.&lt;/p&gt;
&lt;p&gt;That said, even though I already knew the hazards of trying to cram too many services on to a single &amp;quot;shared&amp;quot; host, and didn't really want to do that dance again, it seemed reasonable at the time to at least try and consolidate them on to a single virtual machine (it sounds crazy in hindsight).&lt;/p&gt;
&lt;div class="section" id="first-choice-nginx"&gt;
&lt;h3&gt;First choice: NGINX&lt;/h3&gt;
&lt;p&gt;Like I said earlier, the forked version of NGINX available on the &lt;a class="reference external" href="http://code.google.com/p/html-xslt/"&gt;HTML-XSLT website&lt;/a&gt; is an absolute pleasure to use. But when I pondered consolidating services I knew it would not be easy, and maybe even impossible to run Wordpress behind NGINX.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="second-choice-apache"&gt;
&lt;h3&gt;Second choice: Apache&lt;/h3&gt;
&lt;p&gt;So I thought to myself, &amp;quot;I know, I'll just switch to the Apache modules for XDV&amp;quot; and that will solve my PHP/Plone &amp;quot;integration&amp;quot; problems for the time being. (Another way to solve them would be to use the &lt;a class="reference external" href="http://pypi.python.org/pypi/dv.xdvserver"&gt;XDV middleware&lt;/a&gt; along with &lt;a class="reference external" href="http://pypi.python.org/pypi/Zope2/2.13.0a1"&gt;Zope 2.13&lt;/a&gt;'s WSGI support; I will be trying that next.)&lt;/p&gt;
&lt;p&gt;But not so fast.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="problems"&gt;
&lt;h2&gt;Problems&lt;/h2&gt;
&lt;p&gt;Of course, things don't always go as planned.&lt;/p&gt;
&lt;div class="section" id="first-problem"&gt;
&lt;h3&gt;First problem&lt;/h3&gt;
&lt;p&gt;The Apache modules for XDV do not work exactly &amp;quot;as advertised&amp;quot; on any of the &amp;quot;modern&amp;quot; OS platforms I tried (Debian, various Ubuntus, and Arch Linux). They compile fine against the operating system's Apache, but do not run properly. See &lt;a class="reference external" href="http://www.coactivate.org/projects/deliverance/lists/deliverance-discussion/archive/2010/06/1276982495896/forum_view"&gt;this thread&lt;/a&gt; on the Deliverance mailing list (and I challenge anyone reading this to correct me! :-D)&lt;/p&gt;
&lt;p&gt;&amp;quot;Fine,&amp;quot; I thought, I'll just create a buildout to deploy everything. I &lt;a class="reference external" href="http://blog.aclark.net/2010/03/30/blood-sweat-tears-and-a-new-plone-book/"&gt;wrote a book&lt;/a&gt; about deploying Plone websites with Buildout. This should be easy, right?&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="second-problem"&gt;
&lt;h3&gt;Second problem&lt;/h3&gt;
&lt;p&gt;It's hard to create such a buildout for a variety of reasons, but most noticeably in my mind is the &amp;quot;library soup&amp;quot; you may encounter on any modern system. For example, I started off by trying to include all the dependencies in the buildout. But I ended up leaving things out, like libxml2 and libxslt relying instead on the operating system vendor packages. Because even though I tried desperately to tell every other dependency about the included libxml2 and libxslt2, I still ended up with an annoying &amp;quot;missing symbols&amp;quot; error at the end (meaning I likely missed a compiler flag along the way).&lt;/p&gt;
&lt;p&gt;These errors can be very frustrating, and even worse: &lt;strong&gt;sporadic&lt;/strong&gt;.  Sometimes you may inadvertently add or remove a system dependency during the build process. So you could be relying on a system package and not even know it until later when it is too late (i.e. when you are enjoying some unplanned and unexpected down time).&lt;/p&gt;
&lt;p&gt;So there I went again. It took several days I didn't really have, and the results were not what I expected, but I'm still somewhat happy with them. Now, I want to share this buildout particularly with folks considering using the Apache modules for XDV (&lt;a class="reference external" href="http://code.google.com/p/html-xslt/"&gt;http://code.google.com/p/html-xslt/&lt;/a&gt;). Because while it would be much easier if the Apache modules Just Worked™ with OS vendor packages, in the event that they don't (which is what I experienced) folks may find this buildout helpful. (That, and Jon Stahl requested it on Facebook :-D).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Anyway, I'm quite happy with the buildout and I am sharing it in hopes that it will move the Apache/XDV story forward.&lt;/p&gt;
&lt;p&gt;In addition to compiling Apache with mod_depends and mod_transform, it includes Subversion, Trac, mod_wsgi, PHP and Wordpress. As I mentioned earlier, it is not really my preference to cram all this stuff in to one buildout, but as long as it is reliable and consistent, I don't mind it too much. It also handles the theme compilation for a variety of services, which is accomplished via a command recipe that executes calls to &lt;em&gt;bin/xdvcompiler&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Incidentally, I have no particular allegiance to, or dislike of Apache: more like a love/hate relationship; it can be very useful in a variety of situations, while at the same time confounding. But regardless, I would like to see the Apache XDV modules be able to deliver the same rock solid performance as the NGINX fork.&lt;/p&gt;
&lt;p&gt;Kudos to Laurence Rowe (et al.) for the Apache modules! I hope this blog entry will facilitate a push to get people using them with their &lt;em&gt;operating system vendor's Apache packages&lt;/em&gt;, which may inspire Laurence to continue developing them, and most importantly to fix bugs ;-).&lt;/p&gt;
&lt;p&gt;Normally, I like to factor out the reusable bits first, but this buildout is presented in it's entirety as I am using it (minus some customer bits), for whatever that is worth. Here is a look at the &amp;quot;main&amp;quot; buildout.cfg file, most of which should be self-explanatory. Click around this site to see the results:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
#extends = http://svn.aclark.net/svn/public/buildout/apache/trunk/buildout.cfg
extends = apache.cfg
parts =
 bootstrap
 xdv
 apache
 apreq2
 apache-config
 apache-config-aclark
 apache-config-admin
 apache-config-svn
 apache-config-trac
 apache-config-ssl
 apache-config-mailman
 php
 php-conf
 mod-depends
 mod-transform
 python
 distribute
 trac
 theme-aclark
 theme-public
 theme-support
 theme-blog
 mod-wsgi
 subversion
 subversion-python
 supervisor[apache]
configure-options +=
 --with-included-apr
 --with-ldap
 --enable-authnz-ldap
 --enable-ldap
 --enable-ssl
 --enable-dav
 --enable-dav-fs
 --enable-dav-lock[mod-depends]
recipe = hexagonit.recipe.cmmi
url = http://html-xslt.googlecode.com/files/mod-depends-html-xslt.tgz
configure-options = --with-apxs=${apache:location}/bin/apxs[mod-transform]
recipe = hexagonit.recipe.cmmi
url = http://html-xslt.googlecode.com/files/mod-transform-html-xslt.tgz
configure-options =
 --with-apxs=${apache:location}/bin/apxs
 --with-apr=${apache:location}/bin/apr-1-config
 --with-apr-util=${apache:location}/bin/apu-1-config
environment-section = environment[environment]
PATH = %(PATH)s:${apreq2:location}/bin
LIBS = -lxml2 -lxslt[apreq2]
recipe = hexagonit.recipe.cmmi
url = http://www.bizdirusa.com/mirrors/apache/httpd/libapreq/libapreq2-2.12.tar.gz
configure-options = --with-apache2-apxs=${apache:location}/bin/apxs[libxml2]
recipe = hexagonit.recipe.cmmi
url = ftp://xmlsoft.org/libxml2/libxml2-2.7.7.tar.gz
configure-options =
 --with-python=no[libxslt]
recipe = hexagonit.recipe.cmmi
url = ftp://xmlsoft.org/libxml2/libxslt-1.1.26.tar.gz
configure-options =
 --with-python=no[php]
recipe = hexagonit.recipe.cmmi
url = http://us2.php.net/get/php-5.3.2.tar.gz/from/this/mirror
configure-options = --prefix=${buildout:directory}/parts/apache/php
--with-apxs2=${buildout:directory}/parts/apache/bin/apxs
--with-config-file-path=${buildout:directory}/etc/php.ini
--enable-mbstring --with-mysql=/usr/bin[php-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/php.ini.in
output = ${buildout:directory}/etc/php.ini[apache-config-aclark]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/aclark.in
output = ${buildout:directory}/etc/aclark[apache-config-admin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/admin.in
output = ${buildout:directory}/etc/admin[apache-config-svn]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/svn.in
output = ${buildout:directory}/etc/svn[apache-config-trac]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/trac.in
output = ${buildout:directory}/etc/trac[apache-config-ssl]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/ssl.in
output = ${buildout:directory}/etc/ssl[apache-config-mailman]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mailman.in
output = ${buildout:directory}/etc/mailman[ports]
production = 80[subversion]
recipe = hexagonit.recipe.cmmi
url = http://subversion.tigris.org/downloads/subversion-1.6.12.tar.gz
configure-options = --with-apxs=${apache:location}/bin/apxs
make-targets =
 install
 swig-py
 install-swig-py[mod-wsgi]
recipe = hexagonit.recipe.cmmi
url = http://modwsgi.googlecode.com/files/mod_wsgi-3.2.tar.gz
configure-options =
 --with-apxs=${apache:location}/bin/apxs
 --with-python=${buildout:directory}/parts/python/bin/python[subversion-python]
recipe = plone.recipe.command
libdir = ${python:location}/lib/python2.6/site-packages
command =
 rm -rf ${subversion-python:libdir}/svn
 rm -rf ${subversion-python:libdir}/libsvn
 cp -prv ${subversion:location}/lib/svn-python/libsvn ${subversion-python:libdir}
 cp -prv ${subversion:location}/lib/svn-python/svn ${subversion-python:libdir}
update-command = ${subversion-python:command}[python]
recipe = hexagonit.recipe.cmmi
url = http://www.python.org/ftp/python/2.6.5/Python-2.6.5.tgz
configure-options = --enable-shared[python-exe]
executable = ${buildout:directory}/parts/python/bin/python[distribute]
recipe = plone.recipe.command
command =
 wget http://python-distribute.org/distribute_setup.py
 ${python-exe:executable} distribute_setup.py[xdv]
recipe = zc.recipe.egg[trac]
recipe = plone.recipe.command
command =
 ${buildout:directory}/parts/python/bin/easy_install Trac
 ${buildout:directory}/parts/python/bin/easy_install TracSubversionLocation[theme-public]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/trac/public/theme/rules.xml
 /srv/trac/public/theme/index.html
 --output=${buildout:directory}/etc/trac-public.xsl
update-command = ${:command}[theme-support]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/trac/support/theme/rules.xml
 /srv/trac/support/theme/index.html
 --output=${buildout:directory}/etc/trac-support.xsl
update-command = ${:command}[theme-aclark]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/aclark/theme/rules.xml
 /srv/aclark/theme/index.html
 --output=${buildout:directory}/etc/theme-aclark.xsl
update-command = ${:command}[theme-blog]
recipe = plone.recipe.command
command =
 ${buildout:bin-directory}/xdvcompiler
 /srv/blog/theme/rules.xml
 /srv/blog/theme/index.html
 --output=${buildout:directory}/etc/theme-blog.xsl
update-command = ${:command}
&lt;/pre&gt;
&lt;p&gt;You can check out the rest of the buildout &lt;a class="reference external" href="http://svn.aclark.net/trac/public/browser/buildout/aclark/apache-xdv/trunk"&gt;here&lt;/a&gt; (themed with XDV :-)). And if you enjoy this post, please feel free to pick up a copy of &lt;a class="reference external" href="http://aclark.net"&gt;Plone 3.3 Site Administration&lt;/a&gt; from PACKT Publishing, due out any day now (I am expecting to review pre-finals this week some time).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Blood, sweat, tears… and a new Plone book!</title><link href="http://aclark.net/blog/2010/03/30/blood-sweat-tears-and-a-new-plone-book/" rel="alternate"></link><updated>2010-03-30T18:15:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-03-30:2010/03/30/blood-sweat-tears-and-a-new-plone-book/</id><summary type="html">&lt;p&gt;Well, no blood yet. But certainly sweat and tears! If &lt;a class="reference external" href="http://plone.org/events/conferences/seattle-2006"&gt;Plone Conference
2006&lt;/a&gt; was my inspiration for &lt;a class="reference external" href="http://plone.org/2008"&gt;Plone Conference 2008&lt;/a&gt;, then
&lt;a class="reference external" href="https://www.packtpub.com/Professional-Plone-web-applications-CMS/book"&gt;Professional Plone Development&lt;/a&gt; was my inspiration for this book:
&lt;a class="reference external" href="https://www.packtpub.com/plone-3-3-site-administration/book"&gt;Plone 3.3 Site Administration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the past 14 months or so, I have been writing a book aimed at end users of Plone; folks that have little knowledge of how to do much more than add content. It is intended to make them feel more comfortable performing various site administrator tasks. Topics like theming, maintenance, and optimization are covered.&lt;/p&gt;
&lt;p&gt;But wait, there's more!&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;#1&lt;/h2&gt;
&lt;p&gt;This book aims to &amp;quot;lower the Plone bar for users of Python&amp;quot;. What do I mean by that? Basically this: I love Python almost as much as I love Plone. It lets me translate my thoughts directly into code. I fantasize that with little more than a Python interpreter, one can forge a working Plone site within minutes. But it is not just a fantasy, it is (more or less) the status quo. (Maybe even &lt;a class="reference external" href="http://en.wikipedia.org/wiki/MacGyver"&gt;MacGyver&lt;/a&gt; used Python?)&lt;/p&gt;
&lt;p&gt;So, this book begins at the beginning: by making sure folks are comfortable installing and using Python on there operating system of choice (or using the pre-installed Python). If you read &lt;em&gt;Professional Plone Development&lt;/em&gt;, you may recall Martin Aspeli saying at the beginning of Chapter 3:&lt;/p&gt;
&lt;blockquote&gt;
We will assume that Python 2.4 gets invoked when you run python on the command line.&lt;/blockquote&gt;
&lt;p&gt;This book does not make that assumption and tries to cover everything you may need to know after installing your operating system up to that point.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Chapter 1&lt;/strong&gt;, we cover installing and running Python on three popular operating systems: Mac OS X 10.6 (my main squeeze), Windows 7, and Ubuntu 9.10 (Debian is my main production server squeeze). Other operating systems are welcome; your mileage may vary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;#2&lt;/h2&gt;
&lt;p&gt;This book is largely a response to the whole &amp;quot;Oh no! I have to use Buildout to install Plone and its add-ons!&amp;quot; sentiment that has been prevalent since Buildout was first introduced to Plone several years ago. I don't know if Buildout was the &amp;quot;right&amp;quot; way to go, but I do know that I love using it and I would like to help others feel the same way.&lt;/p&gt;
&lt;p&gt;The bottom line is this: Plone made a conscious decision to &amp;quot;become more Pythonic&amp;quot; by using eggs. With that choice came more complexity from potential conflicts between eggs. Buildout is one solution to that problem. Unfortunately, it introduces other problems like cryptic error messages and a certain &lt;strong&gt;too-many-moving-parts&lt;/strong&gt;-ness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-aside"&gt;
&lt;h2&gt;An aside…&lt;/h2&gt;
&lt;p&gt;Let me correct myself: I am fairly certain Buildout was the right way to go at the time. What I am not sure about is where to go from here. It would be nice to get back to a place where folks could just drop packages in to a directory (I don't literally mean going back to old-style products, but perhaps we could provide that type of functionality again somehow). But I don't have an answer for that. In the meantime, let's make everyone more comfortable with using Buildout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="about-the-rest-of-the-book"&gt;
&lt;h2&gt;About the rest of the book…&lt;/h2&gt;
&lt;p&gt;The book teaches you to find your way around Buildout and Plone. Whether you choose to follow along and build your site from scratch using only Buildout (and a paper clip) or if you use one of the Buildout-based installers (like the Unified Installer), this book aims to make you more competent and comfortable performing a variety of Buildout-related tasks.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Chapters 2-7&lt;/strong&gt;, we present various buildout configuration files that correspond to specific tasks that are related to various subjects, e.g. theming, maintenance, and optimization. The reader is expected to &amp;quot;know how to write a buildout.cfg file&amp;quot; by the end. No one that reads the book is allowed in the #plone IRC channel afterward to ask about buildout (you can answer buildout questions though). Kidding… I kid…&lt;/p&gt;
&lt;p&gt;In the final &lt;strong&gt;Chapter 8&lt;/strong&gt;, we cover new technologies like XDV and repoze.zope2 which may become more mainstream once you decide to start using them (although the latter seems more like a toy to keep us busy until the real fix arrives: &lt;a class="reference external" href="http://article.gmane.org/gmane.comp.web.zope.plone.devel/23887"&gt;full WSGI support in Zope 2&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when-will-it-arrive"&gt;
&lt;h2&gt;When will it arrive?&lt;/h2&gt;
&lt;p&gt;PACKT originally announced the book will arrive in March and I have been working non-stop since mid-March to make sure it gets out the door as quickly as possible; I expect it to be available &lt;strong&gt;Real Soon Now™&lt;/strong&gt;. I apologize to those of you who have pre-ordered and are now waiting for it!&lt;/p&gt;
&lt;p&gt;So get ready! I plan to have over 200 pages of draft material submitted by the end of this month. I will continue to work with PACKT to address any concerns that arise during editing. They have promised to try to ship the book by May, so we will see how it goes. I encourage you to &lt;a class="reference external" href="https://www.packtpub.com/plone-3-3-site-administration/book"&gt;pre-order now&lt;/a&gt; as that will&amp;nbsp;go a long way to inspire them to work just that much harder to get it done and out to you, ASAP!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="can-i-write-a-book"&gt;
&lt;h2&gt;Can I write a book?&lt;/h2&gt;
&lt;p&gt;Probably. For those curious about the process (as I very much was), here is a bit about how it went for me:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;A few years ago, Martin Aspeli had the idea for Practical Plone 3 and put out a call to writers that I responded to; I ended up contributing 2 chapters. This taught me that it was indeed a lot of work, and I got exposed to the editing process.&lt;/li&gt;
&lt;li&gt;A couple years ago, PACKT approached me (and several others) about the idea for Plone Site Administration and I thought I had a good story to tell based on my experiences, so I wrote a detailed outline and they accepted it.&lt;/li&gt;
&lt;li&gt;Though I had written for Practical Plone 3, I struggled to find my voice. At the same time I had a tremendous amount of consulting work to do to make a living. I sneaked in time to write drafts and eventually found my voice. To be honest, the most productive work has been done in the last 3 months.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Perhaps the biggest lesson I learned was this: stop thinking and start writing. I tend to over analyze things and spent a lot of time thinking about &amp;quot;how it would go&amp;quot; rather than just writing it. Writing is the key.  Think less, write more (at which point your thoughts tends to flow more naturally anyway).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="should-i-write-a-book"&gt;
&lt;h2&gt;Should I write a book?&lt;/h2&gt;
&lt;p&gt;Possibly. I am sensitive to the phenomenon of &amp;quot;Plone book diarrhea&amp;quot; and I do think that there can be such a thing as too many Plone books. But I don't think we are there yet. To me, the more books published about Plone (by PACKT or any publisher) the better. I like to see what each individual author brings to the story, even if the stories they are telling tend to overlap sometimes. So for me the answer to that question both before and after writing my book is &lt;strong&gt;yes&lt;/strong&gt;. I know I am a better writer having written it, and I certainly know more about Python, Zope, and Plone and many other technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-either-case-you-should-definitely-take-my-class"&gt;
&lt;h2&gt;In either case, you should definitely take my class.&lt;/h2&gt;
&lt;p&gt;If you are interested in learning more about Python and tools like Distribute, Pip, Buildout, etc. and you want to feel more comfortable managing your Plone site, you will not want to miss the &lt;a class="reference external" href="http://plone-site-admin.eventbrite.com"&gt;one day class I am teaching at Plone Symposium East 2010&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The book will hopefully be out by then, but the class will go on either way.&lt;/p&gt;
&lt;p&gt;Hope to see you there, and I hope you enjoy the book.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="p-s-looking-for-plone-experts-hire-aclark-net-llc"&gt;
&lt;h2&gt;P.S. Looking for Plone experts? Hire ACLARK.NET, LLC.&lt;/h2&gt;
&lt;p&gt;Thank you, everyone, for the responses to &lt;a class="reference external" href="http://blog.aclark.net/?p=170"&gt;my previous blog entry&lt;/a&gt;. I have had some great conversations with some very interesting folks and I appreciate everyone's interest. However, I wanted to encourage everyone once more to &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net?subject=&amp;quot;Hire%20Alex%20Clark&amp;quot;"&gt;get in touch.&lt;/a&gt; And also, to feel free to reach whenever you come across this blog entry and are in need of Plone help. We are always looking for a challenge.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>I need something to do</title><link href="http://aclark.net/blog/2010/03/22/i-need-something-to-do/" rel="alternate"></link><updated>2010-03-22T17:06:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-03-22:2010/03/22/i-need-something-to-do/</id><summary type="html">&lt;p&gt;I would like to think I have done &lt;a class="reference external" href="http://plone.org/2008"&gt;my&lt;/a&gt; &lt;a class="reference external" href="http://aclark.net/plone-site-admin"&gt;share&lt;/a&gt; for Plone over the past few years. In return, I know that Plone has done its share for me. I have learned a lot, made a good living, and met a lot of amazing folks who have really inspired me to be the best I can be.&lt;/p&gt;
&lt;p&gt;But it is time for a change.&lt;/p&gt;
&lt;p&gt;If my life were the movie &lt;a class="reference external" href="http://www.imdb.com/title/tt0109830/"&gt;Forrest Gump&lt;/a&gt;, this would be the part where Forrest stops running, stands in the highway for a minute… then turns around and goes home to Greenbow Alabama (which as it turns out is a fictional town, who knew?)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://gointosail.wordpress.com/2009/03/19/the-end/"&gt;*(Apparently this person had the same epiphany!)*&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not a drastic change mind you, just a re-focus.&lt;/p&gt;
&lt;p&gt;To that end, I would like to reach out to the community I know and love (Plone!) and see if anyone has anything for me to do. Please &lt;a class="reference external" href="mailto:aclark&amp;#64;aclark.net?subject=&amp;quot;Hire%20Alex%20Clark&amp;quot;"&gt;contact me&lt;/a&gt; if you are interested, and please tell all your friends too! You never know who knows who and who is looking for what.&lt;/p&gt;
&lt;p&gt;Let me tell you a little bit about what I have done professionally and what I would like to do now, followed by some requirements I hope can be met.&lt;/p&gt;
&lt;p&gt;What I have done:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I received a &lt;strong&gt;Computer Science degree&lt;/strong&gt; in May 1998 after about 10 years of undergrad education (transferred, changed majors, etc.) -  I've done a lot of &lt;strong&gt;system administration and network engineering&lt;/strong&gt;, mostly for ISPs including AOLnet (back in the day).&lt;/li&gt;
&lt;li&gt;I have done a lot of &lt;strong&gt;Plone&lt;/strong&gt;.&lt;ul&gt;
&lt;li&gt;I started doing Plone at my last full-time system administrator job, and became so obsessed with it that I had to &lt;strong&gt;quit to pursue&lt;/strong&gt;it&lt;strong&gt;full time&lt;/strong&gt;, mostly thanks to the support of my wife Amy, and Paul Boos and Nate Aune who handed me my first contracts!&lt;/li&gt;
&lt;li&gt;I have &lt;strong&gt;organized monthly meetings&lt;/strong&gt;for ZPUGDC for the last 4 years or so, taking over for Joel Burton when he moved to California. We are now in the process of becoming a 501c3 so we can expand our focus and serve the community in bigger and better ways. ZPUGDC is not a full time job, but it as a passion (to be a resource for all things Python in DC).&lt;/li&gt;
&lt;li&gt;I have owned and operated&lt;strong&gt;ACLARK.NET, LLC&lt;/strong&gt;for the past six years. All in all this has been an amazing experience and I have no plans to stop. We are now at the point where we can compete with all the &amp;quot;big firms&amp;quot; and we intend to do so. But I need time to answer some RFQs…&lt;/li&gt;
&lt;li&gt;I &lt;strong&gt;organized&lt;/strong&gt; &lt;a class="reference external" href="http://plone.org/2008"&gt;Plone Conference 2008&lt;/a&gt; and &lt;a class="reference external" href="http://aclark.net/plone-site-admin"&gt;wrote a book&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I &lt;strong&gt;upgraded plone.org to Plone 3&lt;/strong&gt;, and now lead the plone.org &lt;strong&gt;infrastructure team member&lt;/strong&gt;, taking over for Wichert Akkerman (more or less) when he left. This is something I particularly enjoy. No wait, I hate it. Just kidding. It is something I like, and plan to focus on it more in the future to make sure it gets done right. It is very frustrating to want to do something but not have&amp;nbsp; time to do it. I'm sure all you Plone consultants know what I mean.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have done some &lt;strong&gt;Python&lt;/strong&gt; programming and evangelism:&lt;ul&gt;
&lt;li&gt;I have paid particular attention to making ZPUGDC &lt;strong&gt;more Python-centric&lt;/strong&gt;, by welcoming all Python programmers in the area not just Plonistas. This has worked out very well and our monthly attendance has gone from 5-6 to 15-20. Each month, we go around the room and talk about &amp;quot;what we are doing with Python&amp;quot;. It is &lt;em&gt;always&lt;/em&gt; interesting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I write code&lt;/strong&gt;. I am particularly proud that working for myself has afforded me my first paid programming job (programming for system administration doesn't really count IMO). There is a ton to learn: Networking frameworks like Twisted, Web application frameworks like Zope, Django, Turbo Gears, Pylons, BFG, etc.  Continuous integration with Hudson (OK, that is Java but you can use it on your Python code ;-)), Documentation with Sphinx. And so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I would like to do:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Open Source Software&lt;/strong&gt;: I really like open source software. It started in the mid 1990s when I realized that there was this thing called the Internet and that people had been writing code for years and making it available for general use to anyone interested. That just floored me. I can still remember the thrill of borrowing a UNIX text book from my professor the summer before I started CS classes.  At the time, it seemed like UNIX and open source walked hand in hand and I became obsessed with both. I realize now there is much more to that story, but that is how the seeds were planted. Anyway, open source is for me and I am for open source. I am not sure what that means in terms of job opportunities, but maybe I could be an evangelist like Mark Hinkle, and evangelize Your Software like he evangelizes Zenoss. Just a thought.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plone, Python, Zope, Zenoss&lt;/strong&gt;: I really like these open source projects, in particular. Any paid position that involves almost any aspect of these projects would make me happy. I have pimped myself out to Zenoss and I eventually expect to hang out my Zenoss shingle and start doing add-ons, customizations, etc. for Zenoss users. But I am not quite there yet. I know Plone, and can handle most development and deployment tasks. I am particularly interested in large-scale deployments (e.g. City of Austin type clients, only with a better outcome ;-)).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Busy work&lt;/strong&gt;. It sounds silly, but repetitive tasks fit my brain.  Automating large scale deployments. Configuration management. System updates. These things I can do, and help you with too.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn&lt;/strong&gt;: If there is one thing I've learned after learning so much over the years, it is that I hardly know anything. I hope to be a part of team that offers a significant growth opportunity. It's time to raise the bar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I require to work for you:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Six month contract or longer&lt;/strong&gt;. Whatever I sign on to do, it has to last six months or more (preferably until the end of 2010). This is the time frame I am particularly concerned about (for a variety of personal reasons). I can start April 1 or after. Repeat: it is definitely OK if it lasts longer than six months.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Travel&lt;/strong&gt;. I can travel almost anywhere in the world, as long as you pay for it ;-). But seriously, working from home is a requirement, but meetings (monthly? bi-monthly?) in your city should not be a problem.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fun and flexibility&lt;/strong&gt;. I do Plone for a living because Plone is fun. I work very hard to make sure your needs are met, and I ask for a lot of flexibility in return. Deadlines are not a problem, but the ability to act independently to meet the deadline is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Paid Plone work&lt;/strong&gt;. Ideally someone will hire me to do all the things I already love to do like maintaining plone.org, sprinting on various tasks, perhaps joining the Plone 4.1 Framework Team. Anything and everything I can do to make the Plone project better and stronger. This of course does not have to be the main focus of the work, but it would be nice if some time could be allocated officially towards these tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part time&lt;/strong&gt;. Ideally I'd like to put in about 20 hours per week on some project, and spend the other 20 hours on ACLARK.NET, ZPUGDC, INC.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Above all, I am flexible. This post is about me, but I am certainly willing to listen to what you, prospective employer, has to offer. If there is a good fit, I am confident we can make it work.&lt;/p&gt;
&lt;p&gt;I look forward to hearing from you!&lt;/p&gt;
&lt;p&gt;Oh, I almost forgot, my updated resume is here: &lt;a class="reference external" href="http://aclark.net/team/aclark/resume"&gt;http://aclark.net/team/aclark/resume&lt;/a&gt;. Or if you prefer PDF: &lt;a class="reference external" href="http://aclark.net/team/aclark/resume-pdf"&gt;http://aclark.net/team/aclark/resume-pdf&lt;/a&gt;.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Using Buildout to deploy a Plone 2.1 site to the cloud</title><link href="http://aclark.net/blog/2010/03/15/using-buildout-to-deploy-a-plone-21-site-to-the-cloud/" rel="alternate"></link><updated>2010-03-15T21:03:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-03-15:2010/03/15/using-buildout-to-deploy-a-plone-21-site-to-the-cloud/</id><summary type="html">&lt;p&gt;Believe it or not, there are still Plone 2.1 sites in production. (And 1.0 sites too, for that matter. Just look for the tell-tale '/help' sign, e.g. &lt;a class="reference external" href="http://www.zope.org/help"&gt;http://www.zope.org/help&lt;/a&gt;, if you suspect Plone 1).&lt;/p&gt;
&lt;p&gt;I know, because I just &lt;a class="reference external" href="http://harryroseman.com"&gt;deployed one&lt;/a&gt; (a cool artist's site if you have a couple hours to kill…). But I didn't do it the &amp;quot;old way&amp;quot; with Zope 2 instances created by hand on clunky physical servers, I used &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout"&gt;Buildout&lt;/a&gt; and the &lt;a class="reference external" href="http://rackspacecloud.com"&gt;Cloud&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="aside-1"&gt;
&lt;h2&gt;Aside #1&lt;/h2&gt;
&lt;p&gt;As an aside: it was really bothering me lately that you couldn't (easily) find older Plone releases at &lt;a class="reference external" href="http://sourceforge.net/projects/plone/"&gt;SourceForge&lt;/a&gt;. This is by design to avoid confusion, but still confusing. So when I needed the most recent 2.1.x tarball I decided to scratch my itch and fix the &amp;quot;problem&amp;quot;.  I started gathering the &lt;a class="reference external" href="http://downloads.sourceforge.net/project/plone/OldFiles/Plone-2.1.4.tar.gz"&gt;hard to find&lt;/a&gt; releases and putting them &lt;a class="reference external" href="http://dist.plone.org/archive/"&gt;here&lt;/a&gt;. OK… so I only gathered one release (2.1.4), but I swear I had good intentions. If you'd like to see any additional releases &amp;quot;moved&amp;quot; to dist.plone.org, please let me know in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aside-2"&gt;
&lt;h2&gt;Aside #2&lt;/h2&gt;
&lt;p&gt;Another aside: I should mention here the advent of a tool that promises to simplify deployment of Python-based web applications to the cloud (or supported service, which technically does not have to be &amp;quot;cloud-based&amp;quot;) via the use of APIs (in particular, the &lt;a class="reference external" href="http://rackspacecloud.com"&gt;Rackspace Cloud&lt;/a&gt; API, which is the only one supported so far): &lt;a class="reference external" href="http://cloudsilverlining.org"&gt;Silver Lining&lt;/a&gt;! The idea of using this tool got me so excited, I spent some time experimenting with setting up a new host with it (and purchasing their service). But when I realized it was not quite ready for production (i.e. &amp;quot;&lt;a class="reference external" href="http://cloudsilverlining.org/#who-should-use-silver-lining"&gt;if you want to use Silver Lining, Silver Lining is not for you&lt;/a&gt;&amp;quot; :-)), I ended up using the Rackspace Cloud &lt;strong&gt;web interface&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I was so impressed with it.&lt;/p&gt;
&lt;p&gt;I literally moved all of my (granted, relatively small number of client sites) to their service within a matter of 1-2 months. Now, I know what you are thinking, and I do intend to explore other services (in fact, I have tried &lt;a class="reference external" href="http://www.slicehost.com/"&gt;Slicehost&lt;/a&gt; and it was OK), but this service made my life so much easier I wanted to mention some of its key features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;On the fly&amp;quot; requisitioning. You can add/remove hosts anytime and you only pay for the time they are up.&lt;/li&gt;
&lt;li&gt;&amp;quot;On the fly&amp;quot; resizing of hosts. In my testing and real world experience, the resizing (e.g. move from a host with 256MB RAM and 10GB disk to 500MB RAM and 20GB disk) was painless (literally only cost a few minutes of downtime).&lt;/li&gt;
&lt;li&gt;The potential for all of this to be done remotely via a command line tool like Silver Lining.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="aside-3"&gt;
&lt;h2&gt;Aside #3&lt;/h2&gt;
&lt;p&gt;A third and final aside: the status quo of WSGI support for Plone. Since &lt;a class="reference external" href="http://cloudsilverlining.org/#the-application"&gt;Zope 2 is not supported&lt;/a&gt; by Silver Lining, the key to deploying Plone sites with it is currently to use &lt;a class="reference external" href="http://repoze.org/quickstart.html#repoze.zope2"&gt;repoze.zope2&lt;/a&gt;. &lt;a class="reference external" href="http://jazkarta.com"&gt;Nate Aune&lt;/a&gt; has recently made some progress with this, and more work is scheduled for&lt;a class="reference external" href="http://weblion.psu.edu/events/plone-symposium-east-2010"&gt;Plone Symposium East&lt;/a&gt;. My latest swipe at WSGI-Plone is here: &lt;a class="reference external" href="http://svn.aclark.net/svn/public/buildout/plone/branches/3.x-wsgi/"&gt;http://svn.aclark.net/svn/public/buildout/plone/branches/3.x-wsgi/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-actual-point"&gt;
&lt;h2&gt;The actual point&lt;/h2&gt;
&lt;p&gt;And finally, to the point of this blog entry! I have created a generic Plone 2.1 buildout for anyone interested. You can find it here:&lt;a class="reference external" href="http://svn.aclark.net/svn/public/buildout/plone/branches/2.1.x/"&gt;http://svn.aclark.net/svn/public/buildout/plone/branches/2.1.x/&lt;/a&gt;.  Using it is simple, as described in the &lt;a class="reference external" href="http://svn.aclark.net/svn/public/buildout/plone/branches/2.1.x/README.txt"&gt;README.txt&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ svn export http://svn.aclark.net/svn/public/buildout/plone/branches/2.1.x/ plone
$ cd plone
$ python2.4 bootstrap.py
$ bin/buildout
$ bin/instance fg
&lt;/pre&gt;
&lt;p&gt;Since Plone 2.1 community support has expired for this release, and since Plone 2.1 shipped with Python 2.3 (if I recall correctly), this is definitely &amp;quot;unsupported use of Plone&amp;quot;. But when you need it, you need it. I have yet to experience any issues related to the Python version, for whatever that is worth (possibly due to the fact that Plone 2.1 originally shipped with Python 2.3 and Zope 2.7, then Zope 2.8 came along which worked with Python 2.4. Just a guess).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>just friends (first cut).mov</title><link href="http://aclark.net/blog/2010/01/12/just-friends-first-cutmov/" rel="alternate"></link><updated>2010-01-12T12:54:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-01-12:2010/01/12/just-friends-first-cutmov/</id><summary type="html">&lt;p&gt;[youtube &lt;a class="reference external" href="http://www.youtube.com/watch?v=_dK-l41uRio&amp;amp;w=420&amp;amp;h=315"&gt;http://www.youtube.com/watch?v=_dK-l41uRio&amp;amp;w=420&amp;amp;h=315&lt;/a&gt;] Just
Friends ============ Copyright © Alex Clark 2010 (Capo 5) A (form) I
just want to be friends with you A (form) I don't want to have to do&lt;/p&gt;
</summary><category term="Music"></category></entry><entry><title>No, really, you can (just) use Buildout to install Plone.</title><link href="http://aclark.net/blog/2010/01/07/no-really-you-can-just-use-buildout-to-install-plone/" rel="alternate"></link><updated>2010-01-07T12:39:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-01-07:2010/01/07/no-really-you-can-just-use-buildout-to-install-plone/</id><summary type="html">&lt;p&gt;This is a follow up to my &lt;a class="reference external" href="http://old.aclark.net/team/aclark/blog/plone-as-eggs"&gt;Getting Excited about Plone as Eggs&lt;/a&gt; post, because I can't keep updating that one forever.&lt;/p&gt;
&lt;p&gt;Generally speaking, the recommended (and supported) way to install Plone is via the installers, e.g. the &lt;a class="reference external" href="http://launchpad.net/plone/3.3/3.3.3/+download/Plone-3.3.3-UnifiedInstaller.tgz"&gt;Unified Installer&lt;/a&gt;. Obviously, if you want things to Just Work™ you should be using the latest stable release, which is why I linked to the 3.3.3 unified installer (although there is no Windows installer for 3.3.3 yet, which is why it's not released on plone.org).&lt;/p&gt;
&lt;p&gt;That said, since both Plone and Zope 2 have been packaged as eggs&amp;nbsp; (Plone became an egg in version 3.2 and Zope 2 became an egg as of Zope 2.12 which is the version of Zope 2 that Plone 4 will use) it has become &amp;quot;mostly trivial&amp;quot; to write a buildout.cfg to install Plone with. That means that you don't even need paster to do it. You can just fire up an editor and type:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
parts = instance

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    Plone
&lt;/pre&gt;
&lt;p&gt;Amazing!&lt;/p&gt;
&lt;p&gt;Of course there is the nasty bit about PIL, which I get around now-a-days by adding a very specific find-link, e.g.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
parts = instance
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
&lt;/pre&gt;
&lt;p&gt;What you should have at this point is a working Plone, but not necessarily a repeatable buildout. The reason being we have not pinned any egg versions yet, so we are effectively asking for whatever the latest version of Plone is on PyPI. Fun for playing, not fun for production. Fortunately the nice Plone people have created a bunch of version pins for us, so we just need to use them:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends = http://dist.plone.org/release/4.0a3/versions.cfg
versions = versions
parts = instance
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz

[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
&lt;/pre&gt;
&lt;p&gt;If you are completely new to buildout and you are thinking to yourself right now &amp;quot;what in the world is this guy talking about?&amp;quot; then you will likely want to install buildout first so you can join in the fun. Fortunately, the nice Python people have made that easy with a package called &lt;a class="reference external" href="http://pypi.python.org/pypi/distribute"&gt;Distribute&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Following their instructions, you can do this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ curl -O http://python-distribute.org/distribute_setup.py
$ python distribute_setup.py
&lt;/pre&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ easy_install zc.buildout
$ mkdir plone
$ cd plone
$ buildout init
&lt;/pre&gt;
&lt;p&gt;After which you will have a buildout.cfg file, and you can follow along with the above steps. Happy?&lt;/p&gt;
&lt;p&gt;The best part about all of this is that (on a fast internet connection) it should only be a matter of minutes before you are able to do this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ bin/instance fg
&lt;/pre&gt;
&lt;p&gt;and be staring at a thing of beauty.&lt;/p&gt;
&lt;p&gt;Of course, if you are running in the foreground (recommended for debugging) you should see something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
aclark&amp;#64;Alex-Clarks-MacBook-Pro:~/Developer/public-plone/ &amp;gt; bin/instance fg
/Users/aclark/Developer/public-plone/parts/instance/bin/runzope -X debug-mode=on
2010-01-07 12:07:56 INFO ZServer HTTP server started at Thu Jan&amp;nbsp; 7 12:07:56 2010
 Hostname: 0.0.0.0
 Port: 8080
2010-01-07 12:08:14 INFO Zope Ready to handle requests
&lt;/pre&gt;
&lt;p&gt;If you'd like to get a little less noisy and skip debug mode but still run in the foreground, you can use April 2008's famous addition to plone.recipe.zope2instance:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
aclark&amp;#64;Alex-Clarks-MacBook-Pro:~/Developer/public-plone/ &amp;gt; bin/instance console
&lt;/pre&gt;
&lt;p&gt;Sweet, blissful, silent running Plone.&lt;/p&gt;
&lt;p&gt;Happy Plone 4'ing all!&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Yup, this blog is now powered by WordPress.</title><link href="http://aclark.net/blog/2010/01/06/yup-this-blog-is-now-powered-by-wordpress/" rel="alternate"></link><updated>2010-01-06T22:18:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-01-06:2010/01/06/yup-this-blog-is-now-powered-by-wordpress/</id><summary type="html">&lt;p&gt;&lt;strong&gt;(Or, &amp;quot;How I learned to stop worrying and use the right tool for the
job.&amp;quot;)&lt;/strong&gt; My first blog entry was &lt;a class="reference external" href="http://blog.aclark.net/2007/10/17/first-post/"&gt;well over two years ago&lt;/a&gt;. I've
learned enough Plone since then to know that I hardly know anything!
Toward the end of 2009, I begin to realize that I was doing way too
much, and not getting anything done as a result. So I began offloading
services wherever I could to free or low cost service providers; I can't
tell you how much happier I have been since then. Interestingly, after
waffling over the use of these services for years, when push came to
shove I had no problem choosing the right tool for the job. It didn't
matter so much what selection I made. The fact that I offloaded the
responsibility was the most important thing. Which brings me back to the
subject at hand. I love &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt;. I think it is great software. I want
to make it better. In order to do that I need to broaden my horizons and
use the right tool for the job, and hopefully bring those experiences
back to Plone! Hence, introducing my new Wordpress-powered blog
&lt;strong&gt;about&lt;/strong&gt; Plone. I'm still using Plone for &lt;a class="reference external" href="http://aclark.net"&gt;aclark.net&lt;/a&gt; (of course). I
just don't want to &amp;quot;manage&amp;quot; the blog software anymore. I want it done
for me so I can focus on other things. Since WordPress is so obviously
the leading &amp;quot;best&amp;quot; weblog software, it was an easy decision to make. (Of
course, this blog was shipped using &lt;a class="reference external" href="http://svn.aclark.net/trac/public/browser/buildout/lamp/trunk"&gt;Python software&lt;/a&gt;.) Lastly, I'll
say this. I want to be more prolific in 2010, and I'm hoping that using
the right tool for the job will help me achieve that. It has worked
wonders so far.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>you know me (first cut).mov</title><link href="http://aclark.net/blog/2010/01/06/you-know-me-first-cutmov/" rel="alternate"></link><updated>2010-01-06T12:24:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-01-06:2010/01/06/you-know-me-first-cutmov/</id><summary type="html">&lt;p&gt;[youtube &lt;a class="reference external" href="http://www.youtube.com/watch?v=CVlBiQ00KDg"&gt;http://www.youtube.com/watch?v=CVlBiQ00KDg&lt;/a&gt;] You Know Me
=========== © 2010 Alex Clark You know me I'm ready to go I'm ready to
go I'm ready to go&lt;/p&gt;
</summary><category term="Music"></category></entry><entry><title>be there or be square (first cut).mov</title><link href="http://aclark.net/blog/2010/01/01/be-there-or-be-square-first-cutmov/" rel="alternate"></link><updated>2010-01-01T15:04:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-01-01:2010/01/01/be-there-or-be-square-first-cutmov/</id><summary type="html">&lt;p&gt;[youtube &lt;a class="reference external" href="http://www.youtube.com/watch?v=YAv9N0mri_w&amp;amp;w=420&amp;amp;h=315"&gt;http://www.youtube.com/watch?v=YAv9N0mri_w&amp;amp;w=420&amp;amp;h=315&lt;/a&gt;] be
there or be square ===================== © Alex Clark 2010 D i just want
to be there D you don't want to be square D either way don't matter D
that's from what i gather&lt;/p&gt;
</summary><category term="Music"></category></entry><entry><title>Toronto Plone Add-ons Sprint #1 Report</title><link href="http://aclark.net/blog/2010/01/01/toronto-plone-add-ons-sprint-1-report/" rel="alternate"></link><updated>2010-01-01T07:03:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2010-01-01:2010/01/01/toronto-plone-add-ons-sprint-1-report/</id><summary type="html">&lt;p&gt;Last month, members of the &lt;a class="reference external" href="http://groups.google.com/group/topug"&gt;Toronto Plone user's group&lt;/a&gt; helped with
Plone.org maintenance. Here is the sprint &amp;quot;report out&amp;quot; from Jordan
Baker:&lt;/p&gt;
&lt;div class="section" id="toronto-plone-addons-sprint-report-1"&gt;
&lt;h2&gt;Toronto Plone Addons Sprint Report #1:&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Attending: Robert Jackiewicz, Jordan Baker, John Southern, aclark&lt;/li&gt;
&lt;li&gt;aclark helped out by answering some questions and provided a dump of
PSC data from &lt;a class="reference external" href="http://plone.org/"&gt;plone.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rob was working on getting his buildout working with nginx and
documenting the process&lt;/li&gt;
&lt;li&gt;John worked on gettting a task listing setup on coactivate:
&lt;a class="reference external" href="http://www.coactivate.org/projects/ploneorg-upgrade/tasks/tasklist/show/993"&gt;http://www.coactivate.org/projects/ploneorg-upgrade/tasks/tasklist/show/993&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jordan commited changes to allow for filtering by version, autosubmit
on selection change and searching using the PSC view instead of the
Plone search view. &amp;nbsp;aclark is working on cutting a release...
hopefully we can get a preview soon..&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="outstanding-questions"&gt;
&lt;h3&gt;Outstanding questions:&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;need some help with c.xdv or nginx so we can preview changes in the
theme&lt;/li&gt;
&lt;li&gt;Where should we put our issues in the future. &amp;nbsp;There was talk of
eating dog food using a Poi instance on &lt;a class="reference external" href="http://plone.org/"&gt;plone.org&lt;/a&gt; -- can someone
help me set that up (add hexsprite and gogojohn as admins)&lt;/li&gt;
&lt;li&gt;Please help us by prioritizing the tasks in the task list on
coactivate&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="next-sprint"&gt;
&lt;h3&gt;Next Sprint:&lt;/h3&gt;
&lt;p&gt;Shooting for January 22. &amp;nbsp;Hopefully that will work for most people.
Please help us spread the word to interested parties... more details to
come.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>New Year’s Python Meme</title><link href="http://aclark.net/blog/2009/12/31/new-years-python-meme/" rel="alternate"></link><updated>2009-12-31T18:22:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2009-12-31:2009/12/31/new-years-python-meme/</id><summary type="html">&lt;img alt="images/lenin_packaging.png" src="images/lenin_packaging.png" style="width: 100%;" /&gt;
&lt;div class="section" id="whats-the-coolest-python-application-framework-or-library-you-have-discovered-in-2009"&gt;
&lt;h2&gt;What’s the coolest Python application, framework or library you have discovered in 2009?&lt;/h2&gt;
&lt;p&gt;That would be &lt;a class="reference external" href="http://zenoss.org"&gt;Zenoss&lt;/a&gt;. I'm very impressed with the application as well as the community, which is awesome. They remind me a lot of the Plone community; I think the two can learn a lot from each other.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-new-programming-technique-did-you-learn-in-2009"&gt;
&lt;h2&gt;What new programming technique did you learn in 2009?&lt;/h2&gt;
&lt;p&gt;Generally speaking, I'm happy with my progress as a Plone integrator, plowing through the tremendous Plone code stack, on my way to complete mastery. I may never get there, but I'm having fun trying. In other words, I know a lot more about how far the Zope2/CMF/Five rabbit hole goes. If I had to pick, I'd choose Grok in Plone, mostly as it relates to Dexterity: &lt;a class="reference external" href="http://plone.org/products/dexterity/documentation/manual/five.grok"&gt;http://plone.org/products/dexterity/documentation/manual/five.grok&lt;/a&gt;. I created &lt;a class="reference external" href="http://plone.org/products/collective-project"&gt;http://plone.org/products/collective-project&lt;/a&gt; as a result, or rather, I converted the package to use Dexterity types so I could learn Dexterity, in part ;-). At first I was angry at being &amp;quot;forced&amp;quot; to use Grok techniques in Plone, but then it grew on me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="whats-the-name-of-the-open-source-project-you-contributed-the-most-in-2009-what-did-you-do"&gt;
&lt;h2&gt;What’s the name of the open source project you contributed the most in 2009? What did you do?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I dug out from &lt;a class="reference external" href="http://plone.org/events/conferences/2008-washington-dc"&gt;Plone Conference 2008&lt;/a&gt;, which included publishing the &lt;a class="reference external" href="http://plone.org/events/conferences/2008-washington-dc/agenda"&gt;videos and slides&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I helped move plone.org to &lt;a class="reference external" href="http://sixfeetup.com"&gt;Six Feet Up&lt;/a&gt;, and have been looking after &lt;a class="reference external" href="http://dev.plone.org/plone/browser/Products.PloneOrg/trunk"&gt;it&lt;/a&gt; as well as &lt;a class="reference external" href="http://plone.org/news/plone-domain-dns-changes"&gt;other infrastructure issues&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I worked on a book called 'Plone Site Admin', which will most likely come out in early 2010 (via &lt;a class="reference external" href="http://packtpub.com"&gt;Packt&lt;/a&gt;). I hope the community will find it useful.&lt;/li&gt;
&lt;li&gt;I contributed a &lt;a class="reference external" href="http://dev.plone.org/plone/ticket/9330"&gt;new feature&lt;/a&gt; to Plone 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-was-the-python-blog-or-website-you-read-the-most-in-2009"&gt;
&lt;h2&gt;What was the Python blog or website you read the most in 2009?&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://planet.plone.org"&gt;Planet Plone&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-are-the-three-top-things-you-want-to-learn-in-2010"&gt;
&lt;h2&gt;What are the three top things you want to learn in 2010?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://zenoss.org"&gt;Zenoss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wsgi.org/wsgi/"&gt;WSGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dev.plone.org/plone/browser/buildouts/plone-coredev/branches/4.0"&gt;Plone 4 core development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy (Python) New Year everyone!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>Review of Veda Williams&amp;#039; Plone 3 Theming</title><link href="http://aclark.net/blog/2009/09/22/review-of-veda-williams039-plone-3-theming/" rel="alternate"></link><updated>2009-09-22T16:17:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2009-09-22:2009/09/22/review-of-veda-williams039-plone-3-theming/</id><summary type="html">&lt;p&gt;First things first, I can't overstate enough how much I personally appreciate Veda's efforts to bring the (currently-and-unfortunately, but-not-for-long) complex world of Plone theming to the masses. It's an acquired taste, but once you get the hang of it you can use your powerful skills to create some very impressive sites – and make the world a better place like Veda and the crew at &lt;a class="reference external" href="http://groundwire.org"&gt;Groundwire&lt;/a&gt; are doing (formerly ONE/Northwest).&lt;/p&gt;
&lt;p&gt;Furthermore, If you are interested in Plone and how Plone theming works, this book is almost certainly for you. It gives you an over abundance of present day theming knowledge, and also covers aspects of the Zope 3 component architecture, where Plone has been, and where it is going to be in the not-so-distant-future.&lt;/p&gt;
&lt;p&gt;Since &lt;a class="reference external" href="http://packtpub.com"&gt;PACKT&lt;/a&gt; are well known for giving back to the communities that produce the software that is the subject of their books, purchasing a copy of this book will directly benefit Plone, so I encourage you to do so.&lt;/p&gt;
&lt;p&gt;With all that out of the way, I'd like to focus on a chapter by chapter review (&lt;a class="reference external" href="http://vincentfretin.ecreall.com/articles/review-plone-3-theming"&gt;like&lt;/a&gt; &lt;a class="reference external" href="http://seeknuance.com/2009/08/25/a-review-of-plone-3-theming/"&gt;everyone&lt;/a&gt; &lt;a class="reference external" href="http://www.littled.net/new/2009/09/27/review-of-plone-3-theming-by-veda-williams/"&gt;else&lt;/a&gt; &lt;a class="reference external" href="http://reinout.vanrees.org/weblog/2009/10/25/plone-3-theming.html"&gt;does&lt;/a&gt;) of Plone 3 Theming. Like I said, I really liked this book so please don't take any of my (hopefully constructive) criticism negatively. I hope my comments will help the readers of this book, as well as Veda, if she dares to attempt a 2nd edition one day!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;STANDARD DISCLAIMERS APPLY&lt;/strong&gt;: I'm a &amp;quot;paid&amp;quot; reviewer (in that I received a free copy of the book) and also, I know Veda personally.&lt;/p&gt;
&lt;div class="section" id="chapter-1"&gt;
&lt;h2&gt;Chapter 1&lt;/h2&gt;
&lt;p&gt;This chapter gives an overview of Plone, which as a total-Plone-fanboy, I very much appreciated. I particularly enjoyed the &amp;quot;community lore&amp;quot;.  &amp;quot;what is Plone&amp;quot;, and &amp;quot;books about Plone&amp;quot; sections. The author also includes a &amp;quot;Plone vs. Drupal&amp;quot; comparison and an &amp;quot;evolution&amp;quot; section that covers Plone theming-framework changes version by version, which I didn't care for as much [1].&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-2"&gt;
&lt;h2&gt;Chapter 2&lt;/h2&gt;
&lt;p&gt;This chapter lists many tools for graphic design, web browsing, web development (with browser add-ons), and text editing. All useful information. I particularly enjoyed the recommendation for the browser add-on &lt;a class="reference external" href="http://developer.yahoo.com/yslow/"&gt;YSlow&lt;/a&gt; which I'd heard of, but don't use regularly.  Recommendations for the traditional UNIX® text editors vi and emacs were missing, but folks that use these editor already know which one they prefer (*wink* – vi), and those that don't aren't likely to start using them now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-3"&gt;
&lt;h2&gt;Chapter 3&lt;/h2&gt;
&lt;p&gt;Here we get into the now-venerable &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout/1.4.1"&gt;zc.buildout&lt;/a&gt; and how it is used by Plone. I think many folks will appreciate the terminology section, featuring definitions of Zope, Python, and various Python package terminology. I would have liked to have seen the &lt;a class="reference external" href="is-anyone-using-plone.orgs-new-pypi-functionality"&gt;PyPI features of plone.org mentioned&lt;/a&gt;, but I'll settle for a shameless plug of it here.  Similarly, no mention of git or mercurial in a section about version control (Subversion only), but I suppose (again) those familiar with these technologies already know which one they prefer.&lt;/p&gt;
&lt;p&gt;Lastly, I liked the variety of approaches described in the &amp;quot;download Plone&amp;quot; section, from using platform installers to using the unified installer to satisfying all the Plone dependencies by hand. All good information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-4"&gt;
&lt;h2&gt;Chapter 4&lt;/h2&gt;
&lt;p&gt;Using &lt;a class="reference external" href="http://pypi.python.org/pypi/ZopeSkel/2.13"&gt;ZopeSkel&lt;/a&gt; to create a theme package, then adding that package to your buildout as a &amp;quot;develop egg&amp;quot; are the main topics covered here. (A side note: I'm very much looking forward to the upcoming release of ZopeSkel 2.14!  &lt;a class="reference external" href="http://www.coactivate.org/projects/zopeskel-bbq-sprint/blog/2009/10/13/zopeskel-bbq-sprint-days-two-three-and-four/"&gt;http://www.coactivate.org/projects/zopeskel-bbq-sprint/blog/2009/10/13/zopeskel-bbq-sprint-days-two-three-and-four/&lt;/a&gt; )&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-5"&gt;
&lt;h2&gt;Chapter 5&lt;/h2&gt;
&lt;p&gt;I like this chapter because it covers a variety of the TTW (through the web) changes that we are consistently reminded we are not supposed to make, but we all know that everyone makes them. The truth is, there is absolutely nothing wrong with TTW changes if you take them for what they are worth. It's fine to turn a knob or two TTW, just be aware that at some point you may be turning that knob again TTW, if you don't turn a similar knob on the file system ;-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-6-7"&gt;
&lt;h2&gt;Chapter 6-7&lt;/h2&gt;
&lt;p&gt;Here we get into various Zope 3 concepts: ZCML, browser layers, resources, viewlets and more! If there is such a thing, this would be the &amp;quot;unfortunate&amp;quot; part of the modern Plone theming story. Plone themers, for better or worse, must be familiar these concepts in order to be successful. One pet peave I have, that I will mention here because it seems appropriate, is the bundling of GenericSetup in a discussion about Zope 3 concepts. While GenericSetup may use Zope 3 technology under the hood (I assume it does, like most modern Zope 2 code) as a concept it has absolutely nothing to do with Zope 3 (in other words it is not part of the &amp;quot;component architecture&amp;quot;) It just happened to be introduced to Plone around the same time various other Zope 3 technology was introduced (via Five), hence people tend to include it in the &amp;quot;things they hate about Zope 3 in Plone&amp;quot; category. Perhaps GenericSetup should have been added either before or after the Zope 3 stuff to make it more palatable, but that train has sailed and now we must deal with the consequences.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-8"&gt;
&lt;h2&gt;Chapter 8&lt;/h2&gt;
&lt;p&gt;This chapter about TAL (template attribute language) is great stuff. TAL is one of those beautiful technologies that pays for itself once you learn it (unlike various web form frameworks, for example ;-). If like me you can't get enough of TAL from Veda's book, check out the section on it in the Zope 2 book: &lt;a class="reference external" href="http://docs.zope.org/zope2/zope2book/ZPT.html"&gt;http://docs.zope.org/zope2/zope2book/ZPT.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-9-11"&gt;
&lt;h2&gt;Chapter 9-11&lt;/h2&gt;
&lt;p&gt;Here we get to watch Veda design, build, and deploy a theme. This is the focal point of the book, and is worth the price of admission alone. I almost wish the entire book was about this theme, with the other relevant bits sprinkled in as needed. But in any event, these three chapters are what most readers will be most interested in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-12"&gt;
&lt;h2&gt;Chapter 12&lt;/h2&gt;
&lt;p&gt;This is a great little chapter about various add-ons that themers may find interesting. My favorite add-on mentioned in this chapter is Products.FSDump. Very, very useful tool for getting various bits out of your ZODB and on to your file system (e.g. the contents of the portal_skins/custom folder). I'm really hoping that a 1.0 release will see the light of day one of these days. I notice Veda didn't mention it, but there is now an egg-based version of this popular add-on: &lt;a class="reference external" href="http://pypi.python.org/pypi/Products.FSDump/FSDump-0.9.4"&gt;http://pypi.python.org/pypi/Products.FSDump/FSDump-0.9.4&lt;/a&gt; Just add Products.FSDump to your instance section's eggs= parameter and off you go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-13"&gt;
&lt;h2&gt;Chapter 13&lt;/h2&gt;
&lt;p&gt;Here, a gratuitous chapter on multimedia wherein various useful multi-media add-ons are mentioned. I say gratuitous because I think there is a misperception that you need these add-ons to accomplish what you want. Plone should do a much better job convincing people that while it is a complex application, a Plone site is also just a website. So if you know how to do it elsewhere (e.g. on a &amp;quot;regular&amp;quot; website) it should be easy to do it in Plone (we are not quite there yet). Anyway, some great add-ons are mentioned here of course, but one noticeable absence: &lt;a class="reference external" href="http://plone.org/products/collective-fancyzoomview"&gt;http://plone.org/products/collective-fancyzoomview&lt;/a&gt; (which is used by PloneSoftwareCenter on plone.org).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-14"&gt;
&lt;h2&gt;Chapter 14&lt;/h2&gt;
&lt;p&gt;An 'Amen!' for this chapter that covers deploying and contributing themes, especially on the contributing part. As I mentioned earlier, I would have liked to have seen the &lt;a class="reference external" href="is-anyone-using-plone.orgs-new-pypi-functionality"&gt;PyPI features of plone.org mentioned&lt;/a&gt; in this book, and in this chapter in particular. While it is arguably still hard to create Plone themes, it is encouragingly not hard to share them! Also, an incredibly useful tool for releasing themes (and any package) to both plone.org/products and pypi.python.org at the same time (i.e in a single command) is &lt;a class="reference external" href="http://pypi.python.org/pypi/jarn.mkrelease/2.0.2"&gt;http://pypi.python.org/pypi/jarn.mkrelease/2.0.2.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="chapter-15"&gt;
&lt;h2&gt;Chapter 15&lt;/h2&gt;
&lt;p&gt;This chapter (by Alexander Limi) introduces people to &amp;quot;new style&amp;quot; theming with xdv. While I enjoy this subject tremendously, I think it's going to take a while before it is fully digested by integrators.  Hopefully, Alex's chapter will help. I'm also told that Laurence Rowe has been making some improvements to collective.xdv recently, and I see there is a new version here: &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.xdv"&gt;http://pypi.python.org/pypi/collective.xdv&lt;/a&gt; (I think this version handles 404s).&lt;/p&gt;
&lt;p&gt;Bottom line: this is great stuff but potentially confusing in that you have an add-on, collective.xdv, that applies an XSLT transform &amp;quot;on the fly&amp;quot; (in memory) to your Plone site, but the recommended deployment strategy is to use NGINX or Apache with Laurence's patches applied. I've spent some time doing this (I expect to re-launch this site with xdv soon, and of course plone.org uses it) and it is non-trivial to say the least. What we have now is a situation where folks are starting to use collective.xdv and thinking that *it* is the new way to theme, when in fact it is only part of the story.&lt;/p&gt;
&lt;p&gt;One last pet peeve I will mention is that both &amp;quot;theming&amp;quot; and &amp;quot;skinning&amp;quot; were used to describe the subject of the book.&amp;nbsp; I would have preferred just &amp;quot;theming&amp;quot; (since that is what we are calling it now ;-).&lt;/p&gt;
&lt;p&gt;In conclusion, great job Veda! Thank you very much for your efforts. I look forward to reviewing a second edition. To every one else, I invite you to purchase your copy of this book and get your Plone 3 theming ON: &lt;a class="reference external" href="http://www.packtpub.com/plone-3-theming-create-flexible-powerful-professional-templates/mid/220709943ki3?utm_source=aclark.net&amp;amp;utm_medium=affiliate&amp;amp;utm_content=blog&amp;amp;utm_campaign=mdb_001376"&gt;http://www.packtpub.com/plone-3-theming-create-flexible-powerful-professional-templates&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[1] Quite frankly, I think Plone is in a category all its own (as the most successful Python-based CMS of all time), and while there are certainly comparisons to be made, and lessons to be learned from the competition, I think we should let the readers decide for themselves how Plone stacks up to the competition.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>A sane buildout for repoze.zope2 + Plone?</title><link href="http://aclark.net/blog/2009/06/18/a-sane-buildout-for-repozezope2-plone/" rel="alternate"></link><updated>2009-06-18T22:09:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2009-06-18:2009/06/18/a-sane-buildout-for-repozezope2-plone/</id><summary type="html">&lt;p&gt;(This is also a follow-up of sorts to &lt;a class="reference external" href="http://www.martinaspeli.net/articles/rolling-out-repoze"&gt;Martin Aspeli's excellent
introduction to repoze and Plone from last year&lt;/a&gt;.)&lt;/p&gt;
&lt;div class="section" id="a-tale-of-two-buildouts"&gt;
&lt;h2&gt;A Tale of Two Buildouts&lt;/h2&gt;
&lt;p&gt;There are two stories going on here, both of which &lt;a class="reference external" href="http://www.martinaspeli.net/articles/scrambled-eggs"&gt;Martin Aspeli
recently described in great detail&lt;/a&gt; and &lt;a class="reference external" href="http://plope.com/Members/chrism/distribution_links_considered_harmful"&gt;Chris McDonough tackled last
year&lt;/a&gt;. For the purposes of this blog entry, I'll refer to the issue as
the &amp;quot;index vs. find-links&amp;quot; conundrum in buildout&amp;nbsp; (find-links in
buildout are equivalent to distribution_links in setuptools).&lt;/p&gt;
&lt;p&gt;For those that want strict repeatability, using the index parameter is
the clear winner. It simply forces buildout to do the right thing now
and forever, by limiting what packages it can select from. For those
that want functionality and don't mind the occasional egg-out-of-whack
(i.e. unexpected upgrade), then using the find-links parameter can
provide a &amp;quot;sexy&amp;quot; way to get decent results quickly (but may, and
probably will, shoot you in the foot later).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sexy-but-dangerous"&gt;
&lt;h2&gt;Sexy, but Dangerous&lt;/h2&gt;
&lt;p&gt;Let's start with the sexy, but with less repeat-ability method first.
Using this method we are not specifying our own index. Therefore you are
free to add any package from &lt;a class="reference external" href="http://pypi.python.org/simple/"&gt;PyPI&lt;/a&gt; or &lt;a class="reference external" href="http://plone.org/products/simple"&gt;plone.org&lt;/a&gt; as you see fit.
This is essentially why people like this method (the counter argument is
that it is simple to add any additional egg you may want to your index,
but we'll get to that later).&lt;/p&gt;
&lt;p&gt;So a simple buildout using this method might look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;virtualenv plone; cd plone&lt;/li&gt;
&lt;li&gt;bin/easy_install zc.buildout&lt;/li&gt;
&lt;li&gt;bin/buildout init&lt;/li&gt;
&lt;li&gt;Edit buildout.cfg:&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends =
# Using Martin Aspeli's good-py, thanks!
    http://good-py.appspot.com/release/repoze.zope2/1.0
    http://dist.plone.org/release/3.3rc3/versions.cfg
versions = versions
find-links =
    http://dist.repoze.org/zope2/latest
    http://dist.repoze.org/zope2/dev/
    http://dist.plone.org/release/3.3rc3
parts = instance[instance]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    repoze.zope2
    Plone
    PIL

4. bin/buildout
&lt;/pre&gt;
&lt;p&gt;A few more steps are required, which we could certainly automate in
buildout, but for now I'll just list them here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;bin/mkzopeinstance&lt;/li&gt;
&lt;li&gt;bin/addzope2user admin admin&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, the moment we've all been waiting for… the fun part!&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple" start="7"&gt;
&lt;li&gt;bin/paster serve etc/zope2.ini&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should see something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[aclark&amp;#64;alex-clarks-macbook-pro]~/Developer/plone% bin/paster serve etc/zope2.ini
2009-06-18 22:52:24 INFO Marshall libxml2-python not available. Unable to register libxml2 based marshallers.
2009-06-18 22:52:27 WARNING ZODB.FileStorage Ignoring index for /Users/aclark/Developer/p3-repoze-2/var/Data.fsDeprecationWarning: zope.app.annotation has moved to zope.annotation. Import of zope.app.annotation will become
unsupported in Zope 3.5
/Users/aclark/Developer/plone/eggs/zopelib-2.10.7.0-py2.4-macosx-10.5-i386.egg/zope/configuration/xmlconfig.py:323:
  __import__(arguments[0])
------
2009-06-18T22:52:24 INFO Marshall libxml2-python not available. Unable to register libxml2 based marshallers.
------
2009-06-18T22:52:27 WARNING ZODB.FileStorage Ignoring index for /Users/aclark/Developer/plone/var/Data.fs
Starting server in PID 26900.
zserver on port 8080
&lt;/pre&gt;
&lt;p&gt;At this point, you should be able to login to
&lt;a class="reference external" href="http://localhost:8080/manage"&gt;http://localhost:8080/manage&lt;/a&gt; and create a Plone site.&lt;/p&gt;
&lt;p&gt;Of course, we did a sloppy job here, creating the Zope2 instance in the
root of the buildout, etc. It is possible that
&lt;a class="reference external" href="http://pypi.python.org/pypi/plone.recipe.zope2instance/3.2"&gt;plone.recipe.zope2install&lt;/a&gt; may help us in the future by supporting
repoze.zope2 instances (or maybe it does already, I didn't try).&lt;/p&gt;
&lt;p&gt;Next up?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="boring-but-repeatable"&gt;
&lt;h2&gt;Boring, but Repeatable&lt;/h2&gt;
&lt;p&gt;I kid, but this is actually a very serious concern for many people, and
rightfully so. The notion that your buildout will work the same today as
it does in one year from now may be a strict requirement for your
project. If it is, we can accommodate you (I hope) with the &amp;quot;index&amp;quot;
buildout that follows. The downside is that *you* can't control what I
put in the index. However, you can certainly create your own index using
this technique.&lt;/p&gt;
&lt;p&gt;An arguably even simpler buildout using this technique might look like
this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;virtualenv plone; cd plone&lt;/li&gt;
&lt;li&gt;bin/easy_install zc.buildout&lt;/li&gt;
&lt;li&gt;bin/buildout init&lt;/li&gt;
&lt;li&gt;Edit buildout.cfg:&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;pre class="literal-block"&gt;
[buildout]
index = http://dist.plone.org/experimental/release/3.3rc3/simple/
parts = instance[instance]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    repoze.zope2
    Plone
    PIL

4. bin/buildout

5. bin/mkzopeinstance

6. bin/addzope2user admin admin

7. bin/paster serve etc/zope2.ini
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="in-conclusion"&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;Depending on what my needs are, I might choose either of these
techniques. We can also hold out for &lt;a class="reference external" href="http://bugs.python.org/setuptools/issue32"&gt;multi-index support in
setuptools&lt;/a&gt;. That would seemingly make everyone happy. In the meantime,
I can tell you I'd definitely reach for a buildout sans custom index
first, then ask questions later (i.e. wait for bleeding toes) but that
is just me. If people find the &amp;quot;index&amp;quot; technique generally useful, I'd
be willing to support package sheperding and &lt;a class="reference external" href="http://pypi.python.org/pypi/basketweaver/0.1.2-r6"&gt;index generating with
basketweaver&lt;/a&gt;. Just let me know. If it really catches on, we could
rename &lt;a class="reference external" href="http://dist.plone.org/experimental/release/3.3rc3/"&gt;http://dist.plone.org/experimental/release/3.3rc3/&lt;/a&gt; to
&lt;a class="reference external" href="http://dist.plone.org/repoze/release/3.3rc3/"&gt;http://dist.plone.org/repoze/release/3.3rc3/&lt;/a&gt;. Of course, if anyone
objects to this or finds it confusing, I can just as easily remove it
(from dist.plone.org).&lt;/p&gt;
&lt;p&gt;Special thanks to &lt;a class="reference external" href="http://plope.com/"&gt;Chris McDonough&lt;/a&gt; and &lt;a class="reference external" href="http://www.martinaspeli.net/"&gt;Martin Aspeli&lt;/a&gt; for helping me
scratch my itch!&lt;/p&gt;
&lt;p&gt;Finally, please don't rely on any of this &amp;quot;in production&amp;quot; yet unless you
know what you are doing. I tested these techniques up to the point of
starting Zope (via paste) and adding a Plone site, nothing more! :-)&lt;/p&gt;
&lt;p&gt;I, however, am getting a new server next week and will be hosting this
site on &lt;a class="reference external" href="http://repoze.org/quickstart.html#repoze.zope2"&gt;repoze.zope2&lt;/a&gt; very shortly ;-)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>A LAMP buildout for Wordpress and other PHP apps</title><link href="http://aclark.net/blog/2009/04/21/a-lamp-buildout-for-wordpress-and-other-php-apps/" rel="alternate"></link><updated>2009-04-21T00:23:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2009-04-21:2009/04/21/a-lamp-buildout-for-wordpress-and-other-php-apps/</id><summary type="html">&lt;div class="section" id="a-buildout-for-php"&gt;
&lt;h2&gt;A Buildout for PHP?&lt;/h2&gt;
&lt;p&gt;Having been a Plone Consultant for many years now, I find it very
painful to deal with non-Python-based technologies and I often will go
to great lengths to avoid it. I recently had to deploy a new PHP
application on an older Linux server (RHEL3) and could not bring myself
to compile the packages, search for RPMs, or do any of the mundane,
boring tasks required; so I began to look for an alternative. Enter: the
&lt;a class="reference external" href="http://svn.aclark.net/svn/public/buildout/lamp/trunk/"&gt;LAMP buildout&lt;/a&gt;. I created and used this to deploy my client's PHP
application. I hope others find it useful, both as an alternative way to
deploy PHP apps, and as an example of the wide variety of things
buildout can be used to do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-just-that-simple"&gt;
&lt;h2&gt;It's just that simple?&lt;/h2&gt;
&lt;p&gt;Unfortunately, this was not the blissful experience I had hoped for.
There were some non-obvious configuration parameters that had to be
dealt with. This was tedious and sometimes painful, but achieving the
end result was a uniquely rewarding experience I can assure you! In
fact, most of the problems had to do with the individual software
components and not buildout itself, which was a pleasure to work with
and one of the main reasons I am writing this blog entry. In a Plone
buildout for example, in most cases, the tedious parts are handled for
you and you just need to &lt;a class="reference external" href="getting-excited-about-plone-3-2"&gt;add the Plone egg, run buildout, and start
your site&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="break-it-down"&gt;
&lt;h2&gt;Break it down&lt;/h2&gt;
&lt;p&gt;Now, on to the buildout! It was developed and tested on Mac OS X 10.5
then deployed to RHEL3. I had a small problem on RHEL3 with the GD
imaging library so I removed it (and installed it by hand in
/usr/local). Other than that, things went smoothly and I deployed
several PHP apps with it just for kicks, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Phorum&lt;/li&gt;
&lt;li&gt;SugarCRM&lt;/li&gt;
&lt;li&gt;WordPress&lt;/li&gt;
&lt;li&gt;phpMyAdmin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It builds Apache, PHP, MySQL, GD, and Supervisor. Let's take a look.&lt;/p&gt;
&lt;p&gt;First, we define the parts. For each of these, we'll do something useful
to contribute to the end result.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
parts =
# Aspeli-style line-spacing to emphasize the functionality of each part or group of parts ;-)
    env
    grp    mysql
    apache
    gd
    php    ports
    mycnf
    mysql-bin
    mysql-admin
    mysql_install_db
    apache-conf
    php-conf# Uncomment only one of these at a time
#    phpmyadmin
#    sugarcrm
#    phorum
    wordpress    supervisor
&lt;/pre&gt;
&lt;p&gt;Now that the parts are listed, the rest of the buildout must define
those parts.&lt;/p&gt;
&lt;p&gt;First, we add some utilities required by this buildout.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[env]
recipe = gocept.recipe.env[grp]
recipe = collective.recipe.grp
&lt;/pre&gt;
&lt;p&gt;Next, we build the core components.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[mysql]
recipe = hexagonit.recipe.cmmi
url = http://mysql.mirrors.hoobly.com/Downloads/MySQL-5.1/mysql-5.1.33.tar.gz
keep-compile-dir = true[apache]
recipe = hexagonit.recipe.cmmi
url = http://www.trieuvan.com/apache/httpd/httpd-2.2.11.tar.gz
configure-options = --enable-so
keep-compile-dir = true[gd]
recipe = hexagonit.recipe.cmmi
url = http://www.libgd.org/releases/gd-2.0.35.tar.gz
keep-compile-dir = true[php]
recipe = zc.recipe.cmmi
environment =
    PATH=${mysql:location}/bin:${env:PATH}
url = http://us2.php.net/get/php-5.2.9.tar.gz/from/this/mirror
# Beware, the new line below (i.e. '') may need to be undone.
extra_options =
  --prefix=${buildout:directory}/parts/apache/php
  --with-config-file-path=${buildout:directory}/etc/php.ini
  --with-gd=${buildout:directory}/parts/gd
  --with-apxs2=${buildout:directory}/parts/apache/bin/apxs
  --with-mysql=${mysql:location}
  --enable-mbstring
&lt;/pre&gt;
&lt;p&gt;After that, some configuration. Read the comments below for more
information.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Make it easy to change the various port settings[ports]
recipe = plone.recipe.command
command =
    echo These ports are used to configure this LAMP:
    echo Supervisor: ${ports:supervisor}
    echo Apache: ${ports:apache}
    echo MySQL: ${ports:mysql}
supervisor = 9001
apache = 8080
mysql = 3306# All the mysql compile options[mycnf]
recipe = plone.recipe.command
command =
    echo
    echo These options are passed to mysqld_safe: ${mycnf:opt}
    echo
basedir=${mysql:location}
datadir=${buildout:directory}/var
pid=${mycnf:datadir}/mysql.pid
err = ${mycnf:datadir}/log/mysql.err
sock = ${mycnf:datadir}/mysql.sock
# Beware, the new line below (i.e. '') may need to be undone.
opt = --port=${ports:mysql} --pid-file=${mycnf:pid} --log-error=${mycnf:err}
--basedir=${mycnf:basedir} --datadir=${mycnf:datadir} --socket=${mycnf:sock}# Setup the mysql databases.[mysql_install_db]
recipe = plone.recipe.command
command =
    ${mysql:location}/bin/mysql_install_db --datadir=${mycnf:datadir}
    echo
    echo After starting supervisord, you may want to run:
    echo ${buildout:directory}/parts/mysql/bin/mysqladmin -u root password 'new-password'
    echo
update-command = ${mysql_install_db:command}# Generate Config files for Apache and PHP[apache-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/httpd.conf.in
output = ${buildout:directory}/etc/httpd.conf[php-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/php.ini.in
output = ${buildout:directory}/etc/php.ini# Make it easy to run mysql and mysqladmin[mysql-bin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mysql.in
output = ${buildout:directory}/bin/mysql[mysql-admin]
recipe = collective.recipe.template
input = ${buildout:directory}/templates/mysqladmin.in
output = ${buildout:directory}/bin/mysqladmin
&lt;/pre&gt;
&lt;p&gt;Now, the parts that download the various PHP apps.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[wordpress]
recipe = hexagonit.recipe.download
url = http://wordpress.org/latest.tar.gz
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true[phpmyadmin]
recipe = hexagonit.recipe.download
url = http://prdownloads.sourceforge.net/phpmyadmin/phpMyAdmin-3.1.3.2-english.tar.bz2
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true[sugarcrm]
recipe = hexagonit.recipe.download
url = http://www.sugarforge.org/frs/download.php/5252/SugarCE-5.2.0c.zip
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true[phorum]
recipe = hexagonit.recipe.download
url = http://www.phorum.org/downloads/phorum-5.2.10.tar.gz
destination = ${buildout:directory}/htdocs
strip-top-level-dir = true
&lt;/pre&gt;
&lt;p&gt;And the supervisor that will control everything.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[supervisor]
recipe = collective.recipe.supervisor
port = ${ports:supervisor}
serverurl = http://127.0.0.1:${ports:supervisor}
pp = ${buildout:directory}/eggs/supervisor-3.0a6-py2.4.egg/supervisor/pidproxy.py
# Beware, the new line below (i.e. '') may need to be undone.
programs =
    10 mysql ${supervisor:pp} [ ${mycnf:pid} ${mysql:location}/bin/mysqld_safe ${mycnf:opt} ]
    20 apache ${apache:location}/bin/httpd [ -c &amp;quot;ErrorLog /dev/stdout&amp;quot; -DFOREGROUND
                                             -f ${buildout:directory}/etc/httpd.conf ]
&lt;/pre&gt;
&lt;p&gt;If you are interested in trying this yourself, please see:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://svn.aclark.net/svn/public/buildout/lamp/trunk/"&gt;http://svn.aclark.net/svn/public/buildout/lamp/trunk/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;and let me know how it goes!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Is anyone using Plone.org&amp;#039;s new PyPI functionality?</title><link href="http://aclark.net/blog/2009/03/13/is-anyone-using-ploneorg039s-new-pypi-functionality/" rel="alternate"></link><updated>2009-03-13T11:09:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2009-03-13:2009/03/13/is-anyone-using-ploneorg039s-new-pypi-functionality/</id><summary type="html">&lt;p&gt;Lots of exciting things are happening with Plone.org!&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://twitter.com/calvinhp"&gt;Calvin Hendryx-Parker&lt;/a&gt; and &lt;a class="reference external" href="http://sixfeetup.com"&gt;Six Feet Up&lt;/a&gt; are working on moving
*.plone.org to one of their powerful new servers (with some
exceptions, most notably {svn,dev}.plone.org will remain in place, as
I understand it)!&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://limi.net"&gt;Alex Limi&lt;/a&gt; and &lt;a class="reference external" href="http://plone.org/team/WebsiteTeam"&gt;company&lt;/a&gt; are working on deploying a new look and
feel using a new-fangled technology called xdv (a variant of
Deliverance).&lt;/li&gt;
&lt;li&gt;I am removing &lt;a class="reference external" href="https://dev.plone.org/plone.org/ticket/1080"&gt;kinks&lt;/a&gt; that have been lingering after the recent
upgrade (in theory ;-).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This blog entry is both a &amp;quot;call to arms&amp;quot; to everyone involved in
helping, and a message to everyone waiting patiently that we haven't
forgotten about you! :-D&lt;/p&gt;
&lt;p&gt;In particular, I'd like to hear from any early adopters of the new
&lt;a class="reference external" href="http://plone.org/products"&gt;http://plone.org/products&lt;/a&gt;section. You can read about how to use the
new PyPI functionality here, if you haven't already:
&lt;a class="reference external" href="http://pypi.python.org/pypi/collective.dist/0.2.2"&gt;http://pypi.python.org/pypi/collective.dist/0.2.2&lt;/a&gt;. In my little
&amp;quot;test&amp;quot; product, I found it quite useful:
&lt;a class="reference external" href="http://plone.org/products/Products.todo/"&gt;http://plone.org/products/Products.todo/.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So if you are using it, I'd definitely like to hear your experiences. Or
if not, please give it a try!&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Nirvana Old Age Interrupted</title><link href="http://aclark.net/blog/2009/02/07/nirvana-old-age-interrupted/" rel="alternate"></link><updated>2009-02-07T21:26:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2009-02-07:2009/02/07/nirvana-old-age-interrupted/</id><summary type="html">&lt;p&gt;[youtube &lt;a class="reference external" href="http://www.youtube.com/watch?v=ec200NlbTA4&amp;amp;w=420&amp;amp;h=315"&gt;http://www.youtube.com/watch?v=ec200NlbTA4&amp;amp;w=420&amp;amp;h=315&lt;/a&gt;] This is
a cover of Nirvana's &amp;quot;Old Age&amp;quot; and is absolutely hilarious. Not because
of my performance (although that is funny too) but because, while I
thought I had permission from my wife to make noise, you will see at the
end I most certainly did not!&lt;/p&gt;
</summary><category term="Music"></category></entry><entry><title>Help esteele go to Baarn!</title><link href="http://aclark.net/blog/2009/01/23/help-esteele-go-to-baarn/" rel="alternate"></link><updated>2009-01-23T12:38:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2009-01-23:2009/01/23/help-esteele-go-to-baarn/</id><summary type="html">&lt;p&gt;A few years back, I was &lt;a class="reference external" href="http://plone.org/events/sprints/past-sprints/baarn-ui-sprint-2007/"&gt;invited to the Baarn UI Sprint 2007.&lt;/a&gt; This was
a huge turning point for me and Plone. Having just attended the &lt;a class="reference external" href="http://plone.org/events/conferences/seattle-2006"&gt;annual
conference in Seattle&lt;/a&gt;, I was raring to contribute. And in getting
invited, I felt like a Catholic getting invited to the Vatican to hang
out with the Pope (well 1/2 the Pope at least, aka &lt;a class="reference external" href="http://limi.net"&gt;Limi&lt;/a&gt; ;-)). You
cannot beat the awesomeness of the Plone community and the fact that if
you give something to it, you will get it back ten-fold in:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Knowledge and skills (You can acquire a ton of technical skill by
learning the Plone).&lt;/li&gt;
&lt;li&gt;Kindness from strangers (People will help you do things, like attend
a development sprint in another country, amazing).&lt;/li&gt;
&lt;li&gt;Employment for life (There is more Plone work than there are Plone
developers, and I don't see this changing anytime soon).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which brings me to the subject at hand. One of our own, Eric Steele
(author of the amazing development tool &lt;a class="reference external" href="http://plone.org/products/gloworm/"&gt;Gloworm&lt;/a&gt;, and member of the
extremely Plone friendly web group called &lt;a class="reference external" href="http://weblion.psu.edu/"&gt;WebLion&lt;/a&gt;) needs your help!
Last I spoke with Eric he had reached 60% of his desired goal, so let's
help him get to the finish line (by Wednesday).&lt;/p&gt;
&lt;p&gt;You can (and probably should, if you can afford it ;-) donate a little
something here:
&lt;a class="reference external" href="http://www.theartofbeingstill.com/help-me-get-to-baarn"&gt;http://www.theartofbeingstill.com/help-me-get-to-baarn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I can imagine only good things to come for Plone as a result of Eric
attending this event (in fact, Weblion is funding the trip, donations
are for food and incidentals if I recall correctly).&lt;/p&gt;
&lt;p&gt;So please help! :-D&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Getting excited about Plone as eggs</title><link href="http://aclark.net/blog/2008/12/15/getting-excited-about-plone-as-eggs/" rel="alternate"></link><updated>2008-12-15T12:17:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-12-15:2008/12/15/getting-excited-about-plone-as-eggs/</id><summary type="html">&lt;p&gt;Updated for 4.x&lt;/p&gt;
&lt;p&gt;I'm really excited about this, as it greatly simplifies the development
and deployment story for &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt;. For example, you can now create a
Plone buildout.cfg file as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
extends =
    http://dist.plone.org/release/4.0a1/versions.cfgversions = versions
find-links = http://dist.plone.org/thirdparty/PILwoTk-1.1.6.4.tar.gz
parts =
    instance[instance]
recipe = plone.recipe.zope2instance
user = admin:admin
eggs =
    PILwoTk
    Plone
&lt;/pre&gt;
&lt;p&gt;For full instructions, see:
&lt;a class="reference external" href="http://svn.aclark.net/svn/public/buildout/plone/trunk/README.txt"&gt;http://svn.aclark.net/svn/public/buildout/plone/trunk/README.txt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks framework team and core developers for this impressive release!&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>ZPUGDC Meeting Tonight</title><link href="http://aclark.net/blog/2008/12/02/zpugdc-meeting-tonight/" rel="alternate"></link><updated>2008-12-02T07:22:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-12-02:2008/12/02/zpugdc-meeting-tonight/</id><summary type="html">&lt;p&gt;Reblog:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://python-groups.blogspot.com/2008/12/zpugdc-dc-python-meetup-december.html"&gt;http://python-groups.blogspot.com/2008/12/zpugdc-dc-python-meetup-december.html&lt;/a&gt;&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Naked Plone Theme</title><link href="http://aclark.net/blog/2008/11/19/naked-plone-theme/" rel="alternate"></link><updated>2008-11-19T10:30:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-11-19:2008/11/19/naked-plone-theme/</id><summary type="html">&lt;p&gt;I've needed this for quite some time, but I'm just getting around to shipping it. In addition to making it easy to 'turn off' a lot of default Plone css, js, etc., this product (discreetly) adds one of my all time favorite tweaks, the 'Advanced Setup' site action. (Limi, Martin, and Joel Burton will remember this one from 'back in the day' ;-) The action is disabled by default, but you can enable it by clicking 'visible' in portal_actions -&amp;gt; site actions. It simply adds a 'placeful' (string:manage_main) link to the ZMI, so you can access it easily, wherever you happen to be on the site.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Products.todo 0.1</title><link href="http://aclark.net/blog/2008/11/13/productstodo-01/" rel="alternate"></link><updated>2008-11-13T08:07:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-11-13:2008/11/13/productstodo-01/</id><summary type="html">&lt;p&gt;I needed a project to jump start my return to Plone after spending months organizing &lt;a class="reference external" href="http://plone.org/2008"&gt;Plone Conference 2008&lt;/a&gt;, and I had the idea that I wanted to, very quickly, see a product's development cycle through from start to finish, including:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Generating boilerplate buildout and product code with paster.&lt;/li&gt;
&lt;li&gt;Develop some simple functionality for Plone.&lt;/li&gt;
&lt;li&gt;Releasing to pypi.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Repeat steps 2 and 3 as needed or desired. That product is Products.todo (&lt;a class="reference external" href="http://pypi.python.org/pypi/Products.todo/"&gt;http://pypi.python.org/pypi/Products.todo/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;I also wanted to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Include the buildout in the product so I could easily add buildbot (a la Tarek).&lt;/li&gt;
&lt;li&gt;Write some tests for this code so I could practice TDD.&lt;/li&gt;
&lt;li&gt;Release this product to new.plone.org, so we can finish the plone.org upgrade.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm off to a good start I think as, while it took me a couple days (more than I expected), the product is now on pypi. (Thanks to &lt;a class="reference external" href="irc://irc.freenode.net#plone"&gt;irc://irc.freenode.net#plone&lt;/a&gt; and the product-developers list for the help!)&lt;/p&gt;
&lt;p&gt;Next steps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Get some feedback on the code. While this is a simple product, it was not as simple as I would have hoped to implement, and there are more features I would like to add.&lt;/li&gt;
&lt;li&gt;Edit my .pypirc and add new.plone.org and test a release.&lt;/li&gt;
&lt;li&gt;Add buildbot.&lt;/li&gt;
&lt;li&gt;Write some tests. I need some help here. How do you test a simple product like this? I understand that if you test the ability to add an item to a folder you are testing the framework not the product. So maybe I need to focus on testing just the features I add...&lt;/li&gt;
&lt;li&gt;Enjoy doing this in the future when plone.org supports pypi ;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update (11/15/2008):&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;New screenshot&lt;/li&gt;
&lt;li&gt;0.2 version on PyPI&lt;/li&gt;
&lt;li&gt;Thanks for the comments everyone!&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Plone"></category></entry><entry><title>September 2008 is the month of Plone.org</title><link href="http://aclark.net/blog/2008/09/02/september-2008-is-the-month-of-ploneorg/" rel="alternate"></link><updated>2008-09-02T17:15:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-09-02:2008/09/02/september-2008-is-the-month-of-ploneorg/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://plone.org/2008"&gt;Plone Conference 2008&lt;/a&gt; is fast approaching and in order to avoid
embarrassment, disappointment, and a huge public outcry, I'd like to
kick off &lt;em&gt;&amp;quot;September 2008: The Month Of Plone.org&amp;quot;&lt;/em&gt; (cue: daunting
music) so that we can finish upgrading plone.org to Plone 3 &lt;strong&gt;before the
conference begins&lt;/strong&gt;. I have created an OpenPlans project to help
coordinate efforts:
&lt;a class="reference external" href="http://www.openplans.org/projects/ploneorg-upgrade/project-home"&gt;http://www.openplans.org/projects/ploneorg-upgrade/project-home&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are interested in helping, please &lt;a class="reference external" href="http://www.openplans.org/projects/ploneorg-upgrade/request-membership"&gt;join the project&lt;/a&gt;.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>repoze.bfg tonight FTW!</title><link href="http://aclark.net/blog/2008/09/02/repozebfg-tonight-ftw/" rel="alternate"></link><updated>2008-09-02T13:09:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-09-02:2008/09/02/repozebfg-tonight-ftw/</id><summary type="html">&lt;p&gt;Tonight ex-Zope Corporation luminary &lt;strong&gt;Chris McDonough&lt;/strong&gt; unveils his
&lt;a class="reference external" href="http://static.repoze.org/bfgdocs/"&gt;BFG&lt;/a&gt; (Big ****ing Gun) which:&lt;/p&gt;
&lt;p&gt;(excerpt from &lt;a class="reference external" href="http://static.repoze.org/bfgdocs/index.html"&gt;http://static.repoze.org/bfgdocs/index.html&lt;/a&gt;)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;is a&lt;strong&gt;Python web application framework&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;is inspired by Zope’s publisher, though it is less ambitious in
scope.&lt;/li&gt;
&lt;li&gt;relies heavily on Zope libraries and WSGI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Woo Hoo! My favorite thing about repoze.bfg is:&lt;/p&gt;
&lt;p&gt;(excerpt from
&lt;a class="reference external" href="http://static.repoze.org/bfgdocs/narr/introduction.html#why"&gt;http://static.repoze.org/bfgdocs/narr/introduction.html#why&lt;/a&gt;)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Familiarity&lt;/strong&gt;: As web developers, we’ve become accustomed to
working in very particular ways (primarily using Zope 2) over the
years.&amp;nbsp; This framework is a canonization of practices that “fit our
brains”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are also celebrating only (a little over) one month left until &lt;a class="reference external" href="http://plone.org/2008"&gt;Plone
Conference 2008&lt;/a&gt; at the Ronald Reagan Building in DC (and &lt;a class="reference external" href="http://www.openplans.org/projects/plone-conference-2008-dc/sprint"&gt;sprint&lt;/a&gt; at
Arlington Career Center in VA).&lt;/p&gt;
&lt;p&gt;See you tonight!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://zpugdc.org/meetings/mtg67"&gt;http://zpugdc.org/meetings/mtg67&lt;/a&gt;&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>RE: collective.recipe.supervisor: Thank you!</title><link href="http://aclark.net/blog/2008/08/10/re-collectiverecipesupervisor-thank-you/" rel="alternate"></link><updated>2008-08-10T05:24:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-08-10:2008/08/10/re-collectiverecipesupervisor-thank-you/</id><summary type="html">&lt;p&gt;Since I &lt;a class="reference external" href="/Members/aclark/supervisor-rocks/"&gt;last wrote about supervisor&lt;/a&gt; it's become even more easy and
more fun to add it to your buildout with
&lt;a class="reference external" href="http://pypi.python.org/pypi/collective.recipe.supervisor/0.4"&gt;collective.recipe.supervisor&lt;/a&gt;. I &lt;strong&gt;really&lt;/strong&gt; appreciate what this
recipe allows me to do (because it makes my job/life so much easier) and
I want to publicly thank &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.recipe.supervisor/0.4#contributors"&gt;Mustapha Benali, Author &amp;amp; Hanno Schlichting,
Contributor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, it is as simple as editing your buildout.cfg like so:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Add a part for supervisor:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
[buildout]
    parts =
        ...
        supervisor
&lt;/pre&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Create the part:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
[supervisor]
recipe = collective.recipe.supervisor
programs =
    10 zeo ${zeo:location}/bin/runzeo ${zeo:location}
    20 instance ${instance:location}/bin/runzope ${instance:location} true
&lt;/pre&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Run buildout:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
...
Installing supervisor.
Getting distribution for 'supervisor'.
Got supervisor 3.0a6.
Getting distribution for 'elementtree&amp;gt;=1.2.6,&amp;lt;1.2.7'.
zip_safe flag not set; analyzing archive contents...
Got elementtree 1.2.6-20050316.
Getting distribution for 'meld3&amp;gt;=0.6.4'.
zip_safe flag not set; analyzing archive contents...
Got meld3 0.6.5.
Getting distribution for 'medusa&amp;gt;=0.5.4'.
zip_safe flag not set; analyzing archive contents...
Got medusa 0.5.4.
Generated script '/Users/aclark/Developer/supervisor-recipe-test/bin/supervisord'.
Generated script '/Users/aclark/Developer/supervisor-recipe-test/bin/memmon'.
Generated script '/Users/aclark/Developer/supervisor-recipe-test/bin/supervisorctl'.
&lt;/pre&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Start supervisor in the foreground:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
$ bin/supervisord -e debug -n
2008-08-27 06:40:34,805 INFO Increased RLIMIT_NOFILE limit to 1024
2008-08-27 06:40:35,036 INFO RPC interface 'supervisor' initialized
2008-08-27 06:40:35,036 WARN cElementTree not installed,
    using slower XML parser for XML-RPC
2008-08-27 06:40:35,036 CRIT Server 'inet_http_server' running without
    any HTTP authentication checking
2008-08-27 06:40:35,037 INFO supervisord started with pid 99684
2008-08-27 06:40:36,041 INFO spawned: 'zeo' with pid 99686
2008-08-27 06:40:36,049 INFO spawned: 'instance' with pid 99687
2008-08-27 06:40:37,051 INFO success: zeo entered RUNNING state,
    process has stayed up for &amp;gt; than 1 seconds (startsecs)
2008-08-27 06:40:37,051 INFO success: instance entered RUNNING state,
    process has stayed up for &amp;gt; than 1 seconds (startsecs)
2008-08-27 06:40:41,574 DEBG 'instance' stdout output:
2008-08-27 06:40:41 INFO ZServer HTTP server started at Wed Aug 27 06:40:41 2008
    Hostname: localhost
    Port: 8080...2008-08-27 06:41:28,396 DEBG 'instance' stdout output:
2008-08-27 06:41:28 INFO Application New disk product detected,
    determining if we need to fix up any ZClasses.2008-08-27 06:41:28,452 DEBG 'instance' stdout output:
2008-08-27 06:41:28 INFO Zope Ready to handle requests
&lt;/pre&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;When everything looks ok, start supervisor 'for real':&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
bin/supervisord
&lt;/pre&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;Once running, you can:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Check status:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
$ supervisorctl status
instance&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; RUNNING&amp;nbsp;&amp;nbsp;&amp;nbsp; pid 99889, uptime 0:00:04
zeo&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; RUNNING&amp;nbsp;&amp;nbsp;&amp;nbsp; pid 99888, uptime 0:00:04
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Start/stop Zope/ZEO in various ways:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
$ bin/supervisorctl stop instance
instance: stopped$ bin/supervisorctl stop zeo
zeo: stopped$ bin/supervisorctl start zeo
zeo: started$ bin/supervisorctl start instance
instance: started$ bin/supervisorctl stop all
zeo: stopped
instance: stopped$ bin/supervisorctl start  all
zeo: startedinstance: started
&lt;/pre&gt;
&lt;p&gt;and generally go about your business, unfettered.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Plone Conference 2008: Please register for an early bird admission today.</title><link href="http://aclark.net/blog/2008/07/01/plone-conference-2008-please-register-for-an-early-bird-admission-today/" rel="alternate"></link><updated>2008-07-01T08:09:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-07-01:2008/07/01/plone-conference-2008-please-register-for-an-early-bird-admission-today/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://ploneconf2008.eventbrite.com/"&gt;http://ploneconf2008.eventbrite.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Organizing a &lt;a class="reference external" href="http://plone.org/events/conference/2008-washington-dc"&gt;Plone Conference&lt;/a&gt; is a lot like planning to invite 300-400 of your closest friends over for a 7-day long party, or, at least, it feels that way to me. I'm really looking forward to seeing everyone in DC in just a few short months, and I'm very excited about all the possibilities. From the pre-conference training, to the post conference sprint, to all the good food/drink/people/places to enjoy in between. This promises to be one of the biggest and best Plone Conferences ever.&lt;/p&gt;
&lt;p&gt;To that end, I'd like to invite everyone to participate in the early bird registration now open at: &lt;a class="reference external" href="http://ploneconf2008.eventbrite.com"&gt;http://ploneconf2008.eventbrite.com&lt;/a&gt; and I encourage everyone to register right now. We need the support of everyone in the Plone community to make this conference a success.&lt;/p&gt;
&lt;p&gt;From spreading the word, to purchasing tickets, to sponsoring the conference itself, if you are reading this, you can help. Securing early bird registrations is a key part of the planning process; it allows us to move forward to the next phase.&lt;/p&gt;
&lt;p&gt;And finally, a huge thanks to everyone for your support. I continue to be amazed by the spirit of the community, and I really appreciate the opportunity to work on things like &lt;a class="reference external" href="http://plone.org/events/conferences/2008-washington-dc"&gt;Plone Conference 2008&lt;/a&gt; and upgrading plone.org (which I will have more information about soon, but until then, please poke around on: &lt;a class="reference external" href="http://new.plone.org/"&gt;http://new.plone.org/&lt;/a&gt; or check out &lt;a class="reference external" href="http://tarekziade.wordpress.com/2008/07/01/ploneorg-migration/"&gt;Tarek's most recent blog entry&lt;/a&gt; or Jens' most recent mail to the website list: &lt;a class="reference external" href="http://www.nabble.com/plone.org-buildout-refactored-to18266816s6747.html"&gt;http://www.nabble.com/plone.org-buildout-refactored-to18266816s6747.html&lt;/a&gt;. We have scheduled July 19th as the tentative &amp;quot;go live&amp;quot; date.)&lt;/p&gt;
&lt;p&gt;So without further ado, please head over to &lt;a class="reference external" href="http://ploneconf2008.eventbrite.com"&gt;http://ploneconf2008.eventbrite.com&lt;/a&gt; to secure your place at the conference, and help the planning team move forward. See you all in DC!&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Placeful Theming</title><link href="http://aclark.net/blog/2008/06/02/placeful-theming/" rel="alternate"></link><updated>2008-06-02T07:02:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-06-02:2008/06/02/placeful-theming/</id><summary type="html">&lt;p&gt;I had to do a bit of placeful theming lately and I thought I would share the techniques I used (thanks davisagli, jonbaldievieso, vedawms). Let's say you have a Plone 3 site, and for some location /foo/bar/baz, you want 'baz' and everything below it to look different. I made this change through the web because I was in a hurry, but the same can be done in filesystem code.&lt;/p&gt;
&lt;p&gt;The steps are:&lt;/p&gt;
&lt;div class="section" id="override-getsectionfromurl-navigate-to-portal-skins-plone-scripts-getsectionfromurl-and-customize"&gt;
&lt;h2&gt;1. Override getSectionFromURL (navigate to portal_skins/plone_scripts/getSectionFromURL and customize)&lt;/h2&gt;
&lt;p&gt;Normally, this bit of code returns the section id for whatever section you are in. So if your site has three top level folders A, B, C, getSectionURL returns section-A when you are inside of A, section-B when you are inside of B, and so on. However, when you are inside of a sub-section, e.g. /A/news-items-folder, it *still* returns the section id, in this case section-A. The override makes getSectionURL return the sub-section, e.g. /A/news-items-folder, or /foo/bar/baz.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Courtesy of jonb at onenw.org# getSectionFromURLcontentPath = context.portal_url.getRelativeContentPath(context)if not contentPath:    return Noneelse:    s = ''    sectionId = ''    for pathItem in contentPath:        sectionId += pathItem + '-'        s += 'section-' + sectionId[:-1] + ' '    return s[:-1]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="override-plone-logo-navigate-to-portal-view-customizations-zope-interface-interface-plone-logo-and-customize"&gt;
&lt;h2&gt;2. Override plone.logo (navigate to /portal_view_customizations/zope.interface.interface-plone.logo and customize)&lt;/h2&gt;
&lt;p&gt;For some reason (good or not, I don't know) Plone includes an image tag in the html code it uses to generate the Plone logo. This means that it will always output something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
img src=&amp;quot;logo.jpg&amp;quot;
&lt;/pre&gt;
&lt;p&gt;which is a problem if you want to placefully replace the logo because there is no easy way to do it (perhaps you could use some trick to return a different image file with the same file name).&lt;/p&gt;
&lt;p&gt;Plone ships with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;a metal:define-macro=&amp;quot;portal_logo&amp;quot;   id=&amp;quot;portal-logo&amp;quot;   accesskey=&amp;quot;1&amp;quot;   tal:attributes=&amp;quot;href view/navigation_root_url&amp;quot;   i18n:domain=&amp;quot;plone&amp;quot;&amp;gt;    &amp;lt;img src=&amp;quot;logo.jpg&amp;quot; alt=&amp;quot;&amp;quot;         tal:replace=&amp;quot;structure view/logo_tag&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Replace that with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;div metal:define-macro=&amp;quot;portal_logo&amp;quot; id=&amp;quot;portal-logo&amp;quot;&amp;gt;    &amp;lt;a accesskey=&amp;quot;1&amp;quot;       tal:attributes=&amp;quot;href view/navigation_root_url&amp;quot;       i18n:domain=&amp;quot;plone&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="add-css-navigate-to-portal-skins-plone-styles-plonecustom-css-and-customize"&gt;
&lt;h2&gt;3. Add CSS (Navigate to /portal_skins/plone_styles/ploneCustom.css and customize)&lt;/h2&gt;
&lt;p&gt;Next, add in some CSS to make use of the previous two changes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
body.section-foo-bar-baz {    background-image: url(gradient.png);}.section-foo-bar-baz #portal-globalnav li a {    border: 0px;    background: #0066CC;    color: white;    font-size: 110%;    font-face: bold;}.section-foo-bar-baz #portal-globalnav {    background: #0066CC;    padding: 0.25em;}.section-foo-bar-baz #portal-breadcrumbs,.section-foo-bar-baz #portal-personaltools {    background: white;}.section-foo-bar-baz #portal-top {     background: white;}.section-foo-bar-baz #portal-logo {     margin: 1em;    background-image: url(ama_logo.gif);    background-repeat: no-repeat;}.section-foo-bar-baz #visual-portal-wrapper {     background: white;    margin: auto;    width: 883px;    position: relative;}.section-foo-bar-baz body {     background-image: url(gradient.png);    background-repeat: repeat;}#portal-logo {     margin: 1em;    background-image: url(logo.jpg);    background-repeat: no-repeat;}#portal-logo a {     display: block;    width: 650px;    height: 80px;}
&lt;/pre&gt;
&lt;p&gt;I hope this helps someone get started with placeful theming.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>Plone.org upgrade remote sprint!</title><link href="http://aclark.net/blog/2008/05/22/ploneorg-upgrade-remote-sprint/" rel="alternate"></link><updated>2008-05-22T07:07:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-05-22:2008/05/22/ploneorg-upgrade-remote-sprint/</id><summary type="html">&lt;p&gt;Join us this Saturday in &lt;a class="reference external" href="irc://irc.freenode.net#PxC"&gt;irc://irc.freenode.net#PxC&lt;/a&gt; (channel reserved
for discussion of PloneHelpCenter/PloneSoftwareCenter) at 4:00AM EDT to
work on Plone.org upgrade issues, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deploying the latest PloneSoftwareCenter code to new.plone.org and
testing &lt;a class="reference external" href="http://pypi.python.org/pypi/collective.dist/0.1.9"&gt;collective.dist&lt;/a&gt; against new.plone.org/products.&lt;/li&gt;
&lt;li&gt;Develop and test collective.psc.mirroring. This is the
PloneSoftwareCenter module responsible for copying uploads to
dist.plone.org.&lt;/li&gt;
&lt;li&gt;Develop and test &lt;a class="reference external" href="http://svn.plone.org/svn/collective/collective.psc.blobstorage"&gt;collective.psc.blobstorage&lt;/a&gt; and
&lt;a class="reference external" href="http://svn.plone.org/svn/collective/collective.psc.externalstorage/"&gt;collective.psc.externalstorage&lt;/a&gt; and collective.psc.filestorage
(which does not exist yet). These are the modules responsible for
implementing pluggable storage in PloneSoftwareCenter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope to &amp;quot;see&amp;quot; you there. We have lots of jobs for lots of people if you
are interested in helping.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Supervisor rocks!</title><link href="http://aclark.net/blog/2008/05/15/supervisor-rocks/" rel="alternate"></link><updated>2008-05-15T07:41:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-05-15:2008/05/15/supervisor-rocks/</id><summary type="html">&lt;p&gt;(This is essentially a reiteration of &lt;a class="reference external" href="http://blog.delaguardia.com.mx/index.php?op=ViewArticle&amp;amp;articleId=106&amp;amp;blogId=1"&gt;Carlos' previous blog entry&lt;/a&gt;. :-))&lt;/p&gt;
&lt;p&gt;It just occurred to me that we should probably be using &lt;a class="reference external" href="http://supervisord.org"&gt;Supervisor&lt;/a&gt; all over the place in our buildouts. Here's why:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Starting and stopping Zope and ZEO separately is no fun.&lt;/li&gt;
&lt;li&gt;Using Supervisor is easy and fun.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's how to do it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add a part to your buildout.cfg file (this is the fun part):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
parts =
    ...
    supervisor
    ...

[supervisor]
recipe = zc.recipe.egg
egg = supervisor
&lt;/pre&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create a configuration file (this is not as fun; we need a recipe for this!) in your buildout called etc/supervisord.conf and add the following (cargo-cult style):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="literal-block"&gt;
[inet_http_server]port=127.0.0.1:9999#username=admin#password=admin[supervisord]logfile=%(here)s/../var/log/supervisord.loglogfile_maxbytes=50MBlogfile_backups=10loglevel=infopidfile=%(here)s/../var/supervisord.pidnodaemon=false[rpcinterface:supervisor]supervisor.rpcinterface_factory =     supervisor.rpcinterface:make_main_rpcinterface[supervisorctl]serverurl=http://127.0.0.1:9999[program:zeo]command = %(here)s/../parts/zeo/bin/runzeopriority = 10[program:zope]command = %(here)s/../parts/instance/bin/runzopepriority = 20redirect_stderr = true
&lt;/pre&gt;
&lt;p&gt;(Uncomment the admin lines if you want to password protect your supervisor.)&lt;/p&gt;
&lt;p&gt;That's it! Now you can run buildout as normal:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bin/buildout
&lt;/pre&gt;
&lt;p&gt;and then start&amp;nbsp; supervisor:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bin/supervisord
&lt;/pre&gt;
&lt;p&gt;and then use supervisorctl to start and stop your Zope and ZEO at the
same time (for fun and profit):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bin/supervisorctl start allbin/supervisorctl stop all
&lt;/pre&gt;
&lt;p&gt;You even get a nice web interface for free.&lt;/p&gt;
&lt;p&gt;How cool is that? Incidentally, one thing I have always found confusing is how to stop supervisord:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bin/supervisorctl shutdown
&lt;/pre&gt;
&lt;p&gt;So as you can see I'm happy about this, but what would make me even happier is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A buildout recipe that generates a supervisord.conf file 'on the fly'
(i.e. when buildout runs).&lt;/li&gt;
&lt;li&gt;A paster template that includes Supervisor and ZEO (perhaps a cross
between plone_hosting and plone3_buildout?).&lt;/li&gt;
&lt;li&gt;A Unified Installer that includes Supervisor.&lt;/li&gt;
&lt;li&gt;A port of Supervisor to Windows (/me ducks).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;
&lt;p&gt;Thanks Chris McDonough of &lt;a class="reference external" href="http://agendaless.com/"&gt;Agendaless Consulting&lt;/a&gt; and Mike Naberezny of &lt;a class="reference external" href="http://maintainable.com/"&gt;Maintainable Software,&lt;/a&gt; plus &lt;a class="reference external" href="http://supervisord.org/contributors/"&gt;contributors&lt;/a&gt; for creating/maintaining Supervisor and making my job easier :-)&lt;/p&gt;
&lt;p&gt;(And thanks Chris and Carlos for the example configuration files &lt;a class="reference external" href="http://svn.repoze.org/buildouts/repoze.zope2/trunk/etc/supervisord.conf"&gt;here&lt;/a&gt; and &lt;a class="reference external" href="http://svn.repoze.org/buildouts/repoze.zope2/trunk/etc/supervisord.conf"&gt;here&lt;/a&gt;.)&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Plone.org upgrade update!</title><link href="http://aclark.net/blog/2008/05/01/ploneorg-upgrade-update/" rel="alternate"></link><updated>2008-05-01T11:53:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-05-01:2008/05/01/ploneorg-upgrade-update/</id><summary type="html">&lt;p&gt;Thanks again to everyone who contributed to my travel fund. I really
appreciate it and being able to work closely with Tarek Ziadé and
Matthew Wilkes on PloneSoftwareCenter and PloneOrg was amazing,
productive, and fun. Of course being in the company of all the sprinters
was a pleasure, and thank you Christophe for the hospitality! The sprint
was &amp;quot;successful&amp;quot; in that we got a lot done. See:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dev.plone.org/plone/log/PloneOrg/buildouts/trunk/devel"&gt;http://dev.plone.org/plone/log/PloneOrg/buildouts/trunk/devel&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dev.plone.org/collective/log/Products.PloneSoftwareCenter/branches-tarek-distutils-ids"&gt;http://dev.plone.org/collective/log/Products.PloneSoftwareCenter/branches-tarek-distutils-ids&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for the details.&amp;nbsp; In short,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Matthew and Tarek worked on getting PloneSoftwareCenter ready to host
eggs.&lt;/li&gt;
&lt;li&gt;I worked on creating and configuring the new site instance.&lt;/li&gt;
&lt;li&gt;Steve McMahon and I egg-i-fied the remaining product dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, there is still a lot more to do:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We need help with &lt;a class="reference external" href="http://dev.plone.org/collective/browser/ExternalStorage"&gt;ExternalStorage&lt;/a&gt;. The problem is too many objects
in the ZODB with too many different filesystem paths. In the worst
case scenario I can script a fix to set a new filesystem path for the
existing objects, but I'm hoping to avoid this. Ideally we'll support
a pluggable storage feature that will allow end users to choose
between blob, ExternalStorage, and FileSystemStorage, etc.&lt;/li&gt;
&lt;li&gt;We need to finish the new PloneSoftwareCenter implementation. See
&lt;a class="reference external" href="http://dev.plone.org/collective/log/collective.psc.mirroring"&gt;http://dev.plone.org/collective/log/collective.psc.mirroring&lt;/a&gt; for
more information.&lt;/li&gt;
&lt;li&gt;We need to test the new PloneSoftwareCenter implementation. Lots of
people with lots of buildouts will hopefully not mean lots of
problems for the server.&lt;/li&gt;
&lt;li&gt;I need to finish the nginx and varnish setup (package as .debs).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the meantime, I've made the **LARGELY NOT FUNCTIONAL** new
instance available at &lt;a class="reference external" href="http://new.plone.org"&gt;http://new.plone.org&lt;/a&gt; for anyone that is
interested. Please be aware of the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Be kind. This is *just* Zope. No apache, varnish, nginx. etc. Just
Zope.&lt;/li&gt;
&lt;li&gt;You cannot login. LDAP has not been hooked up yet.&lt;/li&gt;
&lt;li&gt;This is not the *real* content. We will cut off plone.org and drop
in the latest Data.fs (and go through all the TTW migration steps
again) when we are ready to launch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm targeting the end of May to launch the *real* new site. Sorry for
the delay (I promised end of April!) Needless to say, I will be actively
working on finishing everything between now and then.&lt;/p&gt;
&lt;p&gt;We will be remote sprinting in #psc on irc.freenode.net this Sunday &amp;#64;
2:00PM EDT if you would like to join us!&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Help me upgrade plone.org</title><link href="http://aclark.net/blog/2008/04/18/help-me-upgrade-ploneorg/" rel="alternate"></link><updated>2008-04-18T18:01:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-04-18:2008/04/18/help-me-upgrade-ploneorg/</id><summary type="html">&lt;p&gt;You may be wondering why plone.org is not running the latest version of
Plone. Well wonder no more! By the end of this month, it will be. I have
been &lt;a class="reference external" href="http://dev.plone.org/plone/log/PloneOrg/buildouts/branches/3.0"&gt;working on&lt;/a&gt;the various bits and pieces needed to upgrade for
months, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Testing the &amp;quot;live&amp;quot; Data.fs against the latest release of Plone.&lt;/li&gt;
&lt;li&gt;Converting old-style Zope 2 Products to eggs.&lt;/li&gt;
&lt;li&gt;Rallying the troops to contribute as needed.&lt;/li&gt;
&lt;li&gt;Becoming a plone.org admin so I can drive the process myself.&lt;/li&gt;
&lt;li&gt;and much, much more!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And I can promise you that tremendous progress will be made at the Paris
sprint next week, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Finalization of the dist-utils enabled PloneSoftwareCenter that will
be used.&lt;/li&gt;
&lt;li&gt;Adding blob support to PloneSoftwareCenter (Witsch, can you help?
:-))&lt;/li&gt;
&lt;li&gt;Migrating all PSCFile objects from ExternalStorage to blob.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So please, if you would like to see an upgraded plone.org as much as I
would, please consider making a generous donation to my travel fund. I'd
like to raise around $1000 to get reimbursed for my airfare only; I will
be sleeping on a donated couch. The suggested donation amount is
$50-100, but any amount is welcome. Thank you all very much!!! And
thanks to everyone that has helped with the upgrade so far including but
not limited to: Limi, Wiggy, SteveM, Tarek, Maurits, Newbery, Jens,
Witsch, MattBowen!&lt;/p&gt;
&lt;p&gt;Lastly, I promise to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cut the fundraiser off as soon as I reach my goal, and&lt;/li&gt;
&lt;li&gt;Report back with results by the end of the month.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now without further ado, please donate-away! :-)&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://www.paypal.com/en_US/i/scr/pixel.gif" /&gt;
&lt;/div&gt;
</summary><category term="Plone"></category></entry><entry><title>NASA story slashdotted!</title><link href="http://aclark.net/blog/2008/04/12/nasa-story-slashdotted/" rel="alternate"></link><updated>2008-04-12T06:43:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-04-12:2008/04/12/nasa-story-slashdotted/</id><summary type="html">&lt;p&gt;Hi all,&lt;/p&gt;
&lt;p&gt;I just noticed that my submission to slashdot was posted (sorry, NASA
;-). Please use your mod points and/or add comments (or do whatever
slashdot people do) to promote Plone. I've sent an email asking that the
link to plone.org be restored (it was removed by the editor, probably
because I made it too big :-).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://science.slashdot.org/science/08/04/12/0010230.shtml"&gt;http://science.slashdot.org/science/08/04/12/0010230.shtml&lt;/a&gt;&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>NASA starts new science Web site, powered by Plone</title><link href="http://aclark.net/blog/2008/04/10/nasa-starts-new-science-web-site-powered-by-plone/" rel="alternate"></link><updated>2008-04-10T14:25:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-04-10:2008/04/10/nasa-starts-new-science-web-site-powered-by-plone/</id><summary type="html">&lt;p&gt;For those who haven't heard about it yet: last night's (5:30PM EDT)
launch of &lt;a class="reference external" href="http://nasascience.nasa.gov"&gt;http://nasascience.nasa.gov&lt;/a&gt; marks the launch of yet
another high-profile Plone site! Congratulations to NASA, InDyne, and
the developers: Reed O'Brien, Daniel Greenfeld, and Chris Shenton! You
guys rock! You can read more about it here:
&lt;a class="reference external" href="http://www.upi.com/NewsTrack/Science/2008/04/10/nasa_starts_new_science_web_site/1059/"&gt;http://www.upi.com/NewsTrack/Science/2008/04/10/nasa_starts_new_science_web_site/1059/.&lt;/a&gt;&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Take Back The Tap!</title><link href="http://aclark.net/blog/2008/03/17/take-back-the-tap/" rel="alternate"></link><updated>2008-03-17T13:47:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-03-17:2008/03/17/take-back-the-tap/</id><summary type="html">&lt;p&gt;ACLARK.NET, LLC is proud to announce: &lt;a class="reference external" href="http://www.takebackthetap.org/"&gt;http://www.takebackthetap.org!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This site is noteworthy because:&lt;/p&gt;
&lt;p&gt;It&amp;nbsp; helps a worthy cause by addressing numerous environmental concerns with bottled water in the United States.&lt;/p&gt;
&lt;p&gt;It is our first Plone 3 site launch.&lt;/p&gt;
&lt;p&gt;It is an integrator success story. The following technology was used to create and deploy this site:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://plone.org/products/plone"&gt;Plone 3.0.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://plone.org/products/ploneformgen"&gt;PloneFormGen 1.2.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://plone.org/products/redirectiontool"&gt;RedirectionTool 1.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://plone.org/products/plone-seo"&gt;qSEOptimizer&lt;/a&gt;1.0.1&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://plone.org/products/webcouturier-dropdownmenu"&gt;webcouturier.dropdownmenu 1.1.2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Plone Community (Limi, Alan, joelburton, optilude, wiggy, SteveM, everyone!)&lt;/li&gt;
&lt;li&gt;Jazkarta (Nate, Matt Ludwig, Rocky, malthe, regebro, et al)&lt;/li&gt;
&lt;li&gt;Food and Water Watch (Jen, Katie, Brendan, Jon, et al)&lt;/li&gt;
&lt;li&gt;Amy Clark (&lt;a class="reference external" href="mailto:amy&amp;#64;aclark.net"&gt;amy&amp;#64;aclark.net&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Matt Bowen (MattBowen)&lt;/li&gt;
&lt;li&gt;Danny Greenfeld (pyDanny)&lt;/li&gt;
&lt;li&gt;Veda Williams (vedawms)&lt;/li&gt;
&lt;li&gt;Everyone else (I may have missed)!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feedback welcome!&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Spaces fixed!</title><link href="http://aclark.net/blog/2008/03/06/spaces-fixed/" rel="alternate"></link><updated>2008-03-06T09:31:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-03-06:2008/03/06/spaces-fixed/</id><summary type="html">&lt;p&gt;For those of you using Spaces in Mac OS X, I'd like to follow up my
&lt;a class="reference external" href="spaces-spaces-spaces-fix"&gt;previous post&lt;/a&gt; with some exciting news regarding Spaces in Mac OS X
10.5.2. It's &amp;quot;fixed&amp;quot;! Thousands of former FVWM users can now rejoice as
they enjoy sane desktop pager functionality. As you know, I've been
tracking the development of the &amp;quot;Spaces... Spaces... Spaces...&amp;quot; hack
(read: waiting for it to support 10.5.2) and I just noticed that the
issue has actually been resolved by Apple, yay! See this post on
macosxhints.com for more information:
&lt;a class="reference external" href="http://www.macosxhints.com/article.php?story=2008021122525348"&gt;http://www.macosxhints.com/article.php?story=2008021122525348&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The short of it is, to alter the annoying spaces-follows-application
behavior, do this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% defaults write com.apple.dock workspaces-auto-swoosh -bool NO
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
% sudo killall Dock
&lt;/pre&gt;
&lt;p&gt;Now Plonistas everywhere (including Tomster) can give Spaces another
try!&lt;/p&gt;
&lt;p&gt;And now, with my sincerest thanks to Apple, I leave you to go work in
another Space...&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>UNIX Tips for the Elderly</title><link href="http://aclark.net/blog/2008/03/06/unix-tips-for-the-elderly/" rel="alternate"></link><updated>2008-03-06T09:31:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-03-06:2008/03/06/unix-tips-for-the-elderly/</id><summary type="html">&lt;p&gt;With apologies to the Plone community for the off-topic post, I'd like to mention this so I won't forget it again (and, in case I do some nice Plonista somewhere wil remind me ;-).&lt;/p&gt;
&lt;p&gt;I often want to do &lt;strong&gt;*something*&lt;/strong&gt; to a bunch of files on the filesystem, e.g.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
find Music/ | xargs -J % echo 'Do something to ' %
&lt;/pre&gt;
&lt;p&gt;The problem is that sometimes the filenames have spaces in them which will cause:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ find Music/ | xargs -J % 'Do something to ' %
xargs: unterminated quote
&lt;/pre&gt;
&lt;p&gt;Useless. The best fix I've managed to come up with (which I couldn't recall, hence the blog post)&amp;nbsp; is to replace the beginning and end of the line with quotes to make the shell happy, e.g.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ find Music/ | sed -e 's/^/&amp;quot;/' -e 's/$/&amp;quot;/'
&amp;quot;Music//iTunes/iTunes Music/Yael Naïm/Yael Naïm/03 New Soul.m4a&amp;quot;
&lt;/pre&gt;
&lt;p&gt;So I can do things like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ find Music/ | sed 's/^/&amp;quot;/' | sed 's/$/&amp;quot;/' | xargs -J % ls -d %
Music//iTunes/iTunes Music/Yael Naïm/Yael Naïm/03 New Soul.m4a
&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ find Music/ | sed 's/^/&amp;quot;/' | sed 's/$/&amp;quot;/' | xargs -J % file %
Music//iTunes/iTunes Music/Yael Naïm/Yael Naïm/03 New Soul.m4a:
  ISO Media, MPEG v4 system, iTunes AAC-LC
&lt;/pre&gt;
&lt;p&gt;... and afterwards go back to whatever I was supposed to be working on in the first place. There, I feel better now! Thanks for listening,&lt;/p&gt;
&lt;p&gt;:-)&lt;/p&gt;
&lt;p&gt;P.S. If anyone knows a better way to do this, please add it in the comments.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Spaces.. Spaces.. Spaces.. fix for Spaces.app in Mac OS X Leopard</title><link href="http://aclark.net/blog/2008/01/01/spaces-spaces-spaces-fix-for-spacesapp-in-mac-os-x-leopard/" rel="alternate"></link><updated>2008-01-01T19:50:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2008-01-01:2008/01/01/spaces-spaces-spaces-fix-for-spacesapp-in-mac-os-x-leopard/</id><summary type="html">&lt;p&gt;Like many &lt;a class="reference external" href="http://plone.org"&gt;Plone&lt;/a&gt; developers, I primarily develop on Mac OS X. Also, like many Plone developers I salivate over, and immediately install any updates to Mac OS X that are released, including Leopard.  Overall, I have been very happy with Leopard, but there is one thing that drives me (and plenty of other people) nuts: the automatic window switching functionality in Spaces. For the unfamiliar, a common feature of UNIX desktops is the ability to easily switch between many different desktops containing many different windows. This feature is commonly referred to as a &amp;quot;desktop pager&amp;quot; or &amp;quot;virtual desktop&amp;quot;, but Apple calls it Spaces.&lt;/p&gt;
&lt;p&gt;Spaces is a great application, they nearly got it right on the first try. I suspect many of the questionable features were included for the sake of soliciting new would-be power users, and/or to maintain user-friendliness, but some features conflict directly with the ability to &amp;quot;power use&amp;quot;. For example, if I'm running a Terminal in Space 1, and I switch to (an empty) Space 2 to open another Terminal, opening the new Terminal (e.g. via Quicksilver, or Spotlight) automatically returns me to Space 1. I now have two terminals in Space 1, which is not what I want. I then have to drag this Terminal to Space 2 which is easy, but annoying. A much better approach would be to allow users to force-open a new application window in the current Space.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.scsc.no/products/spaces-spaces-spaces/"&gt;Spaces.. Spaces.. Spaces..&lt;/a&gt; *almost* makes this happen (via some Dock + code-injection magic). With Spaces.. Spaces.. Spaces.., I can now switch to a new Space and open a new Terminal window, without being automatically taken to another Space running another Terminal. The only catch is the Terminal application has to be &amp;quot;in focus&amp;quot;, else the old &amp;quot;wrong&amp;quot; behavior still applies. In other words, switch to a new window, then click on the Terminal icon in the Dock, then open a new Terminal window. Not a bad work-around for my purposes, this allows me to easily open as many Terminals on as many Spaces as I see fit without being &amp;quot;redirected&amp;quot; (read: interrupted).&lt;/p&gt;
&lt;p&gt;There are a few downsides: 1. You have to run Spaces.. Spaces.. Spaces..  as root, not convenient for starting on boot (unless applications can be run as services somehow? Or something? :-) 2. I'd like the ability to force-launch a new window for any currently running application in the current Space without having to bring that application into focus.  Spaces.. Spaces.. Spaces.. does not currently provide this functionality. 3. It is for Intel-based Macs only.&lt;/p&gt;
&lt;p&gt;I *really* hope Apple addresses this issue in a future release, but in the meantime many thanks to the Spaces.. Spaces.. Spaces.. developer!!!  If you are similarly bothered by this behavior in Spaces, I recommend you give Spaces.. Spaces.. Spaces.. a try.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>zc.buildout recipe tip: hexagonit.recipe.download FTW! (For the win)</title><link href="http://aclark.net/blog/2007/11/28/zcbuildout-recipe-tip-hexagonitrecipedownload-ftw-for-the-win/" rel="alternate"></link><updated>2007-11-28T21:36:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2007-11-28:2007/11/28/zcbuildout-recipe-tip-hexagonitrecipedownload-ftw-for-the-win/</id><summary type="html">&lt;p&gt;Sometimes an &amp;quot;old style&amp;quot; product is distributed as foo.tar.gz and
extracts to foo/, but the product is actually called Bar! This can be a
problem when using the &lt;strong&gt;plone.recipe.productdistros&lt;/strong&gt; recipe because
when 'Bar' is extracted to parts/productdistros/foo, it will not work.&lt;/p&gt;
&lt;p&gt;Fortunately, there is &lt;strong&gt;hexagonit.recipe.download&lt;/strong&gt;, which allows you to
specify a destination. For example, &lt;strong&gt;ZNagios&lt;/strong&gt; (an add-on product that
integrates Zope with Nagios) is available as a tarball here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar"&gt;http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we use productdistros, we end up with ZNagios installed in
parts/productdistros/trunk. No good. But if we use
hexagonit.recipe.download we can control the destination. e.g.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
parts =
    ...
    znagios[znagios]
recipe = hexagonit.recipe.download
url = http://svn.gocept.com/viewcvs/ZNagios/trunk.tar.gz?view=tar
destination = products/ZNagios
strip-top-level-dir = True
&lt;/pre&gt;
&lt;p&gt;After running buildout, you should have the following in your buildout
products/ directory:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/products/ZNagios
/products/ZNagios/COPYRIGHT.txt
/products/ZNagios/LICENSE.txt
/products/ZNagios/README.txt
/products/ZNagios/__init__.py
/products/ZNagios/check_zope.py
/products/ZNagios/munin_client.py
/products/ZNagios/version.txt
/products/ZNagios/zeo_munin.py
/products/ZNagios/zope.cfg
&lt;/pre&gt;
&lt;p&gt;As always, there are &lt;a class="reference external" href="http://dev.plone.org/plone/changeset/21090"&gt;better ways to do this&lt;/a&gt; but getting it done is
nice too. Comments welcome! :-)&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Usergroup-a-palooza</title><link href="http://aclark.net/blog/2007/11/20/usergroup-a-palooza/" rel="alternate"></link><updated>2007-11-20T16:51:00-05:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2007-11-20:2007/11/20/usergroup-a-palooza/</id><summary type="html">&lt;p&gt;Today at the behest of &lt;a class="reference external" href="http://agendaless.com"&gt;Tres Seaver&lt;/a&gt; and &lt;a class="reference external" href="http://mail.zope.org/mailman/listinfo/zug-sig"&gt;ZUG-SIG&lt;/a&gt; , I updated &lt;a class="reference external" href="http://www.zope.org/Resources/UserGroups"&gt;http://www.zope.org/Resources/UserGroups&lt;/a&gt;. Most of the information came from&lt;a class="reference external" href="http://trizpug.org"&gt;Chris Calloway&lt;/a&gt;, I just converted it to structured text. Now it's &lt;a class="reference external" href="http://www.zope.org/Resources/UserGroups/index_html_old"&gt;better than the old one&lt;/a&gt; and should be easier for &amp;quot;humans&amp;quot; to maintain. As Chris would say, &amp;quot;Yay us.&amp;quot; What I continue to find amazing is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The number of user groups that have &lt;a class="reference external" href="http://czug.org"&gt;come and gone&lt;/a&gt; over the years.&lt;/li&gt;
&lt;li&gt;The number of user group &lt;a class="reference external" href="http://theploneblog.org/blog/archive/2005/11/17/here-a-user-group-there-a-user-group"&gt;unification attempts&lt;/a&gt; that have &lt;a class="reference external" href="http://czug.org"&gt;come and gone&lt;/a&gt; over the years.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I don't really have a point, other than to say that &lt;a class="reference external" href="http://www.zope.org/Resources/UserGroups"&gt;http://www.zope.org/Resources/UserGroups&lt;/a&gt; looks a lot like &lt;a class="reference external" href="http://wiki.python.org/moin/LocalUserGroups"&gt;http://wiki.python.org/moin/LocalUserGroups&lt;/a&gt; and &lt;a class="reference external" href="http://plone.org/support/local-user-groups/"&gt;http://plone.org/support/local-user-groups&lt;/a&gt;, and to me that is A Good Thing ™. It suggests that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We are all fighting the same battle, i.e. we all like using Python to solve the world's problems.&lt;/li&gt;
&lt;li&gt;We really have entered into the &lt;a class="reference external" href="http://faassen.n--tree.net/blog/view/weblog/2007/11/15/0"&gt;fourth age of Zope&lt;/a&gt;, i.e. Zope is becoming part of the Python vernacular again, and not in a bad way.&lt;/li&gt;
&lt;li&gt;There is still more work to be done, e.g. Chris Calloway once told me he didn't believe in using a &amp;quot;Super Robot Chicken&amp;quot; (Web 2.0 euphemism?) to unite all of the user groups under one umbrella, but I am still holding my breath!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See you at the next Python/Zope/Plone/Grok/Repoze meeting! ;-)&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Repoze &amp;quot;meetups&amp;quot;</title><link href="http://aclark.net/blog/2007/10/28/repoze-quotmeetupsquot/" rel="alternate"></link><updated>2007-10-28T19:17:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2007-10-28:2007/10/28/repoze-quotmeetupsquot/</id><summary type="html">&lt;p&gt;As Paul Everitt &lt;a class="reference external" href="http://radio.weblogs.com/0116506/2007/10/26.html#a440"&gt;recently&lt;/a&gt; &lt;a class="reference external" href="http://radio.weblogs.com/0116506/2007/10/26.html#a441"&gt;mentioned&lt;/a&gt;, the &lt;a class="reference external" href="http://agendaless.com"&gt;dudes&lt;/a&gt; are back! Three (self-described,ex-Zope Corp) graybeards doing what they love to do best! Using Zope. But this is not your father's Zope (assuming your dad used Zope in the early 2000s) this is Repoze, which integrates Zope technologies with WSGI and reusable Python middleware.  &lt;a class="reference external" href="http://plope.com"&gt;One of the dudes&lt;/a&gt; will be delivering the first of a two part presentation on &lt;a class="reference external" href="http://repoze.org"&gt;Repoze&lt;/a&gt; tonight in Washington, DC, USA. Next month,
he'll be joined by &lt;a class="reference external" href="http://palladion.com"&gt;the other dude&lt;/a&gt; and possibly Paul Everitt himself.  Please help spread the word about this event by pointing people towards&lt;a class="reference external" href="http://zpugdc.org/meetings/mtg57"&gt;http://zpugdc.org/meetings/mtg57&lt;/a&gt;. Or, if you prefer &amp;quot;Web 2.0&amp;quot;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://python.meetup.com/176/?track=i3/mu_u2sjbkakgn"&gt;Click here to check out The Washington DC Python Meetup Group!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lastly, we welcome anyone in the Washington, DC, USA area to join us.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>My Plone Days (October 2007)</title><link href="http://aclark.net/blog/2007/10/18/my-plone-days-october-2007/" rel="alternate"></link><updated>2007-10-18T13:09:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2007-10-18:2007/10/18/my-plone-days-october-2007/</id><summary type="html">&lt;p&gt;My focus will be &lt;a class="reference external" href="http://plone.org/products/plonesoftwarecenter"&gt;PloneSoftwareCenter (PSC)&lt;/a&gt;. That's right! You heard
it here first. After a little prodding on IRC from Martin Aspeli, Steve
McMahon, and Geir Bækholt I am declaring myself the &amp;quot;owner&amp;quot; of &lt;a class="reference external" href="http://plone.org/products/plonesoftwarecenter"&gt;PSC&lt;/a&gt;
(read: responsible for releases). I'll spend my first two days (16 hours
next Tuesday and Thursday, 9-5 EDT) working on &lt;a class="reference external" href="http://plone.org/products/plonesoftwarecenter"&gt;PSC&lt;/a&gt; and getting it
ready to ship (with Plone 3 compatibility).&lt;/p&gt;
&lt;p&gt;For more information about the TPPM (10% Plone Manifesto) please see:
&lt;a class="reference external" href="http://www.jarn.com/blog/the-10-plone-manifesto/"&gt;http://www.jarn.com/blog/the-10-plone-manifesto/&lt;/a&gt;&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Is this thing on?</title><link href="http://aclark.net/blog/2007/10/17/is-this-thing-on/" rel="alternate"></link><updated>2007-10-17T09:48:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2007-10-17:2007/10/17/is-this-thing-on/</id><summary type="html">&lt;p&gt;... because it is showing up on &lt;a class="reference external" href="http://planet.plone.org"&gt;planet&lt;/a&gt;! Sorry about the duplicates. I have recreated my blog using Just Plone ™ (and I didn't realize syndication was turned on already ;-)) In any event, here it is!&lt;/p&gt;
&lt;p&gt;And while I have your attention, I've decided that I am &lt;a class="reference external" href="http://tomster.org/blog/archive/2007/10/17/today-is-my-first-plone-day"&gt;joining Tomster&lt;/a&gt; and others in pledging allegiance to the Plone by joining the &lt;a class="reference external" href="http://www.plonesolutions.com/blog/the-10-plone-manifesto/"&gt;10% Manifesto&lt;/a&gt; as proposed by &lt;a class="reference external" href="http://www.jarn.com/blog/the-10-plone-manifesto/"&gt;Geir Bækholt at Jarn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I will schedule my Plone days at the beginning of each month starting this month (October 2007) and announce them here.&lt;/p&gt;
&lt;p&gt;First announcment coming soon.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>I love the slrn news reader</title><link href="http://aclark.net/blog/2007/10/17/i-love-the-slrn-news-reader/" rel="alternate"></link><updated>2007-10-17T09:26:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2007-10-17:2007/10/17/i-love-the-slrn-news-reader/</id><summary type="html">&lt;p&gt;I've been meaning to write this blog entry about &lt;strong&gt;*slrn*&lt;/strong&gt; ever since I started using it some time last year. Finally, here it is. But this is not the blog entry I had originally intended to write. There were some grandiose ideas about where I first heard of it; the blog entry that inspired me to try it; how I was frustrated with the alternatives; none of these are present here in any detail. That is because I'm frustrated with the length of time it takes to write a &amp;quot;quality&amp;quot; blog entry, when all I want to do is get the information out. (But that is a separate blog entry :-))&lt;/p&gt;
&lt;p&gt;To that end, here are a few things I'd like you to know about &lt;strong&gt;*slrn*&lt;/strong&gt;:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It rocks, for those that enjoy terminal applications as I do (e.g.  mutt, w3m, etc.) And by &amp;quot;rocks&amp;quot; I mean, it allows you to do in a terminal what most people do in a graphical application. Further, it allows you to do it the way you want (for the most part) and by that I mean, it allows you to bind keys to actions.&lt;/li&gt;
&lt;li&gt;It's a bit confusing to get started, that is what I'd like to help with here. There is a &lt;a class="reference external" href="http://slrn.sourceforge.net/downloads/slrn.rc"&gt;default config file that you'll want to copy to ~/.slrnrc&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;there are some additional configuration parameters I use that were hard to track down. Those are:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="literal-block"&gt;
set confirm_actions 14visible_headers &amp;quot;From:,Subject:,Newsgroups:,Followup-To:,Reply-To:,Date:&amp;quot;set query_read_group_cutoff 0set uncollapse_threads 1set netiquette_warnings 0
&lt;/pre&gt;
&lt;p&gt;Most of these are self-explanatory, but if you are looking at &amp;quot;set confirm_actions 14&amp;quot; and thinking &amp;quot;wtf?&amp;quot; you are not alone :-) I'll leave it as an exercise to the reader to explore. See: &lt;a class="reference external" href="http://slrn.sourceforge.net/manual/slrn-manual.html"&gt;http://slrn.sourceforge.net/manual/slrn-manual.html&lt;/a&gt; for more information. I hope this post helps someone get started using &lt;strong&gt;*slrn&lt;/strong&gt;!*&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Next, in Part II, I will cover **slrnpull*&lt;/em&gt;; the program I use (distributed with slrn) to download news. I never &amp;quot;read it live&amp;quot; and I will explain why ;-)*&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Help improve Plone API documentation</title><link href="http://aclark.net/blog/2007/10/17/help-improve-plone-api-documentation/" rel="alternate"></link><updated>2007-10-17T09:19:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2007-10-17:2007/10/17/help-improve-plone-api-documentation/</id><summary type="html">&lt;p&gt;I'm travelling from Washington, DC, USA to Mountain View, CA, USA June 26 - 29 to participate in the 2007 &lt;a class="reference external" href="http://plone.org/events/sprints/doc-ecommerce"&gt;Plone Doccomm Sprint&lt;/a&gt;. My main focus will be updating Plone's online API documentation (available at &lt;a class="reference external" href="http://api.plone.org/"&gt;http://api.plone.org&lt;/a&gt;). If you are interested in seeing this done and would like to help, please consider making a donation to help offset the cost of my airfare. In return, I will create and upload API documentation for:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Plone-2.5.3&lt;/li&gt;
&lt;li&gt;Archetypes-1.4.4&lt;/li&gt;
&lt;li&gt;CMF-1.6.4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Plone-3.0&lt;/li&gt;
&lt;li&gt;Archetypes-1.5.0&lt;/li&gt;
&lt;li&gt;CMF-2.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I plan to use either &lt;a class="reference external" href="http://epydoc.sourceforge.net/"&gt;epydoc&lt;/a&gt; or &lt;a class="reference external" href="http://pudge.lesscode.org/"&gt;pudge&lt;/a&gt;. Suggestions welcome! For more information please see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://plone.org/development/teams/documentation/documentation-tracker/37"&gt;http://plone.org/development/teams/documentation/documentation-tracker/37&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.nabble.com/Turn-off-api.plone.org--tf3602743.html#a10064645"&gt;http://www.nabble.com/Turn-off-api.plone.org--tf3602743.html#a10064645&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I originally suggested we turn off api.plone.org but that was met with a resounding &amp;quot;no!&amp;quot;)&lt;/p&gt;
&lt;p&gt;And without further ado, please consider making a donation! Any amount is welcome; the goal is $600 USD. I will make an announcement once I've reached it (so people don't give too much).&lt;/p&gt;
&lt;p&gt;Thank You!!!&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>First Post</title><link href="http://aclark.net/blog/2007/10/17/first-post/" rel="alternate"></link><updated>2007-10-17T08:55:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2007-10-17:2007/10/17/first-post/</id><summary type="html">&lt;p&gt;Why? Because I can (read: &lt;a class="reference external" href="http://plone.org/"&gt;Plone&lt;/a&gt; allows me to do so) but also:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I have been reading a lot of &lt;a class="reference external" href="http://planet.plone.org/"&gt;Plone blogs&lt;/a&gt; lately and they have inspired me to write my own.&lt;/li&gt;
&lt;li&gt;I want to interact with other Plonistas.&lt;/li&gt;
&lt;li&gt;I want to get my web 2.0 &lt;strong&gt;ON&lt;/strong&gt;. ;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To that end, this post is about my &lt;a class="reference external" href="http://svn.plone.org/svn/collective/newzope"&gt;build tools&lt;/a&gt; and how I love them.&lt;/p&gt;
&lt;p&gt;Note: there are &lt;strong&gt;much&lt;/strong&gt; better ways to accomplish what I'm doing here. I'm reminding &lt;em&gt;myself&lt;/em&gt; this as much as the reader. So why do I continue to use them? Good question! I'll save the answer for another post, but for now you should be aware of these (better) alternatives:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://dev.plone.org/plone/browser/ploneout/trunk/README.txt"&gt;Buildout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://agendaless.com/Members/chrism/software/buildit"&gt;Buildit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://plone.org/products/instancemanager"&gt;Instance Manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used buildout for the first time at the &lt;a class="reference external" href="http://plone.org/events/sprints/baarn-ui-sprint-2007/"&gt;Baarn UI Sprint 2007&lt;/a&gt; and really enjoyed it. I have also used and enjoyed Chris McDonough's buildit. That may be where I end up (and there are several more to choose from) but for now I still enjoy typing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
newzope test-site ProductA ProductB ProductC
&lt;/pre&gt;
&lt;p&gt;and having a working instance a few seconds later (with Product[A,B,C] installed)! Of course this requires I have a working Zope already... and that I edit Zope's skel/etc/zope.conf... but hey nothing is perfect and old habits die hard.&lt;/p&gt;
</summary><category term="Plone"></category></entry><entry><title>Technorati Post Claim, Please Ignore.</title><link href="http://aclark.net/blog/2007/10/10/technorati-post-claim-please-ignore/" rel="alternate"></link><updated>2007-10-10T19:47:00-04:00</updated><author><name>aclark</name></author><id>tag:aclark.net/blog,2007-10-10:2007/10/10/technorati-post-claim-please-ignore/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://technorati.com/claim/nj735fhurk"&gt;Technorati Profile&lt;/a&gt;&lt;/p&gt;
</summary><category term="Plone"></category></entry></feed>